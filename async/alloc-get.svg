<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (40,008 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (25,028 samples, 62.56%)</title><rect x="10.0" y="307.0" width="738.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (25,028 samples, 62.56%)</title><rect x="10.0" y="291.0" width="738.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (25,028 samples, 62.56%)</title><rect x="10.0" y="275.0" width="738.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (24,092 samples, 60.22%)</title><rect x="10.0" y="259.0" width="710.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$65/632463387.call (11,226 samples, 28.06%)</title><rect x="10.0" y="243.0" width="331.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="254.0">ru/mail/polis/service/mariarheon/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$passOn$1 (11,226 samples, 28.06%)</title><rect x="10.0" y="227.0" width="331.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="238.0">ru/mail/polis/service/mariarheon/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOnInternal (11,226 samples, 28.06%)</title><rect x="10.0" y="211.0" width="331.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="222.0">ru/mail/polis/service/mariarheon/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.addMyselfParamToRequest (150 samples, 0.37%)</title><rect x="10.0" y="195.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (76 samples, 0.19%)</title><rect x="10.0" y="179.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/112049309.invoke (76 samples, 0.19%)</title><rect x="10.0" y="163.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (76 samples, 0.19%)</title><rect x="10.0" y="147.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (14 samples, 0.03%)</title><rect x="10.0" y="131.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>java.lang.String (14 samples, 0.03%)</title><rect x="10.0" y="115.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (62 samples, 0.15%)</title><rect x="10.4" y="131.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (62 samples, 0.15%)</title><rect x="10.4" y="115.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.4" y="126.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.15%)</title><rect x="10.4" y="99.0" width="1.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="13.4" y="110.0"></text>
</g>
<g>
<title>one.nio.http.Request (22 samples, 0.05%)</title><rect x="12.2" y="179.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="15.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (52 samples, 0.13%)</title><rect x="12.9" y="179.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (52 samples, 0.13%)</title><rect x="12.9" y="163.0" width="1.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="15.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.passOn (11,076 samples, 27.68%)</title><rect x="14.4" y="195.0" width="326.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.4" y="206.0">ru/mail/polis/service/mariarheon/RendezvousS..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (11,076 samples, 27.68%)</title><rect x="14.4" y="179.0" width="326.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.4" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (11,076 samples, 27.68%)</title><rect x="14.4" y="163.0" width="326.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.4" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (27 samples, 0.07%)</title><rect x="14.4" y="147.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="17.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (10,293 samples, 25.73%)</title><rect x="15.2" y="147.0" width="303.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;i..</text>
</g>
<g>
<title>byte[] (5,267 samples, 13.16%)</title><rect x="15.2" y="131.0" width="155.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="18.2" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (5,026 samples, 12.56%)</title><rect x="170.6" y="131.0" width="148.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="173.6" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (631 samples, 1.58%)</title><rect x="318.8" y="147.0" width="18.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (27 samples, 0.07%)</title><rect x="319.0" y="131.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (27 samples, 0.07%)</title><rect x="319.0" y="115.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.0" y="126.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.03%)</title><rect x="319.0" y="99.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="322.0" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.04%)</title><rect x="319.4" y="99.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.4" y="110.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.04%)</title><rect x="319.4" y="83.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="322.4" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (13 samples, 0.03%)</title><rect x="319.8" y="131.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="322.8" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (531 samples, 1.33%)</title><rect x="320.2" y="131.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.2" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (531 samples, 1.33%)</title><rect x="320.2" y="115.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.2" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (531 samples, 1.33%)</title><rect x="320.2" y="99.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.2" y="110.0"></text>
</g>
<g>
<title>char[] (414 samples, 1.03%)</title><rect x="320.2" y="83.0" width="12.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="323.2" y="94.0"></text>
</g>
<g>
<title>java.lang.String (59 samples, 0.15%)</title><rect x="332.4" y="83.0" width="1.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="335.4" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (58 samples, 0.14%)</title><rect x="334.2" y="83.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.2" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (58 samples, 0.14%)</title><rect x="334.2" y="67.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.2" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (58 samples, 0.14%)</title><rect x="334.2" y="51.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.2" y="62.0"></text>
</g>
<g>
<title>byte[] (58 samples, 0.14%)</title><rect x="334.2" y="35.0" width="1.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="337.2" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (18 samples, 0.04%)</title><rect x="335.9" y="131.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (18 samples, 0.04%)</title><rect x="335.9" y="115.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="338.9" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (34 samples, 0.08%)</title><rect x="336.4" y="131.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (34 samples, 0.08%)</title><rect x="336.4" y="115.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (34 samples, 0.08%)</title><rect x="336.4" y="99.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="339.4" y="110.0"></text>
</g>
<g>
<title>java.lang.String (13 samples, 0.03%)</title><rect x="336.4" y="83.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="339.4" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (21 samples, 0.05%)</title><rect x="336.8" y="83.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="339.8" y="94.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.05%)</title><rect x="336.8" y="67.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="339.8" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (84 samples, 0.21%)</title><rect x="337.4" y="147.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.4" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (84 samples, 0.21%)</title><rect x="337.4" y="131.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.4" y="142.0"></text>
</g>
<g>
<title>byte[] (84 samples, 0.21%)</title><rect x="337.4" y="115.0" width="2.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="340.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (24 samples, 0.06%)</title><rect x="339.9" y="147.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (24 samples, 0.06%)</title><rect x="339.9" y="131.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.9" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (24 samples, 0.06%)</title><rect x="339.9" y="115.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.9" y="126.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.02%)</title><rect x="339.9" y="99.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="342.9" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (14 samples, 0.03%)</title><rect x="340.2" y="99.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.2" y="110.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.03%)</title><rect x="340.2" y="83.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="343.2" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (17 samples, 0.04%)</title><rect x="340.6" y="147.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.6" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (17 samples, 0.04%)</title><rect x="340.6" y="131.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.6" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (17 samples, 0.04%)</title><rect x="340.6" y="115.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.6" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (17 samples, 0.04%)</title><rect x="340.6" y="99.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="343.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$71/656783190.call (12,866 samples, 32.16%)</title><rect x="341.1" y="243.0" width="379.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.1" y="254.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl$$L..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$processRequest$0 (12,866 samples, 32.16%)</title><rect x="341.1" y="227.0" width="379.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="344.1" y="238.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl.la..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.get (12,866 samples, 32.16%)</title><rect x="341.1" y="211.0" width="379.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="344.1" y="222.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl.get</text>
</g>
<g>
<title>java/lang/String.getBytes (2,356 samples, 5.89%)</title><rect x="341.1" y="195.0" width="69.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.1" y="206.0">java/la..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (2,356 samples, 5.89%)</title><rect x="341.1" y="179.0" width="69.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.1" y="190.0">java/la..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2,356 samples, 5.89%)</title><rect x="341.1" y="163.0" width="69.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.1" y="174.0">java/la..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (2,356 samples, 5.89%)</title><rect x="341.1" y="147.0" width="69.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.1" y="158.0">java/ut..</text>
</g>
<g>
<title>byte[] (2,356 samples, 5.89%)</title><rect x="341.1" y="131.0" width="69.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="344.1" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/Response.ok (3,284 samples, 8.21%)</title><rect x="410.6" y="195.0" width="96.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="413.6" y="206.0">one/nio/htt..</text>
</g>
<g>
<title>one.nio.http.Response (682 samples, 1.70%)</title><rect x="410.6" y="179.0" width="20.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="413.6" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2,602 samples, 6.50%)</title><rect x="430.7" y="179.0" width="76.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.7" y="190.0">one/nio/..</text>
</g>
<g>
<title>byte[] (1,062 samples, 2.65%)</title><rect x="430.7" y="163.0" width="31.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="433.7" y="174.0">by..</text>
</g>
<g>
<title>java.lang.String[] (907 samples, 2.27%)</title><rect x="462.0" y="163.0" width="26.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="465.0" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (633 samples, 1.58%)</title><rect x="488.8" y="163.0" width="18.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="491.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (1,920 samples, 4.80%)</title><rect x="507.4" y="195.0" width="56.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.4" y="206.0">ru/mai..</text>
</g>
<g>
<title>byte[] (599 samples, 1.50%)</title><rect x="507.4" y="179.0" width="17.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="510.4" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,321 samples, 3.30%)</title><rect x="525.1" y="179.0" width="39.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="528.1" y="190.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,321 samples, 3.30%)</title><rect x="525.1" y="163.0" width="39.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="528.1" y="174.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (1,266 samples, 3.16%)</title><rect x="564.1" y="195.0" width="37.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="567.1" y="206.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,266 samples, 3.16%)</title><rect x="564.1" y="179.0" width="37.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.1" y="190.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,266 samples, 3.16%)</title><rect x="564.1" y="163.0" width="37.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="567.1" y="174.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,266 samples, 3.16%)</title><rect x="564.1" y="147.0" width="37.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="567.1" y="158.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.get (4,040 samples, 10.10%)</title><rect x="601.4" y="195.0" width="119.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="604.4" y="206.0">ru/mail/polis/d..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (675 samples, 1.69%)</title><rect x="601.4" y="179.0" width="19.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="604.4" y="190.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (675 samples, 1.69%)</title><rect x="601.4" y="163.0" width="19.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.4" y="174.0"></text>
</g>
<g>
<title>byte[] (675 samples, 1.69%)</title><rect x="601.4" y="147.0" width="19.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="604.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArrayUnsigned (1,987 samples, 4.97%)</title><rect x="621.3" y="179.0" width="58.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.3" y="190.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (1,987 samples, 4.97%)</title><rect x="621.3" y="163.0" width="58.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.3" y="174.0">ru/mai..</text>
</g>
<g>
<title>byte[] (636 samples, 1.59%)</title><rect x="621.3" y="147.0" width="18.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="624.3" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,351 samples, 3.38%)</title><rect x="640.1" y="147.0" width="39.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.1" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,351 samples, 3.38%)</title><rect x="640.1" y="131.0" width="39.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="643.1" y="142.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (1,378 samples, 3.44%)</title><rect x="679.9" y="179.0" width="40.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.9" y="190.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,378 samples, 3.44%)</title><rect x="679.9" y="163.0" width="40.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="682.9" y="174.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,378 samples, 3.44%)</title><rect x="679.9" y="147.0" width="40.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="682.9" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,378 samples, 3.44%)</title><rect x="679.9" y="131.0" width="40.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="682.9" y="142.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (936 samples, 2.34%)</title><rect x="720.6" y="259.0" width="27.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.6" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (936 samples, 2.34%)</title><rect x="720.6" y="243.0" width="27.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="723.6" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (922 samples, 2.30%)</title><rect x="720.6" y="227.0" width="27.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.6" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (922 samples, 2.30%)</title><rect x="720.6" y="211.0" width="27.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.6" y="222.0">j..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (922 samples, 2.30%)</title><rect x="720.6" y="195.0" width="27.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="723.6" y="206.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.03%)</title><rect x="747.8" y="227.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 0.03%)</title><rect x="747.8" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="750.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (14 samples, 0.03%)</title><rect x="747.8" y="195.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (14 samples, 0.03%)</title><rect x="747.8" y="179.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.8" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (14 samples, 0.03%)</title><rect x="747.8" y="163.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="750.8" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (14,980 samples, 37.44%)</title><rect x="748.2" y="307.0" width="441.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.2" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (317 samples, 0.79%)</title><rect x="748.2" y="291.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.2" y="302.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (317 samples, 0.79%)</title><rect x="748.2" y="275.0" width="9.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="751.2" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (14,663 samples, 36.65%)</title><rect x="757.5" y="291.0" width="432.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.5" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (14,663 samples, 36.65%)</title><rect x="757.5" y="275.0" width="432.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.5" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14,663 samples, 36.65%)</title><rect x="757.5" y="259.0" width="432.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.5" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8,187 samples, 20.46%)</title><rect x="757.5" y="243.0" width="241.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.5" y="254.0">one/nio/http/HttpSession.handleP..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8,187 samples, 20.46%)</title><rect x="757.5" y="227.0" width="241.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.5" y="238.0">one/nio/http/HttpServer.handleRe..</text>
</g>
<g>
<title>RequestHandler0_handleEntityRequest.handleRequest (7,212 samples, 18.03%)</title><rect x="757.5" y="211.0" width="212.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.5" y="222.0">RequestHandler0_handleEntity..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (434 samples, 1.08%)</title><rect x="757.5" y="195.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (434 samples, 1.08%)</title><rect x="757.5" y="179.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="760.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (434 samples, 1.08%)</title><rect x="757.5" y="163.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="760.5" y="174.0"></text>
</g>
<g>
<title>java.lang.String (240 samples, 0.60%)</title><rect x="757.5" y="147.0" width="7.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="760.5" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (194 samples, 0.48%)</title><rect x="764.6" y="147.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.6" y="158.0"></text>
</g>
<g>
<title>byte[] (194 samples, 0.48%)</title><rect x="764.6" y="131.0" width="5.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="767.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (793 samples, 1.98%)</title><rect x="770.3" y="195.0" width="23.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="773.3" y="206.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (793 samples, 1.98%)</title><rect x="770.3" y="179.0" width="23.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.3" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (793 samples, 1.98%)</title><rect x="770.3" y="163.0" width="23.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.3" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (793 samples, 1.98%)</title><rect x="770.3" y="147.0" width="23.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.3" y="158.0">j..</text>
</g>
<g>
<title>java.lang.String (362 samples, 0.90%)</title><rect x="770.3" y="131.0" width="10.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="773.3" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (431 samples, 1.08%)</title><rect x="781.0" y="131.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.0" y="142.0"></text>
</g>
<g>
<title>byte[] (431 samples, 1.08%)</title><rect x="781.0" y="115.0" width="12.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="784.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.handleEntityRequest (5,985 samples, 14.96%)</title><rect x="793.7" y="195.0" width="176.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.7" y="206.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (253 samples, 0.63%)</title><rect x="793.7" y="179.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (253 samples, 0.63%)</title><rect x="793.7" y="163.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.7" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask$WaitNode (253 samples, 0.63%)</title><rect x="793.7" y="147.0" width="7.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="796.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.processRequest (640 samples, 1.60%)</title><rect x="801.2" y="179.0" width="18.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (287 samples, 0.72%)</title><rect x="801.2" y="163.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.2" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (287 samples, 0.72%)</title><rect x="801.2" y="147.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="804.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$71/656783190.get$Lambda (287 samples, 0.72%)</title><rect x="801.2" y="131.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="804.2" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mariarheon.AsyncServiceImpl$$Lambda$71 (287 samples, 0.72%)</title><rect x="801.2" y="115.0" width="8.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="804.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (353 samples, 0.88%)</title><rect x="809.6" y="163.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="812.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (350 samples, 0.87%)</title><rect x="809.6" y="147.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.6" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (350 samples, 0.87%)</title><rect x="809.6" y="131.0" width="10.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="812.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.sendToReplicas (3,635 samples, 9.09%)</title><rect x="820.1" y="179.0" width="107.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.1" y="190.0">ru/mail/polis..</text>
</g>
<g>
<title>java.util.ArrayList (146 samples, 0.36%)</title><rect x="820.1" y="163.0" width="4.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="823.1" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (192 samples, 0.48%)</title><rect x="824.4" y="163.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.4" y="174.0"></text>
</g>
<g>
<title>java.lang.Object[] (192 samples, 0.48%)</title><rect x="824.4" y="147.0" width="5.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="827.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (248 samples, 0.62%)</title><rect x="830.0" y="163.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (248 samples, 0.62%)</title><rect x="830.0" y="147.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.0" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask$WaitNode (248 samples, 0.62%)</title><rect x="830.0" y="131.0" width="7.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="833.0" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mariarheon.ReplicasResponseComposer (200 samples, 0.50%)</title><rect x="837.3" y="163.0" width="5.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="840.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOn (652 samples, 1.63%)</title><rect x="843.2" y="163.0" width="19.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.2" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (270 samples, 0.67%)</title><rect x="843.2" y="147.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.2" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (270 samples, 0.67%)</title><rect x="843.2" y="131.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$65/632463387.get$Lambda (270 samples, 0.67%)</title><rect x="843.2" y="115.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.2" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mariarheon.AsyncServiceImpl$$Lambda$65 (270 samples, 0.67%)</title><rect x="843.2" y="99.0" width="8.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="846.2" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (382 samples, 0.95%)</title><rect x="851.2" y="147.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (376 samples, 0.94%)</title><rect x="851.2" y="131.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.2" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (376 samples, 0.94%)</title><rect x="851.2" y="115.0" width="11.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="854.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.processRequest (344 samples, 0.86%)</title><rect x="862.5" y="163.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="865.5" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (153 samples, 0.38%)</title><rect x="862.5" y="147.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="865.5" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (153 samples, 0.38%)</title><rect x="862.5" y="131.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="865.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$71/656783190.get$Lambda (153 samples, 0.38%)</title><rect x="862.5" y="115.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="865.5" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.service.mariarheon.AsyncServiceImpl$$Lambda$71 (153 samples, 0.38%)</title><rect x="862.5" y="99.0" width="4.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="865.5" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (191 samples, 0.48%)</title><rect x="867.0" y="147.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (189 samples, 0.47%)</title><rect x="867.0" y="131.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.0" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (189 samples, 0.47%)</title><rect x="867.0" y="115.0" width="5.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="870.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (925 samples, 2.31%)</title><rect x="872.6" y="163.0" width="27.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.6" y="174.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (925 samples, 2.31%)</title><rect x="872.6" y="147.0" width="27.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.6" y="158.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (925 samples, 2.31%)</title><rect x="872.6" y="131.0" width="27.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="875.6" y="142.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (721 samples, 1.80%)</title><rect x="872.6" y="115.0" width="21.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="875.6" y="126.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (721 samples, 1.80%)</title><rect x="872.6" y="99.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.6" y="110.0">o..</text>
</g>
<g>
<title>byte[] (721 samples, 1.80%)</title><rect x="872.6" y="83.0" width="21.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="875.6" y="94.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (204 samples, 0.51%)</title><rect x="893.9" y="115.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="896.9" y="126.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (204 samples, 0.51%)</title><rect x="893.9" y="99.0" width="6.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="896.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNodes (928 samples, 2.32%)</title><rect x="899.9" y="163.0" width="27.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.9" y="174.0">r..</text>
</g>
<g>
<title>java.util.ArrayList (127 samples, 0.32%)</title><rect x="899.9" y="147.0" width="3.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="902.9" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (370 samples, 0.92%)</title><rect x="903.6" y="147.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="906.6" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (370 samples, 0.92%)</title><rect x="903.6" y="131.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.6" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (370 samples, 0.92%)</title><rect x="903.6" y="115.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.6" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (370 samples, 0.92%)</title><rect x="903.6" y="99.0" width="11.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.6" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (370 samples, 0.92%)</title><rect x="903.6" y="83.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.6" y="94.0"></text>
</g>
<g>
<title>java.lang.Object[] (370 samples, 0.92%)</title><rect x="903.6" y="67.0" width="11.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="906.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNodeIndex (431 samples, 1.08%)</title><rect x="914.6" y="147.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="917.6" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (431 samples, 1.08%)</title><rect x="914.6" y="131.0" width="12.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="917.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (1,457 samples, 3.64%)</title><rect x="927.3" y="179.0" width="42.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="930.3" y="190.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,457 samples, 3.64%)</title><rect x="927.3" y="163.0" width="42.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.3" y="174.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,457 samples, 3.64%)</title><rect x="927.3" y="147.0" width="42.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.3" y="158.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (991 samples, 2.48%)</title><rect x="927.3" y="131.0" width="29.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="930.3" y="142.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (991 samples, 2.48%)</title><rect x="927.3" y="115.0" width="29.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="930.3" y="126.0">on..</text>
</g>
<g>
<title>byte[] (991 samples, 2.48%)</title><rect x="927.3" y="99.0" width="29.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="930.3" y="110.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (466 samples, 1.16%)</title><rect x="956.5" y="131.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="959.5" y="142.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (466 samples, 1.16%)</title><rect x="956.5" y="115.0" width="13.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="959.5" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (975 samples, 2.44%)</title><rect x="970.2" y="211.0" width="28.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.2" y="222.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (975 samples, 2.44%)</title><rect x="970.2" y="195.0" width="28.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.2" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (975 samples, 2.44%)</title><rect x="970.2" y="179.0" width="28.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="973.2" y="190.0">ja..</text>
</g>
<g>
<title>java.lang.String (409 samples, 1.02%)</title><rect x="970.2" y="163.0" width="12.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="973.2" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (566 samples, 1.41%)</title><rect x="982.3" y="163.0" width="16.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.3" y="174.0"></text>
</g>
<g>
<title>byte[] (566 samples, 1.41%)</title><rect x="982.3" y="147.0" width="16.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="985.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4,501 samples, 11.25%)</title><rect x="999.0" y="243.0" width="132.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1002.0" y="254.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one.nio.http.Request (668 samples, 1.67%)</title><rect x="999.0" y="227.0" width="19.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1002.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,399 samples, 3.50%)</title><rect x="1018.7" y="227.0" width="41.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1021.7" y="238.0">one..</text>
</g>
<g>
<title>java.lang.String[] (1,399 samples, 3.50%)</title><rect x="1018.7" y="211.0" width="41.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1021.7" y="222.0">jav..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,434 samples, 6.08%)</title><rect x="1060.0" y="227.0" width="71.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.0" y="238.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,434 samples, 6.08%)</title><rect x="1060.0" y="211.0" width="71.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1063.0" y="222.0">one/nio/..</text>
</g>
<g>
<title>char[] (1,321 samples, 3.30%)</title><rect x="1060.0" y="195.0" width="38.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1063.0" y="206.0">cha..</text>
</g>
<g>
<title>java.lang.String (389 samples, 0.97%)</title><rect x="1099.0" y="195.0" width="11.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1102.0" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (722 samples, 1.80%)</title><rect x="1110.5" y="195.0" width="21.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1113.5" y="206.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (722 samples, 1.80%)</title><rect x="1110.5" y="179.0" width="21.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1113.5" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (722 samples, 1.80%)</title><rect x="1110.5" y="163.0" width="21.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.5" y="174.0">j..</text>
</g>
<g>
<title>byte[] (722 samples, 1.80%)</title><rect x="1110.5" y="147.0" width="21.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1113.5" y="158.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,975 samples, 4.94%)</title><rect x="1131.7" y="243.0" width="58.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1134.7" y="254.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,975 samples, 4.94%)</title><rect x="1131.7" y="227.0" width="58.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1134.7" y="238.0">one/ni..</text>
</g>
<g>
<title>char[] (920 samples, 2.30%)</title><rect x="1131.7" y="211.0" width="27.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1134.7" y="222.0">c..</text>
</g>
<g>
<title>java.lang.String (373 samples, 0.93%)</title><rect x="1158.9" y="211.0" width="11.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1161.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (682 samples, 1.70%)</title><rect x="1169.9" y="211.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1172.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (682 samples, 1.70%)</title><rect x="1169.9" y="195.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1172.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (682 samples, 1.70%)</title><rect x="1169.9" y="179.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1172.9" y="190.0"></text>
</g>
<g>
<title>byte[] (682 samples, 1.70%)</title><rect x="1169.9" y="163.0" width="20.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1172.9" y="174.0"></text>
</g>
</g>
</svg>
