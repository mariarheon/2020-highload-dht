<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (1,157 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.09%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.09%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.run (893 samples, 77.18%)</title><rect x="11.0" y="547.0" width="910.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (893 samples, 77.18%)</title><rect x="11.0" y="531.0" width="910.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="14.0" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (893 samples, 77.18%)</title><rect x="11.0" y="515.0" width="910.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.0" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.09%)</title><rect x="12.0" y="499.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="12.0" y="483.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.09%)</title><rect x="12.0" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (246 samples, 21.26%)</title><rect x="13.1" y="499.0" width="250.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.1" y="510.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="26.3" y="483.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (229 samples, 19.79%)</title><rect x="27.3" y="483.0" width="233.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.3" y="494.0">java/util/concurrent/ArrayBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (180 samples, 15.56%)</title><rect x="34.5" y="467.0" width="183.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.5" y="478.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (11 samples, 0.95%)</title><rect x="35.5" y="451.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (10 samples, 0.86%)</title><rect x="36.5" y="435.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.5" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (2 samples, 0.17%)</title><rect x="38.6" y="419.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.6" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.52%)</title><rect x="40.6" y="419.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="45.7" y="403.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="46.7" y="451.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.09%)</title><rect x="46.7" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.09%)</title><rect x="46.7" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="46.7" y="403.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.7" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.09%)</title><rect x="46.7" y="387.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="49.7" y="398.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.09%)</title><rect x="46.7" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="49.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (23 samples, 1.99%)</title><rect x="47.7" y="451.0" width="23.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.7" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 1.73%)</title><rect x="50.8" y="435.0" width="20.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.64%)</title><rect x="50.8" y="419.0" width="19.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.12%)</title><rect x="56.9" y="403.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 1.12%)</title><rect x="56.9" y="387.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.9" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="57.9" y="371.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="60.9" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.61%)</title><rect x="59.0" y="371.0" width="7.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="62.0" y="382.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.09%)</title><rect x="60.0" y="355.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="63.0" y="366.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.09%)</title><rect x="61.0" y="355.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="64.0" y="366.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.09%)</title><rect x="62.0" y="355.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="65.0" y="366.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.09%)</title><rect x="63.0" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="66.0" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.17%)</title><rect x="64.1" y="355.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="67.1" y="366.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.35%)</title><rect x="66.1" y="371.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="69.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="70.2" y="419.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.26%)</title><rect x="71.2" y="451.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.26%)</title><rect x="71.2" y="435.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (141 samples, 12.19%)</title><rect x="74.3" y="451.0" width="143.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="462.0">java/util/concurre..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (140 samples, 12.10%)</title><rect x="75.3" y="435.0" width="142.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.3" y="446.0">jdk/internal/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="77.3" y="419.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="80.3" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="79.4" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="82.4" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="80.4" y="419.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="83.4" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park (95 samples, 8.21%)</title><rect x="83.4" y="419.0" width="96.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="86.4" y="430.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="94.6" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="97.6" y="414.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.26%)</title><rect x="95.7" y="403.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="98.7" y="414.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="98.7" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="101.7" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 2.25%)</title><rect x="99.7" y="403.0" width="26.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="102.7" y="414.0">P..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.43%)</title><rect x="108.9" y="387.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="111.9" y="398.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="112.0" y="371.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="115.0" y="382.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="114.0" y="387.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="117.0" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.26%)</title><rect x="116.1" y="387.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="119.1" y="398.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.52%)</title><rect x="119.1" y="387.0" width="6.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="122.1" y="398.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.09%)</title><rect x="125.2" y="387.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="128.2" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.17%)</title><rect x="126.3" y="403.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="129.3" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="128.3" y="403.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="131.3" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="129.3" y="403.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="132.3" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (45 samples, 3.89%)</title><rect x="130.3" y="403.0" width="45.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="133.3" y="414.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="176.2" y="403.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="179.2" y="414.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="179.3" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="182.3" y="414.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 2.77%)</title><rect x="180.3" y="419.0" width="32.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="183.3" y="430.0">[u..</text>
</g>
<g>
<title>__condvar_confirm_wakeup (1 samples, 0.09%)</title><rect x="180.3" y="403.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="183.3" y="414.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (2 samples, 0.17%)</title><rect x="181.3" y="403.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="184.3" y="414.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.09%)</title><rect x="183.4" y="403.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="186.4" y="414.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="184.4" y="403.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="187.4" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="187.5" y="403.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="190.5" y="414.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (24 samples, 2.07%)</title><rect x="188.5" y="403.0" width="24.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="191.5" y="414.0">p..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="213.0" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="216.0" y="430.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.35%)</title><rect x="214.0" y="419.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="217.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.69%)</title><rect x="218.1" y="467.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.69%)</title><rect x="218.1" y="451.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.69%)</title><rect x="218.1" y="435.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.61%)</title><rect x="218.1" y="419.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.61%)</title><rect x="218.1" y="403.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.61%)</title><rect x="218.1" y="387.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.35%)</title><rect x="218.1" y="371.0" width="4.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="221.1" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.09%)</title><rect x="219.1" y="355.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="222.1" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="220.1" y="355.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="223.1" y="366.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="221.1" y="355.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="224.1" y="366.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.26%)</title><rect x="222.1" y="371.0" width="3.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="225.1" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="222.1" y="355.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="225.1" y="366.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.17%)</title><rect x="223.2" y="355.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="226.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="225.2" y="419.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="225.2" y="403.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (34 samples, 2.94%)</title><rect x="226.2" y="467.0" width="34.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.2" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (34 samples, 2.94%)</title><rect x="226.2" y="451.0" width="34.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.2" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (34 samples, 2.94%)</title><rect x="226.2" y="435.0" width="34.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.2" y="446.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (34 samples, 2.94%)</title><rect x="226.2" y="419.0" width="34.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.2" y="430.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.17%)</title><rect x="231.3" y="403.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (27 samples, 2.33%)</title><rect x="233.4" y="403.0" width="27.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.4" y="414.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="233.4" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="236.4" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="234.4" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="237.4" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark (12 samples, 1.04%)</title><rect x="235.4" y="387.0" width="12.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="238.4" y="398.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.09%)</title><rect x="235.4" y="371.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="238.4" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="236.4" y="371.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="239.4" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="237.4" y="371.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="240.4" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="240.5" y="371.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="243.5" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.17%)</title><rect x="241.5" y="371.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="244.5" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.09%)</title><rect x="243.6" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="246.6" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.26%)</title><rect x="244.6" y="371.0" width="3.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="247.6" y="382.0"></text>
</g>
<g>
<title>__pthread_cond_signal (13 samples, 1.12%)</title><rect x="247.6" y="387.0" width="13.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="250.6" y="398.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="260.9" y="483.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="263.9" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="261.9" y="483.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="264.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.09%)</title><rect x="263.9" y="499.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$74/1245639208.run (644 samples, 55.66%)</title><rect x="265.0" y="499.0" width="656.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.0" y="510.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$74/1245639208.run</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$get$0 (644 samples, 55.66%)</title><rect x="265.0" y="483.0" width="656.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.0" y="494.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$get$0</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.getInternal (644 samples, 55.66%)</title><rect x="265.0" y="467.0" width="656.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.0" y="478.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl.getInternal</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.17%)</title><rect x="266.0" y="451.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.17%)</title><rect x="266.0" y="435.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.0" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.17%)</title><rect x="266.0" y="419.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.0" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.17%)</title><rect x="266.0" y="403.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (92 samples, 7.95%)</title><rect x="268.0" y="451.0" width="93.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.0" y="462.0">one/nio/htt..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (13 samples, 1.12%)</title><rect x="268.0" y="435.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (13 samples, 1.12%)</title><rect x="268.0" y="419.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.0" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.78%)</title><rect x="272.1" y="403.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.1" y="414.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.17%)</title><rect x="274.1" y="387.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.1" y="398.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.17%)</title><rect x="274.1" y="371.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.1" y="382.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.17%)</title><rect x="274.1" y="355.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.1" y="366.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.09%)</title><rect x="275.2" y="339.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.43%)</title><rect x="276.2" y="387.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.2" y="398.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.35%)</title><rect x="277.2" y="371.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.2" y="382.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.17%)</title><rect x="277.2" y="355.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.2" y="366.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.17%)</title><rect x="279.2" y="355.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (76 samples, 6.57%)</title><rect x="281.3" y="435.0" width="77.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.3" y="446.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (24 samples, 2.07%)</title><rect x="281.3" y="419.0" width="24.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.3" y="430.0">o..</text>
</g>
<g>
<title>gettimeofday (8 samples, 0.69%)</title><rect x="283.3" y="403.0" width="8.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="286.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 1.12%)</title><rect x="291.5" y="403.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.52%)</title><rect x="294.5" y="387.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.5" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.09%)</title><rect x="299.6" y="371.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.17%)</title><rect x="300.7" y="387.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.17%)</title><rect x="302.7" y="387.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.17%)</title><rect x="302.7" y="371.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.09%)</title><rect x="303.7" y="355.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.7" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="304.7" y="403.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="307.7" y="414.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="304.7" y="387.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="307.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (52 samples, 4.49%)</title><rect x="305.8" y="419.0" width="53.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="308.8" y="430.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (52 samples, 4.49%)</title><rect x="305.8" y="403.0" width="53.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.8" y="414.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (52 samples, 4.49%)</title><rect x="305.8" y="387.0" width="53.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="398.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (52 samples, 4.49%)</title><rect x="305.8" y="371.0" width="53.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.8" y="382.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (11 samples, 0.95%)</title><rect x="311.9" y="355.0" width="11.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="314.9" y="366.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.17%)</title><rect x="317.0" y="339.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="320.0" y="350.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.26%)</title><rect x="319.0" y="339.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="322.0" y="350.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.09%)</title><rect x="321.1" y="323.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="324.1" y="334.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="322.1" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="325.1" y="350.0"></text>
</g>
<g>
<title>__libc_send (32 samples, 2.77%)</title><rect x="323.1" y="355.0" width="32.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="326.1" y="366.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.17%)</title><rect x="355.7" y="355.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="358.7" y="366.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="357.8" y="355.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="360.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.09%)</title><rect x="358.8" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.17%)</title><rect x="359.8" y="435.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.8" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="359.8" y="419.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="362.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (5 samples, 0.43%)</title><rect x="361.9" y="451.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.35%)</title><rect x="362.9" y="435.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.9" y="446.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="365.9" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (4 samples, 0.35%)</title><rect x="367.0" y="451.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.09%)</title><rect x="367.0" y="435.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.09%)</title><rect x="367.0" y="419.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="367.0" y="403.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.0" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="367.0" y="387.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.26%)</title><rect x="368.0" y="435.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.26%)</title><rect x="368.0" y="419.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.26%)</title><rect x="368.0" y="403.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.0" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="370.0" y="387.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="370.0" y="371.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="370.0" y="355.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="373.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.09%)</title><rect x="370.0" y="339.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (8 samples, 0.69%)</title><rect x="371.0" y="451.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="374.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.69%)</title><rect x="371.0" y="435.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.69%)</title><rect x="371.0" y="419.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="374.0" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.69%)</title><rect x="371.0" y="403.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.69%)</title><rect x="371.0" y="387.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.35%)</title><rect x="372.1" y="371.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.26%)</title><rect x="372.1" y="355.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="375.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.17%)</title><rect x="373.1" y="339.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.1" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.17%)</title><rect x="373.1" y="323.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="375.1" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.09%)</title><rect x="375.1" y="339.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.17%)</title><rect x="376.1" y="371.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.1" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="378.2" y="371.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="381.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.get (532 samples, 45.98%)</title><rect x="379.2" y="451.0" width="542.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="382.2" y="462.0">ru/mail/polis/dao/mariarheon/DAOImpl.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (523 samples, 45.20%)</title><rect x="379.2" y="435.0" width="533.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.2" y="446.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (523 samples, 45.20%)</title><rect x="379.2" y="419.0" width="533.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.2" y="430.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (506 samples, 43.73%)</title><rect x="380.2" y="403.0" width="516.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="383.2" y="414.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (2 samples, 0.17%)</title><rect x="382.3" y="387.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="385.3" y="398.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.17%)</title><rect x="384.3" y="387.0" width="2.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="387.3" y="398.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.09%)</title><rect x="386.3" y="387.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="389.3" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.17%)</title><rect x="387.4" y="387.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="390.4" y="398.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.09%)</title><rect x="389.4" y="387.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="392.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.09%)</title><rect x="390.4" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="393.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (1 samples, 0.09%)</title><rect x="391.4" y="387.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="394.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.09%)</title><rect x="392.5" y="387.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="395.5" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (488 samples, 42.18%)</title><rect x="393.5" y="387.0" width="497.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="396.5" y="398.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.09%)</title><rect x="394.5" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="397.5" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="395.5" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="398.5" y="382.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="396.5" y="371.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="399.5" y="382.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.09%)</title><rect x="397.6" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="400.6" y="382.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.69%)</title><rect x="398.6" y="371.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="401.6" y="382.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.17%)</title><rect x="404.7" y="355.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="407.7" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.35%)</title><rect x="406.7" y="371.0" width="4.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="409.7" y="382.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="408.8" y="355.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="411.8" y="366.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="409.8" y="355.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="412.8" y="366.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.26%)</title><rect x="410.8" y="371.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="413.8" y="382.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.09%)</title><rect x="413.9" y="371.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="416.9" y="382.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="414.9" y="371.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="417.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (421 samples, 36.39%)</title><rect x="415.9" y="371.0" width="429.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="418.9" y="382.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slic..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.09%)</title><rect x="415.9" y="355.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="418.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.09%)</title><rect x="416.9" y="355.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="419.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (416 samples, 35.96%)</title><rect x="418.0" y="355.0" width="424.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="421.0" y="366.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Col..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (13 samples, 1.12%)</title><rect x="419.0" y="339.0" width="13.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="422.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (9 samples, 0.78%)</title><rect x="420.0" y="323.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="423.0" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="420.0" y="307.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="423.0" y="318.0"></text>
</g>
<g>
<title>malloc_usable_size (2 samples, 0.17%)</title><rect x="422.0" y="307.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="425.0" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.09%)</title><rect x="424.1" y="307.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="427.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (4 samples, 0.35%)</title><rect x="425.1" y="307.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="428.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.17%)</title><rect x="429.2" y="323.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="432.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() [clone .plt] (1 samples, 0.09%)</title><rect x="431.2" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="434.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (397 samples, 34.31%)</title><rect x="432.2" y="339.0" width="404.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="435.2" y="350.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (393 samples, 33.97%)</title><rect x="432.2" y="323.0" width="400.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="435.2" y="334.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocks..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.17%)</title><rect x="433.2" y="307.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="436.2" y="318.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.26%)</title><rect x="435.3" y="307.0" width="3.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="438.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.17%)</title><rect x="438.3" y="307.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="441.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (4 samples, 0.35%)</title><rect x="440.4" y="307.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="443.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.09%)</title><rect x="444.5" y="307.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="447.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.09%)</title><rect x="445.5" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="448.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) [clone .plt] (1 samples, 0.09%)</title><rect x="446.5" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="449.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (371 samples, 32.07%)</title><rect x="447.5" y="307.0" width="378.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="450.5" y="318.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.09%)</title><rect x="459.8" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="462.8" y="302.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (5 samples, 0.43%)</title><rect x="460.8" y="291.0" width="5.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="463.8" y="302.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.35%)</title><rect x="465.9" y="291.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="468.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (11 samples, 0.95%)</title><rect x="470.0" y="291.0" width="11.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="473.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() [clone .plt] (1 samples, 0.09%)</title><rect x="472.0" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="475.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.43%)</title><rect x="473.0" y="275.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="476.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.17%)</title><rect x="476.1" y="259.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="479.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.26%)</title><rect x="478.1" y="275.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="481.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.17%)</title><rect x="479.1" y="259.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="482.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.09%)</title><rect x="481.2" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="484.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (5 samples, 0.43%)</title><rect x="482.2" y="291.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="485.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.26%)</title><rect x="482.2" y="275.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="485.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.17%)</title><rect x="483.2" y="259.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="486.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) [clone .plt] (2 samples, 0.17%)</title><rect x="485.3" y="275.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="488.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.09%)</title><rect x="487.3" y="291.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="490.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (3 samples, 0.26%)</title><rect x="488.3" y="291.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="491.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (2 samples, 0.17%)</title><rect x="491.4" y="291.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="494.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (58 samples, 5.01%)</title><rect x="493.4" y="291.0" width="59.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="496.4" y="302.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (3 samples, 0.26%)</title><rect x="499.5" y="275.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="502.5" y="286.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.09%)</title><rect x="502.6" y="275.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="505.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (48 samples, 4.15%)</title><rect x="503.6" y="275.0" width="49.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="506.6" y="286.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (44 samples, 3.80%)</title><rect x="505.7" y="259.0" width="44.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="508.7" y="270.0">/tmp..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="507.7" y="243.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="510.7" y="254.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (1 samples, 0.09%)</title><rect x="507.7" y="227.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="510.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (41 samples, 3.54%)</title><rect x="508.7" y="243.0" width="41.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="511.7" y="254.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="533.2" y="227.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="536.2" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="534.2" y="227.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="537.2" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.09%)</title><rect x="535.2" y="227.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="538.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (14 samples, 1.21%)</title><rect x="536.3" y="227.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="539.3" y="238.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.09%)</title><rect x="542.4" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="545.4" y="222.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (3 samples, 0.26%)</title><rect x="543.4" y="211.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="546.4" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.35%)</title><rect x="546.5" y="211.0" width="4.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="549.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (2 samples, 0.17%)</title><rect x="550.5" y="259.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="553.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (1 samples, 0.09%)</title><rect x="552.6" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="555.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.09%)</title><rect x="553.6" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="556.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.17%)</title><rect x="554.6" y="291.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="557.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.17%)</title><rect x="554.6" y="275.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="557.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.09%)</title><rect x="556.7" y="291.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="559.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.09%)</title><rect x="557.7" y="291.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="560.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (1 samples, 0.09%)</title><rect x="558.7" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="561.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::StopWatchNano::StopWatchNano(rocksdb::Env*, bool) (1 samples, 0.09%)</title><rect x="559.7" y="291.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="562.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::StopWatchNano::StopWatchNano(rocksdb::Env*, bool) [clone .plt] (1 samples, 0.09%)</title><rect x="560.7" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="563.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (1 samples, 0.09%)</title><rect x="561.8" y="291.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="564.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.09%)</title><rect x="562.8" y="291.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.09%)</title><rect x="563.8" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="566.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (256 samples, 22.13%)</title><rect x="564.8" y="291.0" width="261.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="567.8" y="302.0">rocksdb::Version::Get(rocksdb::Read..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="578.1" y="275.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="581.1" y="286.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.17%)</title><rect x="579.1" y="275.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="582.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (1 samples, 0.09%)</title><rect x="581.1" y="275.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="584.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.17%)</title><rect x="582.2" y="275.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="585.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*, bool*, rocksdb::MergeContext*, bool, unsigned long*, rocksdb::Env*, unsigned long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long) (2 samples, 0.17%)</title><rect x="584.2" y="275.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="587.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (235 samples, 20.31%)</title><rect x="586.2" y="275.0" width="239.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="589.2" y="286.0">rocksdb::TableCache::Get(rocksdb..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (1 samples, 0.09%)</title><rect x="596.4" y="259.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="599.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (3 samples, 0.26%)</title><rect x="597.5" y="259.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="600.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const [clone .plt] (1 samples, 0.09%)</title><rect x="600.5" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (202 samples, 17.46%)</title><rect x="601.5" y="259.0" width="206.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.5" y="270.0">rocksdb::BlockBasedTable::G..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (3 samples, 0.26%)</title><rect x="618.9" y="243.0" width="3.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="621.9" y="254.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.17%)</title><rect x="621.9" y="243.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="624.9" y="254.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.09%)</title><rect x="624.0" y="243.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="627.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (3 samples, 0.26%)</title><rect x="625.0" y="243.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="628.0" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.09%)</title><rect x="626.0" y="227.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="629.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (1 samples, 0.09%)</title><rect x="627.0" y="227.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="630.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (2 samples, 0.17%)</title><rect x="628.0" y="243.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (1 samples, 0.09%)</title><rect x="630.1" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="633.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (2 samples, 0.17%)</title><rect x="631.1" y="243.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (1 samples, 0.09%)</title><rect x="633.1" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="636.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (2 samples, 0.17%)</title><rect x="634.2" y="243.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="637.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.17%)</title><rect x="636.2" y="243.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="639.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() [clone .plt] (1 samples, 0.09%)</title><rect x="638.2" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="641.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.17%)</title><rect x="639.3" y="243.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="642.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (63 samples, 5.45%)</title><rect x="641.3" y="243.0" width="64.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="644.3" y="254.0">rocksdb..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="648.4" y="227.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="651.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (2 samples, 0.17%)</title><rect x="649.5" y="227.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="652.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (1 samples, 0.09%)</title><rect x="651.5" y="227.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="654.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (1 samples, 0.09%)</title><rect x="651.5" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="654.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (50 samples, 4.32%)</title><rect x="652.5" y="227.0" width="51.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="655.5" y="238.0">rocks..</text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (1 samples, 0.09%)</title><rect x="654.6" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="657.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (46 samples, 3.98%)</title><rect x="655.6" y="211.0" width="46.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="658.6" y="222.0">rock..</text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.09%)</title><rect x="656.6" y="195.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="659.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (2 samples, 0.17%)</title><rect x="657.6" y="195.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="660.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (1 samples, 0.09%)</title><rect x="659.7" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="662.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (1 samples, 0.09%)</title><rect x="660.7" y="195.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (1 samples, 0.09%)</title><rect x="660.7" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="663.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (1 samples, 0.09%)</title><rect x="660.7" y="163.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="663.7" y="174.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (1 samples, 0.09%)</title><rect x="660.7" y="147.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.7" y="158.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (1 samples, 0.09%)</title><rect x="660.7" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="663.7" y="142.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="660.7" y="115.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="663.7" y="126.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="660.7" y="99.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="663.7" y="110.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (1 samples, 0.09%)</title><rect x="660.7" y="83.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="663.7" y="94.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="660.7" y="67.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="663.7" y="78.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="660.7" y="51.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="663.7" y="62.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="660.7" y="35.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="663.7" y="46.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseResource() (1 samples, 0.09%)</title><rect x="661.7" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="664.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::Value(rocksdb::Cache::Handle*) (1 samples, 0.09%)</title><rect x="662.7" y="195.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="665.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (37 samples, 3.20%)</title><rect x="663.7" y="195.0" width="37.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="666.7" y="206.0">roc..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (26 samples, 2.25%)</title><rect x="665.8" y="179.0" width="26.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="668.8" y="190.0">r..</text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (4 samples, 0.35%)</title><rect x="665.8" y="163.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="668.8" y="174.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits@plt (1 samples, 0.09%)</title><rect x="669.9" y="163.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="672.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (1 samples, 0.09%)</title><rect x="670.9" y="163.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="673.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (1 samples, 0.09%)</title><rect x="671.9" y="163.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="674.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) (1 samples, 0.09%)</title><rect x="672.9" y="163.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="675.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (14 samples, 1.21%)</title><rect x="673.9" y="163.0" width="14.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.9" y="174.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.17%)</title><rect x="673.9" y="147.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="676.9" y="158.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="676.0" y="147.0" width="1.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="679.0" y="158.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="677.0" y="147.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="680.0" y="158.0"></text>
</g>
<g>
<title>malloc_usable_size (1 samples, 0.09%)</title><rect x="679.0" y="147.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="682.0" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.17%)</title><rect x="680.1" y="147.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="683.1" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (2 samples, 0.17%)</title><rect x="682.1" y="147.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="685.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (4 samples, 0.35%)</title><rect x="684.1" y="147.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="687.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) (4 samples, 0.35%)</title><rect x="684.1" y="131.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="687.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.35%)</title><rect x="688.2" y="163.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="691.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.17%)</title><rect x="692.3" y="179.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="695.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const [clone .plt] (1 samples, 0.09%)</title><rect x="694.3" y="179.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="697.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (3 samples, 0.26%)</title><rect x="695.4" y="179.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="698.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::GetUsage(rocksdb::Cache::Handle*) const (1 samples, 0.09%)</title><rect x="698.4" y="179.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="701.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.17%)</title><rect x="699.4" y="179.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="702.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.09%)</title><rect x="701.5" y="195.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="704.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.09%)</title><rect x="702.5" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="705.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.17%)</title><rect x="703.5" y="227.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="706.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (43 samples, 3.72%)</title><rect x="705.6" y="243.0" width="43.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="708.6" y="254.0">rock..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="716.8" y="227.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="719.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (27 samples, 2.33%)</title><rect x="717.8" y="227.0" width="27.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="720.8" y="238.0">r..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="723.9" y="211.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="726.9" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.09%)</title><rect x="724.9" y="211.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="727.9" y="222.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.09%)</title><rect x="726.0" y="211.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="729.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (7 samples, 0.61%)</title><rect x="727.0" y="211.0" width="7.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="730.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (11 samples, 0.95%)</title><rect x="734.1" y="211.0" width="11.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="737.1" y="222.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.09%)</title><rect x="740.2" y="195.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="743.2" y="206.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (4 samples, 0.35%)</title><rect x="741.3" y="195.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="744.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (1 samples, 0.09%)</title><rect x="745.3" y="227.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="748.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.26%)</title><rect x="746.4" y="227.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="749.4" y="238.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (1 samples, 0.09%)</title><rect x="748.4" y="211.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="751.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (2 samples, 0.17%)</title><rect x="749.4" y="243.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="752.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (4 samples, 0.35%)</title><rect x="751.5" y="243.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="754.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (46 samples, 3.98%)</title><rect x="755.5" y="243.0" width="46.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="758.5" y="254.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.09%)</title><rect x="779.0" y="227.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="782.0" y="238.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (4 samples, 0.35%)</title><rect x="780.0" y="227.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="783.0" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.35%)</title><rect x="784.1" y="227.0" width="4.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="787.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (1 samples, 0.09%)</title><rect x="788.2" y="227.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="791.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) [clone .plt] (1 samples, 0.09%)</title><rect x="789.2" y="227.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (6 samples, 0.52%)</title><rect x="790.2" y="227.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="793.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (1 samples, 0.09%)</title><rect x="791.2" y="211.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="794.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long*) (3 samples, 0.26%)</title><rect x="792.2" y="211.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="795.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long*) [clone .plt] (1 samples, 0.09%)</title><rect x="795.3" y="211.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (6 samples, 0.52%)</title><rect x="796.3" y="227.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.3" y="238.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.17%)</title><rect x="799.4" y="211.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="802.4" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="801.4" y="211.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="804.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (1 samples, 0.09%)</title><rect x="802.4" y="243.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="805.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.17%)</title><rect x="803.5" y="243.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (1 samples, 0.09%)</title><rect x="805.5" y="243.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="808.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.09%)</title><rect x="806.5" y="243.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewIndexIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (1 samples, 0.09%)</title><rect x="807.5" y="259.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="810.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (1 samples, 0.09%)</title><rect x="808.6" y="259.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="811.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (1 samples, 0.09%)</title><rect x="809.6" y="259.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="812.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.09%)</title><rect x="810.6" y="259.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (2 samples, 0.17%)</title><rect x="811.6" y="259.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="814.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.17%)</title><rect x="813.7" y="259.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="816.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::value() const (1 samples, 0.09%)</title><rect x="815.7" y="259.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="818.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (4 samples, 0.35%)</title><rect x="816.7" y="259.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="819.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) [clone .plt] (1 samples, 0.09%)</title><rect x="820.8" y="259.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="823.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.09%)</title><rect x="821.8" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="824.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (1 samples, 0.09%)</title><rect x="822.8" y="259.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() [clone .plt] (1 samples, 0.09%)</title><rect x="823.9" y="259.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.09%)</title><rect x="824.9" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="827.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (1 samples, 0.09%)</title><rect x="825.9" y="307.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="828.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.09%)</title><rect x="826.9" y="307.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="829.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) [clone .plt] (1 samples, 0.09%)</title><rect x="827.9" y="307.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="830.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (1 samples, 0.09%)</title><rect x="829.0" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.17%)</title><rect x="830.0" y="307.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.09%)</title><rect x="832.0" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="835.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (2 samples, 0.17%)</title><rect x="833.0" y="323.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) [clone .plt] (2 samples, 0.17%)</title><rect x="835.1" y="323.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="838.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (2 samples, 0.17%)</title><rect x="837.1" y="339.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="840.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.26%)</title><rect x="839.2" y="339.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="842.2" y="350.0"></text>
</g>
<g>
<title>std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long) (1 samples, 0.09%)</title><rect x="842.2" y="355.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="845.2" y="366.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (2 samples, 0.17%)</title><rect x="843.2" y="355.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="846.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.17%)</title><rect x="845.3" y="371.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="848.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (43 samples, 3.72%)</title><rect x="847.3" y="371.0" width="43.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="850.3" y="382.0">rock..</text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (3 samples, 0.26%)</title><rect x="847.3" y="355.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="850.3" y="366.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.17%)</title><rect x="850.4" y="355.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="853.4" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="852.4" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.4" y="366.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="853.4" y="355.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="856.4" y="366.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.09%)</title><rect x="854.5" y="355.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="857.5" y="366.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="855.5" y="355.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="858.5" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.09%)</title><rect x="856.5" y="355.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="859.5" y="366.0"></text>
</g>
<g>
<title>jni_NewByteArray (31 samples, 2.68%)</title><rect x="857.5" y="355.0" width="31.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="860.5" y="366.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.17%)</title><rect x="860.6" y="339.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="863.6" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.26%)</title><rect x="862.6" y="339.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="865.6" y="350.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="865.7" y="339.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="868.7" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.17%)</title><rect x="867.7" y="339.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="870.7" y="350.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.09%)</title><rect x="869.8" y="339.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.8" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="870.8" y="339.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="873.8" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 1.47%)</title><rect x="871.8" y="339.0" width="17.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="874.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (9 samples, 0.78%)</title><rect x="878.9" y="323.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="881.9" y="334.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.09%)</title><rect x="880.0" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="883.0" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.61%)</title><rect x="881.0" y="307.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="884.0" y="318.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.09%)</title><rect x="882.0" y="291.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.0" y="302.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.26%)</title><rect x="883.0" y="291.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="886.0" y="302.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.17%)</title><rect x="886.1" y="291.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="889.1" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="888.1" y="323.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.1" y="334.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.09%)</title><rect x="889.1" y="355.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="892.1" y="366.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.09%)</title><rect x="890.2" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.2" y="366.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (5 samples, 0.43%)</title><rect x="891.2" y="387.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.2" y="398.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.26%)</title><rect x="896.3" y="403.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="899.3" y="414.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="896.3" y="387.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="899.3" y="398.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.09%)</title><rect x="897.3" y="387.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="900.3" y="398.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="898.3" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.3" y="398.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.35%)</title><rect x="899.3" y="403.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="902.3" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.17%)</title><rect x="903.4" y="403.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="906.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (5 samples, 0.43%)</title><rect x="905.5" y="403.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="908.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() [clone .plt] (1 samples, 0.09%)</title><rect x="910.6" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="913.6" y="414.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.09%)</title><rect x="911.6" y="403.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArrayUnsigned (5 samples, 0.43%)</title><rect x="912.6" y="435.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="915.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (5 samples, 0.43%)</title><rect x="912.6" y="419.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="915.6" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.43%)</title><rect x="912.6" y="403.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.6" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.35%)</title><rect x="913.6" y="387.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.35%)</title><rect x="913.6" y="371.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="916.6" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.26%)</title><rect x="914.6" y="355.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.26%)</title><rect x="914.6" y="339.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="917.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (4 samples, 0.35%)</title><rect x="917.7" y="435.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.26%)</title><rect x="918.7" y="419.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.26%)</title><rect x="918.7" y="403.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.7" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="919.7" y="387.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="919.7" y="371.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="922.7" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="919.7" y="355.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.09%)</title><rect x="920.8" y="339.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="923.8" y="350.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (263 samples, 22.73%)</title><rect x="921.8" y="547.0" width="268.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="924.8" y="558.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (6 samples, 0.52%)</title><rect x="925.9" y="531.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="928.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (6 samples, 0.52%)</title><rect x="925.9" y="515.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="928.9" y="526.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.09%)</title><rect x="931.0" y="499.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="934.0" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (88 samples, 7.61%)</title><rect x="932.0" y="531.0" width="89.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="935.0" y="542.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (9 samples, 0.78%)</title><rect x="934.0" y="515.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="937.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (6 samples, 0.52%)</title><rect x="934.0" y="499.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="937.0" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (3 samples, 0.26%)</title><rect x="940.1" y="499.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (77 samples, 6.66%)</title><rect x="943.2" y="515.0" width="78.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="946.2" y="526.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.17%)</title><rect x="961.5" y="499.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="964.5" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (16 samples, 1.38%)</title><rect x="963.6" y="499.0" width="16.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="966.6" y="510.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="975.8" y="483.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="978.8" y="494.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.09%)</title><rect x="978.9" y="483.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="981.9" y="494.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (6 samples, 0.52%)</title><rect x="979.9" y="499.0" width="6.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="982.9" y="510.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.17%)</title><rect x="986.0" y="499.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="989.0" y="510.0"></text>
</g>
<g>
<title>epoll_wait (33 samples, 2.85%)</title><rect x="988.1" y="499.0" width="33.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="991.1" y="510.0">ep..</text>
</g>
<g>
<title>one/nio/net/Session.process (165 samples, 14.26%)</title><rect x="1021.7" y="531.0" width="168.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1024.7" y="542.0">one/nio/net/Session.pr..</text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.09%)</title><rect x="1024.8" y="515.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1027.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (161 samples, 13.92%)</title><rect x="1025.8" y="515.0" width="164.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1028.8" y="526.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (83 samples, 7.17%)</title><rect x="1030.9" y="499.0" width="84.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.9" y="510.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (51 samples, 4.41%)</title><rect x="1031.9" y="483.0" width="52.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.9" y="494.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (49 samples, 4.24%)</title><rect x="1034.0" y="467.0" width="49.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1037.0" y="478.0">one/n..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (42 samples, 3.63%)</title><rect x="1034.0" y="451.0" width="42.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1037.0" y="462.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (8 samples, 0.69%)</title><rect x="1034.0" y="435.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1037.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.69%)</title><rect x="1034.0" y="419.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1037.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.35%)</title><rect x="1036.0" y="403.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1039.0" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.35%)</title><rect x="1036.0" y="387.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1039.0" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="1040.1" y="403.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1043.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.get (34 samples, 2.94%)</title><rect x="1042.1" y="435.0" width="34.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.1" y="446.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (34 samples, 2.94%)</title><rect x="1042.1" y="419.0" width="34.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.1" y="430.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (31 samples, 2.68%)</title><rect x="1045.2" y="403.0" width="31.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1048.2" y="414.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (4 samples, 0.35%)</title><rect x="1046.2" y="387.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1049.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.35%)</title><rect x="1046.2" y="371.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1049.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.35%)</title><rect x="1046.2" y="355.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1049.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.35%)</title><rect x="1046.2" y="339.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1049.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.17%)</title><rect x="1050.3" y="387.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1053.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.17%)</title><rect x="1050.3" y="371.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1053.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.17%)</title><rect x="1050.3" y="355.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1053.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.17%)</title><rect x="1050.3" y="339.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1053.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.17%)</title><rect x="1050.3" y="323.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1053.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.17%)</title><rect x="1050.3" y="307.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1053.3" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.09%)</title><rect x="1050.3" y="291.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1053.3" y="302.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1050.3" y="275.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1053.3" y="286.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="1051.3" y="291.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1054.3" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.09%)</title><rect x="1051.3" y="275.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1054.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 2.07%)</title><rect x="1052.3" y="387.0" width="24.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1055.3" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 2.07%)</title><rect x="1052.3" y="371.0" width="24.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1055.3" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 2.07%)</title><rect x="1052.3" y="355.0" width="24.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1055.3" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 2.07%)</title><rect x="1052.3" y="339.0" width="24.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1055.3" y="350.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 1.73%)</title><rect x="1056.4" y="323.0" width="20.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1059.4" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="1056.4" y="307.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.4" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.43%)</title><rect x="1057.4" y="307.0" width="5.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1060.4" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="1058.4" y="291.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.4" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="1059.5" y="291.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.5" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.09%)</title><rect x="1060.5" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1063.5" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.09%)</title><rect x="1061.5" y="291.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1064.5" y="302.0"></text>
</g>
<g>
<title>__pthread_cond_signal (12 samples, 1.04%)</title><rect x="1062.5" y="307.0" width="12.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1065.5" y="318.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.17%)</title><rect x="1074.8" y="307.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1077.8" y="318.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (3 samples, 0.26%)</title><rect x="1076.8" y="451.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1079.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.put (3 samples, 0.26%)</title><rect x="1076.8" y="435.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1079.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.09%)</title><rect x="1079.9" y="451.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1082.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.17%)</title><rect x="1080.9" y="451.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="1080.9" y="435.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1083.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="1080.9" y="419.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1083.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.09%)</title><rect x="1081.9" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1084.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.09%)</title><rect x="1082.9" y="451.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1085.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.09%)</title><rect x="1082.9" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1085.9" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="1082.9" y="419.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1085.9" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="1082.9" y="403.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1085.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 1.90%)</title><rect x="1083.9" y="483.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1086.9" y="494.0">o..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="1086.0" y="467.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.0" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="1086.0" y="451.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="1086.0" y="435.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.0" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="1086.0" y="419.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.0" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="1086.0" y="403.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.0" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="1086.0" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.0" y="398.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="1086.0" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (13 samples, 1.12%)</title><rect x="1087.0" y="467.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.0" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="1094.1" y="451.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.1" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="1094.1" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.09%)</title><rect x="1094.1" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.1" y="430.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="1094.1" y="403.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1097.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.26%)</title><rect x="1095.2" y="451.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1098.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.26%)</title><rect x="1095.2" y="435.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1098.2" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.17%)</title><rect x="1096.2" y="419.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1099.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.17%)</title><rect x="1096.2" y="403.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1099.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.17%)</title><rect x="1098.2" y="451.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1101.2" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.52%)</title><rect x="1100.3" y="467.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.3" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.52%)</title><rect x="1100.3" y="451.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1103.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.43%)</title><rect x="1100.3" y="435.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1103.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.43%)</title><rect x="1100.3" y="419.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1103.3" y="430.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.09%)</title><rect x="1105.4" y="435.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1108.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.17%)</title><rect x="1106.4" y="483.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1109.4" y="494.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.17%)</title><rect x="1106.4" y="467.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.17%)</title><rect x="1106.4" y="451.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1109.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.17%)</title><rect x="1106.4" y="435.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1109.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.35%)</title><rect x="1108.4" y="483.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1111.4" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.26%)</title><rect x="1112.5" y="483.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1115.5" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.26%)</title><rect x="1112.5" y="467.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1115.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.17%)</title><rect x="1113.5" y="451.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.5" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.17%)</title><rect x="1113.5" y="435.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1116.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.09%)</title><rect x="1114.5" y="419.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1117.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (73 samples, 6.31%)</title><rect x="1115.5" y="499.0" width="74.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1118.5" y="510.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (72 samples, 6.22%)</title><rect x="1115.5" y="483.0" width="73.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1118.5" y="494.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (32 samples, 2.77%)</title><rect x="1123.7" y="467.0" width="32.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1126.7" y="478.0">Ja..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.35%)</title><rect x="1126.8" y="451.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.8" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.17%)</title><rect x="1130.8" y="451.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="1132.9" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.9" y="462.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="1133.9" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.9" y="462.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.26%)</title><rect x="1134.9" y="451.0" width="3.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1137.9" y="462.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (2 samples, 0.17%)</title><rect x="1138.0" y="451.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.0" y="462.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (14 samples, 1.21%)</title><rect x="1140.0" y="451.0" width="14.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1143.0" y="462.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="1144.1" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.1" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="1145.1" y="435.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="446.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.43%)</title><rect x="1146.1" y="435.0" width="5.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1149.1" y="446.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (4 samples, 0.35%)</title><rect x="1147.2" y="419.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.2" y="430.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (3 samples, 0.26%)</title><rect x="1151.2" y="435.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.2" y="446.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.17%)</title><rect x="1154.3" y="451.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.3" y="462.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.09%)</title><rect x="1156.3" y="467.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1159.3" y="478.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.26%)</title><rect x="1157.4" y="467.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>__recv (25 samples, 2.16%)</title><rect x="1160.4" y="467.0" width="25.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1163.4" y="478.0">_..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.26%)</title><rect x="1185.9" y="467.0" width="3.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.09%)</title><rect x="1189.0" y="483.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.0" y="494.0"></text>
</g>
</g>
</svg>
