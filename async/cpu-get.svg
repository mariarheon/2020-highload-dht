<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (1,924 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.10%)</title><rect x="10.0" y="387.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.10%)</title><rect x="10.0" y="371.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.05%)</title><rect x="10.0" y="355.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.05%)</title><rect x="10.6" y="355.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.6" y="366.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="10.6" y="339.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.6" y="350.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="10.6" y="323.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.6" y="334.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.05%)</title><rect x="10.6" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.6" y="318.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.16%)</title><rect x="11.2" y="387.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="14.2" y="398.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.05%)</title><rect x="11.2" y="371.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="11.8" y="371.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.8" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.05%)</title><rect x="11.8" y="355.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.8" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="12.5" y="371.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.5" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.05%)</title><rect x="12.5" y="355.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,199 samples, 62.32%)</title><rect x="13.1" y="387.0" width="735.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,199 samples, 62.32%)</title><rect x="13.1" y="371.0" width="735.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="382.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,199 samples, 62.32%)</title><rect x="13.1" y="355.0" width="735.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="366.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (840 samples, 43.66%)</title><rect x="17.4" y="339.0" width="515.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.4" y="350.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (5 samples, 0.26%)</title><rect x="18.0" y="323.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (5 samples, 0.26%)</title><rect x="18.0" y="307.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (76 samples, 3.95%)</title><rect x="21.0" y="323.0" width="46.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.0" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.finishCompletion (76 samples, 3.95%)</title><rect x="21.0" y="307.0" width="46.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.0" y="318.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 3.95%)</title><rect x="21.0" y="291.0" width="46.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.0" y="302.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (76 samples, 3.95%)</title><rect x="21.0" y="275.0" width="46.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.0" y="286.0">jdk/..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="21.0" y="259.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="24.0" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="21.7" y="259.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.7" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="22.3" y="259.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="25.3" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.05%)</title><rect x="22.9" y="259.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="25.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark (35 samples, 1.82%)</title><rect x="23.5" y="259.0" width="21.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="26.5" y="270.0">U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="26.6" y="243.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="29.6" y="254.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.10%)</title><rect x="27.2" y="243.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="30.2" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="28.4" y="243.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="31.4" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.10%)</title><rect x="29.0" y="243.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="32.0" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="30.2" y="243.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.2" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.26%)</title><rect x="30.9" y="243.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="33.9" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="33.9" y="243.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="36.9" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="34.5" y="243.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="37.5" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.10%)</title><rect x="35.1" y="243.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="38.1" y="254.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.16%)</title><rect x="36.4" y="243.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="39.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.52%)</title><rect x="38.2" y="243.0" width="6.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="41.2" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.05%)</title><rect x="44.3" y="243.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="47.3" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 1.77%)</title><rect x="45.0" y="259.0" width="20.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="48.0" y="270.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.10%)</title><rect x="65.8" y="259.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="68.8" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.05%)</title><rect x="67.0" y="259.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="70.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$65/632463387.call (289 samples, 15.02%)</title><rect x="67.7" y="323.0" width="177.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.7" y="334.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$passOn$1 (289 samples, 15.02%)</title><rect x="67.7" y="307.0" width="177.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.7" y="318.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOnInternal (289 samples, 15.02%)</title><rect x="67.7" y="291.0" width="177.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.7" y="302.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.addMyselfParamToRequest (9 samples, 0.47%)</title><rect x="67.7" y="275.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.21%)</title><rect x="68.3" y="259.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.21%)</title><rect x="68.3" y="243.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.21%)</title><rect x="68.3" y="227.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.21%)</title><rect x="68.3" y="211.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.3" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="69.5" y="195.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="72.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.05%)</title><rect x="70.1" y="195.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.21%)</title><rect x="70.7" y="259.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="72.6" y="243.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.6" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="72.6" y="227.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.passOn (280 samples, 14.55%)</title><rect x="73.2" y="275.0" width="171.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.2" y="286.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.10%)</title><rect x="73.2" y="259.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.10%)</title><rect x="73.2" y="243.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.10%)</title><rect x="73.2" y="227.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.2" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.10%)</title><rect x="73.2" y="211.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (278 samples, 14.45%)</title><rect x="74.4" y="259.0" width="170.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.4" y="270.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (278 samples, 14.45%)</title><rect x="74.4" y="243.0" width="170.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.4" y="254.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (2 samples, 0.10%)</title><rect x="77.5" y="227.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.05%)</title><rect x="78.7" y="227.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="78.7" y="211.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.7" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="78.7" y="195.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.05%)</title><rect x="78.7" y="179.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (101 samples, 5.25%)</title><rect x="79.3" y="227.0" width="61.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.3" y="238.0">one/ni..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.42%)</title><rect x="88.5" y="211.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="91.5" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.10%)</title><rect x="88.5" y="195.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="91.5" y="206.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.31%)</title><rect x="89.7" y="195.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="92.7" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.26%)</title><rect x="89.7" y="179.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="92.7" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.26%)</title><rect x="89.7" y="163.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="92.7" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="89.7" y="147.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="92.7" y="158.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="89.7" y="131.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="92.7" y="142.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.05%)</title><rect x="89.7" y="115.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="92.7" y="126.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="90.3" y="147.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="93.3" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="90.3" y="131.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="93.3" y="142.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.16%)</title><rect x="91.0" y="147.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="94.0" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="92.8" y="179.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.8" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (75 samples, 3.90%)</title><rect x="93.4" y="211.0" width="46.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.4" y="222.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (44 samples, 2.29%)</title><rect x="95.9" y="195.0" width="26.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="98.9" y="206.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.26%)</title><rect x="100.2" y="179.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.2" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="103.2" y="179.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="106.2" y="190.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="103.8" y="179.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="106.8" y="190.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="104.4" y="179.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="107.4" y="190.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (5 samples, 0.26%)</title><rect x="105.1" y="179.0" width="3.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="108.1" y="190.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.05%)</title><rect x="108.1" y="179.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="111.1" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (18 samples, 0.94%)</title><rect x="108.7" y="179.0" width="11.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="111.7" y="190.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="113.6" y="163.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="116.6" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.10%)</title><rect x="114.3" y="163.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="117.3" y="174.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (7 samples, 0.36%)</title><rect x="115.5" y="163.0" width="4.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="118.5" y="174.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (3 samples, 0.16%)</title><rect x="117.9" y="147.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="120.9" y="158.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.05%)</title><rect x="119.8" y="179.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="122.8" y="190.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.21%)</title><rect x="120.4" y="179.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="123.4" y="190.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.16%)</title><rect x="122.8" y="195.0" width="1.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="125.8" y="206.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.05%)</title><rect x="124.7" y="195.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="127.7" y="206.0"></text>
</g>
<g>
<title>__recv (20 samples, 1.04%)</title><rect x="125.3" y="195.0" width="12.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="128.3" y="206.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.10%)</title><rect x="137.6" y="195.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="140.6" y="206.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.05%)</title><rect x="138.8" y="195.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="141.8" y="206.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (2 samples, 0.10%)</title><rect x="139.4" y="211.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.4" y="222.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.05%)</title><rect x="140.6" y="211.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="143.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (64 samples, 3.33%)</title><rect x="141.2" y="227.0" width="39.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.2" y="238.0">one..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="141.9" y="211.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="144.9" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="141.9" y="195.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="144.9" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.16%)</title><rect x="142.5" y="211.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.5" y="222.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.16%)</title><rect x="142.5" y="195.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.5" y="206.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.16%)</title><rect x="142.5" y="179.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.5" y="190.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.16%)</title><rect x="142.5" y="163.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="145.5" y="174.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.05%)</title><rect x="143.7" y="147.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.05%)</title><rect x="144.3" y="211.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="144.3" y="195.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.3" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="144.3" y="179.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.05%)</title><rect x="144.3" y="163.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (48 samples, 2.49%)</title><rect x="144.9" y="211.0" width="29.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.9" y="222.0">on..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.16%)</title><rect x="154.7" y="195.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="157.7" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 1.51%)</title><rect x="156.6" y="195.0" width="17.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.6" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (18 samples, 0.94%)</title><rect x="163.3" y="179.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.3" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="173.8" y="163.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="176.8" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="173.8" y="147.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="176.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (10 samples, 0.52%)</title><rect x="174.4" y="211.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.26%)</title><rect x="177.4" y="195.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="180.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.26%)</title><rect x="177.4" y="179.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (15 samples, 0.78%)</title><rect x="180.5" y="227.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.5" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4 samples, 0.21%)</title><rect x="182.3" y="211.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="185.3" y="222.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.10%)</title><rect x="183.6" y="195.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.6" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.10%)</title><rect x="183.6" y="179.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="186.6" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.31%)</title><rect x="184.8" y="211.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.8" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="184.8" y="195.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.26%)</title><rect x="185.4" y="195.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.4" y="206.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.16%)</title><rect x="186.0" y="179.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.0" y="190.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="187.2" y="163.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.2" y="174.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="187.9" y="179.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="190.9" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.10%)</title><rect x="188.5" y="211.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="188.5" y="195.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="189.1" y="195.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.10%)</title><rect x="189.7" y="227.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="190.3" y="211.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="190.3" y="195.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (39 samples, 2.03%)</title><rect x="190.9" y="227.0" width="23.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.9" y="238.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (4 samples, 0.21%)</title><rect x="191.5" y="211.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="194.5" y="222.0"></text>
</g>
<g>
<title>__setsockopt (33 samples, 1.72%)</title><rect x="194.0" y="211.0" width="20.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="197.0" y="222.0"></text>
</g>
<g>
<title>setsockopt@plt (1 samples, 0.05%)</title><rect x="214.2" y="211.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="217.2" y="222.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (39 samples, 2.03%)</title><rect x="214.8" y="227.0" width="24.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.8" y="238.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (14 samples, 0.73%)</title><rect x="217.3" y="211.0" width="8.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="220.3" y="222.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="218.5" y="195.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="221.5" y="206.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="219.1" y="195.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="222.1" y="206.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="219.8" y="195.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="222.8" y="206.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.16%)</title><rect x="220.4" y="195.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="223.4" y="206.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.26%)</title><rect x="222.2" y="195.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="225.2" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="224.0" y="179.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="227.0" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.05%)</title><rect x="224.7" y="179.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="227.7" y="190.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.05%)</title><rect x="224.7" y="163.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="227.7" y="174.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.05%)</title><rect x="225.3" y="195.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="228.3" y="206.0"></text>
</g>
<g>
<title>__libc_send (18 samples, 0.94%)</title><rect x="225.9" y="211.0" width="11.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="228.9" y="222.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.10%)</title><rect x="236.9" y="211.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="239.9" y="222.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.05%)</title><rect x="238.1" y="211.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="241.1" y="222.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (6 samples, 0.31%)</title><rect x="238.8" y="227.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.8" y="238.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.10%)</title><rect x="241.2" y="211.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.2" y="222.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.21%)</title><rect x="242.4" y="227.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$71/656783190.call (469 samples, 24.38%)</title><rect x="244.9" y="323.0" width="287.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.9" y="334.0">ru/mail/polis/service/mariarheon/AsyncS..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$processRequest$0 (469 samples, 24.38%)</title><rect x="244.9" y="307.0" width="287.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.9" y="318.0">ru/mail/polis/service/mariarheon/AsyncS..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.05%)</title><rect x="250.4" y="291.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.get (431 samples, 22.40%)</title><rect x="251.0" y="291.0" width="264.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="254.0" y="302.0">ru/mail/polis/service/mariarheon/As..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.10%)</title><rect x="251.6" y="275.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (9 samples, 0.47%)</title><rect x="252.9" y="275.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.16%)</title><rect x="252.9" y="259.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.9" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.10%)</title><rect x="253.5" y="243.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.31%)</title><rect x="254.7" y="259.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.10%)</title><rect x="254.7" y="243.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="257.7" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.10%)</title><rect x="254.7" y="227.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="257.7" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.10%)</title><rect x="254.7" y="211.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="257.7" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.10%)</title><rect x="254.7" y="195.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="257.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="254.7" y="179.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="257.7" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="254.7" y="163.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="257.7" y="174.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.05%)</title><rect x="254.7" y="147.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="257.7" y="158.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="255.3" y="179.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="258.3" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.21%)</title><rect x="255.9" y="243.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.21%)</title><rect x="255.9" y="227.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.21%)</title><rect x="255.9" y="211.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="255.9" y="195.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="255.9" y="179.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.16%)</title><rect x="256.5" y="195.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.16%)</title><rect x="256.5" y="179.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.5" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.16%)</title><rect x="256.5" y="163.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (4 samples, 0.21%)</title><rect x="258.4" y="275.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.21%)</title><rect x="258.4" y="259.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.21%)</title><rect x="258.4" y="243.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.4" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.10%)</title><rect x="258.4" y="227.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="261.4" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.10%)</title><rect x="258.4" y="211.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="261.4" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.10%)</title><rect x="258.4" y="195.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="261.4" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="258.4" y="179.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="261.4" y="190.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="258.4" y="163.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="261.4" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="258.4" y="147.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="261.4" y="158.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="258.4" y="131.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="261.4" y="142.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="259.0" y="179.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="262.0" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="259.6" y="227.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="259.6" y="211.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.10%)</title><rect x="259.6" y="195.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="259.6" y="179.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="259.6" y="163.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.6" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="259.6" y="147.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="260.2" y="179.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="260.2" y="163.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.get (415 samples, 21.57%)</title><rect x="260.8" y="275.0" width="254.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.8" y="286.0">ru/mail/polis/dao/mariarheon/DAOIm..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (403 samples, 20.95%)</title><rect x="260.8" y="259.0" width="247.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.8" y="270.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (403 samples, 20.95%)</title><rect x="260.8" y="243.0" width="247.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.8" y="254.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (376 samples, 19.54%)</title><rect x="262.1" y="227.0" width="230.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="265.1" y="238.0">Java_org_rocksdb_RocksDB_get__..</text>
</g>
<g>
<title>__libc_free (7 samples, 0.36%)</title><rect x="262.7" y="211.0" width="4.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="265.7" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.05%)</title><rect x="267.0" y="211.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="270.0" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="267.6" y="211.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="270.6" y="222.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="268.2" y="211.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="271.2" y="222.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.05%)</title><rect x="268.8" y="211.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="271.8" y="222.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.05%)</title><rect x="269.4" y="211.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="272.4" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.16%)</title><rect x="270.0" y="211.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="273.0" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.10%)</title><rect x="271.9" y="211.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="274.9" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (4 samples, 0.21%)</title><rect x="273.1" y="211.0" width="2.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="276.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.05%)</title><rect x="275.6" y="211.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="278.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (3 samples, 0.16%)</title><rect x="276.2" y="211.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="279.2" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (344 samples, 17.88%)</title><rect x="278.0" y="211.0" width="211.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="281.0" y="222.0">rocksdb_get_helper(JNIEnv_*,..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="281.1" y="195.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="284.1" y="206.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="281.7" y="195.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="284.7" y="206.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.05%)</title><rect x="282.3" y="195.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="285.3" y="206.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.36%)</title><rect x="282.9" y="195.0" width="4.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="285.9" y="206.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.16%)</title><rect x="285.4" y="179.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="288.4" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.73%)</title><rect x="287.2" y="195.0" width="8.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="290.2" y="206.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.10%)</title><rect x="290.3" y="179.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="293.3" y="190.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.10%)</title><rect x="291.5" y="179.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="294.5" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.26%)</title><rect x="292.7" y="179.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="295.7" y="190.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (4 samples, 0.21%)</title><rect x="293.3" y="163.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="296.3" y="174.0"></text>
</g>
<g>
<title>jni_NewByteArray (6 samples, 0.31%)</title><rect x="295.8" y="195.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="298.8" y="206.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.10%)</title><rect x="299.5" y="195.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="302.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (263 samples, 13.67%)</title><rect x="300.7" y="195.0" width="161.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="303.7" y="206.0">rocksdb::DB::Get(rock..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.05%)</title><rect x="301.9" y="179.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="304.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.05%)</title><rect x="302.5" y="179.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="305.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() [clone .plt] (1 samples, 0.05%)</title><rect x="303.2" y="179.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="306.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (257 samples, 13.36%)</title><rect x="303.8" y="179.0" width="157.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="306.8" y="190.0">rocksdb::DB::Get(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (251 samples, 13.05%)</title><rect x="304.4" y="163.0" width="153.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="307.4" y="174.0">rocksdb::DBImpl::Ge..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (246 samples, 12.79%)</title><rect x="305.6" y="147.0" width="150.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="308.6" y="158.0">rocksdb::DBImpl::Ge..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.10%)</title><rect x="305.6" y="131.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.6" y="142.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.16%)</title><rect x="306.8" y="131.0" width="1.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="309.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.10%)</title><rect x="308.7" y="131.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="311.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (2 samples, 0.10%)</title><rect x="309.9" y="131.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="312.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (227 samples, 11.80%)</title><rect x="311.1" y="131.0" width="139.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="314.1" y="142.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.16%)</title><rect x="317.9" y="115.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="320.9" y="126.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (4 samples, 0.21%)</title><rect x="319.7" y="115.0" width="2.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="322.7" y="126.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (5 samples, 0.26%)</title><rect x="322.2" y="115.0" width="3.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="325.2" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.21%)</title><rect x="325.2" y="115.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="328.2" y="126.0"></text>
</g>
<g>
<title>memcpy@plt (3 samples, 0.16%)</title><rect x="327.7" y="115.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="330.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (13 samples, 0.68%)</title><rect x="329.5" y="115.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="332.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.05%)</title><rect x="330.8" y="99.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="333.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() [clone .plt] (3 samples, 0.16%)</title><rect x="331.4" y="99.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="334.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (6 samples, 0.31%)</title><rect x="333.2" y="99.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="336.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.05%)</title><rect x="336.9" y="99.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="339.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.05%)</title><rect x="336.9" y="83.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="339.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.10%)</title><rect x="337.5" y="115.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="340.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) [clone .plt] (1 samples, 0.05%)</title><rect x="338.7" y="115.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="341.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (11 samples, 0.57%)</title><rect x="339.3" y="115.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="342.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.16%)</title><rect x="339.3" y="99.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="342.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.05%)</title><rect x="340.0" y="83.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="343.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.05%)</title><rect x="340.6" y="83.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.05%)</title><rect x="340.6" y="67.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="343.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (3 samples, 0.16%)</title><rect x="341.2" y="99.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="344.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) [clone .plt] (1 samples, 0.05%)</title><rect x="343.0" y="99.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="346.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (4 samples, 0.21%)</title><rect x="343.6" y="99.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="346.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (4 samples, 0.21%)</title><rect x="346.1" y="115.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="349.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (2 samples, 0.10%)</title><rect x="348.5" y="115.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="351.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (151 samples, 7.85%)</title><rect x="349.8" y="115.0" width="92.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="352.8" y="126.0">rocksdb::Me..</text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (149 samples, 7.74%)</title><rect x="351.0" y="99.0" width="91.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="354.0" y="110.0">rocksdb::Me..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (147 samples, 7.64%)</title><rect x="351.6" y="83.0" width="90.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="354.6" y="94.0">/tmp/libro..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (4 samples, 0.21%)</title><rect x="352.8" y="67.0" width="2.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="355.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (129 samples, 6.70%)</title><rect x="355.3" y="67.0" width="79.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="358.3" y="78.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (3 samples, 0.16%)</title><rect x="397.0" y="51.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="400.0" y="62.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.16%)</title><rect x="398.8" y="51.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="401.8" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.47%)</title><rect x="400.7" y="51.0" width="5.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="403.7" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.10%)</title><rect x="406.2" y="51.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="409.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (44 samples, 2.29%)</title><rect x="407.4" y="51.0" width="27.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="410.4" y="62.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (4 samples, 0.21%)</title><rect x="416.6" y="35.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="419.6" y="46.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.21%)</title><rect x="419.1" y="35.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="422.1" y="46.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (16 samples, 0.83%)</title><rect x="421.5" y="35.0" width="9.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="424.5" y="46.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.21%)</title><rect x="431.3" y="35.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="434.3" y="46.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.05%)</title><rect x="433.8" y="35.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="436.8" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.10%)</title><rect x="434.4" y="67.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="437.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long, unsigned long*, rocksdb::ValueType*) (2 samples, 0.10%)</title><rect x="435.6" y="67.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="438.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long, unsigned long*, rocksdb::ValueType*) [clone .plt] (3 samples, 0.16%)</title><rect x="436.9" y="67.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="439.9" y="78.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (5 samples, 0.26%)</title><rect x="438.7" y="67.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="441.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const [clone .plt] (1 samples, 0.05%)</title><rect x="441.8" y="83.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="444.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (1 samples, 0.05%)</title><rect x="442.4" y="115.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) [clone .plt] (1 samples, 0.05%)</title><rect x="443.0" y="115.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="446.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.05%)</title><rect x="443.6" y="115.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="446.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (1 samples, 0.05%)</title><rect x="444.2" y="115.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="447.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (4 samples, 0.21%)</title><rect x="444.8" y="115.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="447.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.16%)</title><rect x="447.3" y="115.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="450.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) [clone .plt] (2 samples, 0.10%)</title><rect x="449.1" y="115.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="452.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (3 samples, 0.16%)</title><rect x="450.4" y="131.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="453.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() [clone .plt] (1 samples, 0.05%)</title><rect x="452.2" y="131.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="455.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (2 samples, 0.10%)</title><rect x="452.8" y="131.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="455.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.10%)</title><rect x="454.0" y="131.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="457.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() [clone .plt] (2 samples, 0.10%)</title><rect x="455.3" y="131.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="458.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (2 samples, 0.10%)</title><rect x="456.5" y="147.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="459.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) [clone .plt] (1 samples, 0.05%)</title><rect x="457.7" y="147.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="460.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (5 samples, 0.26%)</title><rect x="458.3" y="163.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="461.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.05%)</title><rect x="461.4" y="179.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="464.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.05%)</title><rect x="462.0" y="195.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="465.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (43 samples, 2.23%)</title><rect x="462.6" y="195.0" width="26.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="465.6" y="206.0">r..</text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.05%)</title><rect x="462.6" y="179.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="465.6" y="190.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.05%)</title><rect x="463.2" y="179.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="466.2" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="463.8" y="179.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="466.8" y="190.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="464.5" y="179.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="467.5" y="190.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.05%)</title><rect x="465.1" y="179.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="468.1" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.16%)</title><rect x="465.7" y="179.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="468.7" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="466.9" y="163.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="469.9" y="174.0"></text>
</g>
<g>
<title>jni_NewByteArray (32 samples, 1.66%)</title><rect x="467.5" y="179.0" width="19.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="470.5" y="190.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.16%)</title><rect x="470.0" y="163.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="473.0" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.10%)</title><rect x="471.8" y="163.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="474.8" y="174.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.05%)</title><rect x="473.0" y="163.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="476.0" y="174.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="473.7" y="163.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="476.7" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.10%)</title><rect x="474.3" y="163.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.3" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (19 samples, 0.99%)</title><rect x="475.5" y="163.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="478.5" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (15 samples, 0.78%)</title><rect x="478.0" y="147.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="481.0" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.52%)</title><rect x="478.6" y="131.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="481.6" y="142.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="479.8" y="115.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="482.8" y="126.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.10%)</title><rect x="480.4" y="115.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="483.4" y="126.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="481.6" y="115.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="484.6" y="126.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.21%)</title><rect x="482.2" y="115.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="485.2" y="126.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="484.7" y="131.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="487.7" y="142.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.10%)</title><rect x="485.3" y="131.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="488.3" y="142.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="486.5" y="131.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="489.5" y="142.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.16%)</title><rect x="487.2" y="179.0" width="1.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="490.2" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.10%)</title><rect x="487.8" y="163.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="490.8" y="174.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.05%)</title><rect x="488.4" y="147.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="491.4" y="158.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (4 samples, 0.21%)</title><rect x="489.0" y="211.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="492.0" y="222.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) [clone .plt] (1 samples, 0.05%)</title><rect x="491.4" y="211.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="494.4" y="222.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) [clone .plt] (1 samples, 0.05%)</title><rect x="492.1" y="211.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="495.1" y="222.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.68%)</title><rect x="492.7" y="227.0" width="7.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="495.7" y="238.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.21%)</title><rect x="492.7" y="211.0" width="2.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="495.7" y="222.0"></text>
</g>
<g>
<title>_int_free (3 samples, 0.16%)</title><rect x="495.1" y="211.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="498.1" y="222.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (6 samples, 0.31%)</title><rect x="497.0" y="211.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="500.0" y="222.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.36%)</title><rect x="500.6" y="227.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="503.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (1 samples, 0.05%)</title><rect x="504.9" y="227.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.9" y="238.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (3 samples, 0.16%)</title><rect x="505.6" y="227.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="508.6" y="238.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="507.4" y="227.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="510.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArrayUnsigned (11 samples, 0.57%)</title><rect x="508.0" y="259.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="511.0" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="508.0" y="243.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="511.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (10 samples, 0.52%)</title><rect x="508.6" y="243.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.6" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 0.52%)</title><rect x="508.6" y="227.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.6" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="509.2" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="512.2" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="509.2" y="195.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="512.2" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="509.2" y="179.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="512.2" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="509.2" y="163.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="512.2" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="509.2" y="147.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="512.2" y="158.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="509.2" y="131.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="512.2" y="142.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="509.2" y="115.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="512.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.42%)</title><rect x="509.8" y="211.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.26%)</title><rect x="511.7" y="195.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.7" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.26%)</title><rect x="511.7" y="179.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="514.7" y="190.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="512.3" y="163.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="515.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.10%)</title><rect x="512.9" y="163.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="514.1" y="163.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (1 samples, 0.05%)</title><rect x="514.8" y="259.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="514.8" y="243.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.05%)</title><rect x="514.8" y="227.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="514.8" y="211.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="514.8" y="195.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="517.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="514.8" y="179.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="517.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.put (28 samples, 1.46%)</title><rect x="515.4" y="291.0" width="17.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="518.4" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.26%)</title><rect x="516.6" y="275.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (5 samples, 0.26%)</title><rect x="516.6" y="259.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.6" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.05%)</title><rect x="519.0" y="243.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (21 samples, 1.09%)</title><rect x="519.7" y="275.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (21 samples, 1.09%)</title><rect x="519.7" y="259.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="522.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (21 samples, 1.09%)</title><rect x="519.7" y="243.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 1.09%)</title><rect x="519.7" y="227.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 1.09%)</title><rect x="519.7" y="211.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="522.7" y="222.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.16%)</title><rect x="522.1" y="195.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="525.1" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.73%)</title><rect x="524.0" y="195.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="527.0" y="206.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.16%)</title><rect x="524.6" y="179.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="527.6" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.05%)</title><rect x="526.4" y="179.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="529.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.42%)</title><rect x="527.0" y="179.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.0" y="190.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.05%)</title><rect x="531.9" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="534.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.26%)</title><rect x="532.5" y="339.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.26%)</title><rect x="532.5" y="323.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="535.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.26%)</title><rect x="532.5" y="307.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.26%)</title><rect x="532.5" y="291.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (347 samples, 18.04%)</title><rect x="535.6" y="339.0" width="212.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.6" y="350.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (346 samples, 17.98%)</title><rect x="536.2" y="323.0" width="212.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.2" y="334.0">java/util/concurrent/ArrayBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (263 samples, 13.67%)</title><rect x="544.2" y="307.0" width="161.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="547.2" y="318.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (12 samples, 0.62%)</title><rect x="549.7" y="291.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.7" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.05%)</title><rect x="556.5" y="275.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.10%)</title><rect x="557.1" y="291.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="560.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (30 samples, 1.56%)</title><rect x="558.3" y="291.0" width="18.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.10%)</title><rect x="575.5" y="275.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="578.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.10%)</title><rect x="575.5" y="259.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="578.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.10%)</title><rect x="575.5" y="243.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.5" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.10%)</title><rect x="575.5" y="227.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="578.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="575.5" y="211.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="578.5" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="576.1" y="211.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="579.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.31%)</title><rect x="576.7" y="291.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="579.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.31%)</title><rect x="576.7" y="275.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.31%)</title><rect x="576.7" y="259.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="579.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.31%)</title><rect x="576.7" y="243.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.31%)</title><rect x="576.7" y="227.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="579.7" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.21%)</title><rect x="576.7" y="211.0" width="2.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="579.7" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="577.3" y="195.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="580.3" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.05%)</title><rect x="577.9" y="195.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="580.9" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="578.5" y="195.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="581.5" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.10%)</title><rect x="579.1" y="211.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="582.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.10%)</title><rect x="580.4" y="291.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.05%)</title><rect x="581.0" y="275.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="584.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (202 samples, 10.50%)</title><rect x="581.6" y="291.0" width="123.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.6" y="302.0">java/util/concu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (202 samples, 10.50%)</title><rect x="581.6" y="275.0" width="123.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.6" y="286.0">jdk/internal/mi..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="582.2" y="259.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="585.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park (115 samples, 5.98%)</title><rect x="582.8" y="259.0" width="70.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="585.8" y="270.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.16%)</title><rect x="587.1" y="243.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="590.1" y="254.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.21%)</title><rect x="589.0" y="243.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="592.0" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (44 samples, 2.29%)</title><rect x="591.4" y="243.0" width="27.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="594.4" y="254.0">P..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.31%)</title><rect x="601.8" y="227.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="604.8" y="238.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="604.9" y="211.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="607.9" y="222.0"></text>
</g>
<g>
<title>Monitor::unlock() (6 samples, 0.31%)</title><rect x="605.5" y="227.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="608.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.57%)</title><rect x="609.2" y="227.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="612.2" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.21%)</title><rect x="615.9" y="227.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="618.9" y="238.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.10%)</title><rect x="618.4" y="243.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="621.4" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.26%)</title><rect x="619.6" y="243.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="622.6" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="622.7" y="243.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="625.7" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.10%)</title><rect x="623.3" y="243.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="626.3" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (40 samples, 2.08%)</title><rect x="624.5" y="243.0" width="24.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="627.5" y="254.0">_..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="649.1" y="243.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="652.1" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.21%)</title><rect x="649.7" y="243.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="652.7" y="254.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="652.1" y="243.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="655.1" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.05%)</title><rect x="652.7" y="243.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="655.7" y="254.0"></text>
</g>
<g>
<title>[unknown] (81 samples, 4.21%)</title><rect x="653.4" y="259.0" width="49.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="656.4" y="270.0">[unkn..</text>
</g>
<g>
<title>__condvar_confirm_wakeup (1 samples, 0.05%)</title><rect x="653.4" y="243.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="656.4" y="254.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (4 samples, 0.21%)</title><rect x="654.0" y="243.0" width="2.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="657.0" y="254.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.36%)</title><rect x="656.4" y="243.0" width="4.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="659.4" y="254.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.16%)</title><rect x="660.7" y="243.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="663.7" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.21%)</title><rect x="662.6" y="243.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="665.6" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="665.0" y="243.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="668.0" y="254.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (61 samples, 3.17%)</title><rect x="665.6" y="243.0" width="37.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="668.6" y="254.0">pth..</text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.05%)</title><rect x="703.0" y="259.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="706.0" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.16%)</title><rect x="703.6" y="259.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="706.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.26%)</title><rect x="705.5" y="307.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.26%)</title><rect x="705.5" y="291.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="708.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.26%)</title><rect x="705.5" y="275.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="707.9" y="259.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="710.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.05%)</title><rect x="707.9" y="243.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.05%)</title><rect x="707.9" y="227.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (64 samples, 3.33%)</title><rect x="708.6" y="307.0" width="39.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.6" y="318.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (64 samples, 3.33%)</title><rect x="708.6" y="291.0" width="39.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="711.6" y="302.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (64 samples, 3.33%)</title><rect x="708.6" y="275.0" width="39.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.6" y="286.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.05%)</title><rect x="714.7" y="259.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="717.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (53 samples, 2.75%)</title><rect x="715.3" y="259.0" width="32.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="718.3" y="270.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (53 samples, 2.75%)</title><rect x="715.3" y="243.0" width="32.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.3" y="254.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="715.3" y="227.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="718.3" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.05%)</title><rect x="715.9" y="227.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="718.9" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark (31 samples, 1.61%)</title><rect x="716.5" y="227.0" width="19.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="719.5" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.10%)</title><rect x="716.5" y="211.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.5" y="222.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="717.8" y="211.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.8" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.21%)</title><rect x="718.4" y="211.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.4" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (11 samples, 0.57%)</title><rect x="720.8" y="211.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="723.8" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.05%)</title><rect x="727.6" y="211.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="730.6" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="728.2" y="211.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="731.2" y="222.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.10%)</title><rect x="728.8" y="211.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="731.8" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.42%)</title><rect x="730.0" y="211.0" width="4.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="733.0" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.05%)</title><rect x="734.9" y="211.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="737.9" y="222.0"></text>
</g>
<g>
<title>__pthread_cond_signal (20 samples, 1.04%)</title><rect x="735.5" y="227.0" width="12.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="738.5" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.05%)</title><rect x="747.8" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.8" y="318.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (713 samples, 37.06%)</title><rect x="748.4" y="387.0" width="437.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.4" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.05%)</title><rect x="750.9" y="371.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.16%)</title><rect x="751.5" y="371.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.16%)</title><rect x="751.5" y="355.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.10%)</title><rect x="752.1" y="339.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="755.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (82 samples, 4.26%)</title><rect x="753.3" y="371.0" width="50.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="756.3" y="382.0">one/n..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.16%)</title><rect x="757.0" y="355.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="760.0" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="757.0" y="339.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="760.0" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.10%)</title><rect x="757.6" y="339.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.6" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="757.6" y="323.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="760.6" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="757.6" y="307.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="760.6" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="757.6" y="291.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.6" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="757.6" y="275.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="760.6" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.05%)</title><rect x="757.6" y="259.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="760.6" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="758.2" y="323.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="761.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.10%)</title><rect x="758.8" y="355.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="761.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.10%)</title><rect x="758.8" y="339.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="761.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (71 samples, 3.69%)</title><rect x="760.1" y="355.0" width="43.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="763.1" y="366.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.16%)</title><rect x="764.4" y="339.0" width="1.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="767.4" y="350.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.52%)</title><rect x="766.2" y="339.0" width="6.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="769.2" y="350.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.05%)</title><rect x="770.5" y="323.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="773.5" y="334.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.10%)</title><rect x="771.1" y="323.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="774.1" y="334.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.21%)</title><rect x="772.3" y="339.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="775.3" y="350.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.10%)</title><rect x="774.8" y="339.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="777.8" y="350.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.05%)</title><rect x="776.0" y="339.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="779.0" y="350.0"></text>
</g>
<g>
<title>epoll_wait (43 samples, 2.23%)</title><rect x="776.6" y="339.0" width="26.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="779.6" y="350.0">e..</text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.05%)</title><rect x="803.0" y="339.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="806.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (620 samples, 32.22%)</title><rect x="803.6" y="371.0" width="380.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.6" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (617 samples, 32.07%)</title><rect x="805.5" y="355.0" width="378.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="808.5" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (542 samples, 28.17%)</title><rect x="806.1" y="339.0" width="332.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.1" y="350.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (474 samples, 24.64%)</title><rect x="807.3" y="323.0" width="290.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.3" y="334.0">one/nio/http/HttpSession.handleParsedRe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (474 samples, 24.64%)</title><rect x="807.3" y="307.0" width="290.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.3" y="318.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_handleEntityRequest.handleRequest (469 samples, 24.38%)</title><rect x="807.3" y="291.0" width="287.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.3" y="302.0">RequestHandler0_handleEntityRequest.han..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.47%)</title><rect x="807.9" y="275.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.9" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.16%)</title><rect x="811.0" y="259.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="814.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.16%)</title><rect x="811.0" y="243.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="812.8" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="812.8" y="243.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="815.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (18 samples, 0.94%)</title><rect x="813.4" y="275.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (18 samples, 0.94%)</title><rect x="813.4" y="259.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="816.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.21%)</title><rect x="817.1" y="243.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="820.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.21%)</title><rect x="817.1" y="227.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="820.1" y="238.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.10%)</title><rect x="818.3" y="211.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.10%)</title><rect x="819.6" y="243.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="822.6" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.10%)</title><rect x="819.6" y="227.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.6" y="238.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="820.8" y="243.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="823.8" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.16%)</title><rect x="821.4" y="243.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="824.4" y="254.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.10%)</title><rect x="823.2" y="243.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.handleEntityRequest (441 samples, 22.92%)</title><rect x="824.5" y="275.0" width="270.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.5" y="286.0">ru/mail/polis/service/mariarheon/Asy..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (74 samples, 3.85%)</title><rect x="838.0" y="259.0" width="45.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.0" y="270.0">java..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (74 samples, 3.85%)</title><rect x="838.0" y="243.0" width="45.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="841.0" y="254.0">java..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.21%)</title><rect x="841.0" y="227.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="844.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (64 samples, 3.33%)</title><rect x="843.5" y="227.0" width="39.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="846.5" y="238.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (62 samples, 3.22%)</title><rect x="844.7" y="211.0" width="38.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.7" y="222.0">jdk..</text>
</g>
<g>
<title>Unsafe_Park (26 samples, 1.35%)</title><rect x="845.3" y="195.0" width="16.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="848.3" y="206.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.52%)</title><rect x="847.8" y="179.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="850.8" y="190.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.10%)</title><rect x="850.8" y="163.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="853.8" y="174.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="851.5" y="147.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.5" y="158.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.05%)</title><rect x="852.1" y="163.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="855.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.10%)</title><rect x="852.7" y="163.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.7" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.10%)</title><rect x="853.9" y="179.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="856.9" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.05%)</title><rect x="855.1" y="179.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="858.1" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (9 samples, 0.47%)</title><rect x="855.7" y="179.0" width="5.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="858.7" y="190.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 1.72%)</title><rect x="861.3" y="195.0" width="20.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="864.3" y="206.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.05%)</title><rect x="861.3" y="179.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="864.3" y="190.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.21%)</title><rect x="861.9" y="179.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="864.9" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.16%)</title><rect x="864.3" y="179.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="867.3" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="866.2" y="179.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="869.2" y="190.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (24 samples, 1.25%)</title><rect x="866.8" y="179.0" width="14.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="869.8" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.10%)</title><rect x="881.5" y="195.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="884.5" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.05%)</title><rect x="882.7" y="227.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="885.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.05%)</title><rect x="883.3" y="259.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="886.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.processRequest (64 samples, 3.33%)</title><rect x="884.0" y="259.0" width="39.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="887.0" y="270.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.10%)</title><rect x="884.0" y="243.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="887.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.10%)</title><rect x="884.0" y="227.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="887.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$71/656783190.get$Lambda (2 samples, 0.10%)</title><rect x="884.0" y="211.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="887.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$71/656783190.&lt;init&gt; (2 samples, 0.10%)</title><rect x="884.0" y="195.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="887.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (62 samples, 3.22%)</title><rect x="885.2" y="243.0" width="38.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="888.2" y="254.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (10 samples, 0.52%)</title><rect x="885.2" y="227.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (10 samples, 0.52%)</title><rect x="885.2" y="211.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="888.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (52 samples, 2.70%)</title><rect x="891.3" y="227.0" width="31.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="894.3" y="238.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (52 samples, 2.70%)</title><rect x="891.3" y="211.0" width="31.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="894.3" y="222.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (14 samples, 0.73%)</title><rect x="891.3" y="195.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="894.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 0.73%)</title><rect x="891.3" y="179.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="894.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 0.73%)</title><rect x="891.3" y="163.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="894.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 0.73%)</title><rect x="891.3" y="147.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="894.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (38 samples, 1.98%)</title><rect x="899.9" y="195.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="902.9" y="206.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (38 samples, 1.98%)</title><rect x="899.9" y="179.0" width="23.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.9" y="190.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (38 samples, 1.98%)</title><rect x="899.9" y="163.0" width="23.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.9" y="174.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (37 samples, 1.92%)</title><rect x="900.5" y="147.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="903.5" y="158.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (37 samples, 1.92%)</title><rect x="900.5" y="131.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="903.5" y="142.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="901.1" y="115.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="904.1" y="126.0"></text>
</g>
<g>
<title>Unsafe_Unpark (14 samples, 0.73%)</title><rect x="901.7" y="115.0" width="8.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="904.7" y="126.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="903.0" y="99.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="906.0" y="110.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="903.6" y="99.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="906.6" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="904.2" y="99.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="907.2" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="904.8" y="99.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="907.8" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="905.4" y="99.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="908.4" y="110.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="906.0" y="99.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="909.0" y="110.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.05%)</title><rect x="906.7" y="99.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.7" y="110.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.05%)</title><rect x="907.3" y="99.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.3" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.16%)</title><rect x="907.9" y="99.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="910.9" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.05%)</title><rect x="909.7" y="99.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="912.7" y="110.0"></text>
</g>
<g>
<title>__pthread_cond_signal (19 samples, 0.99%)</title><rect x="910.3" y="115.0" width="11.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="913.3" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="922.0" y="115.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="925.0" y="126.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.05%)</title><rect x="922.6" y="115.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="925.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.sendToReplicas (160 samples, 8.32%)</title><rect x="923.2" y="259.0" width="98.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.2" y="270.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.10%)</title><rect x="923.2" y="243.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="926.2" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.05%)</title><rect x="924.4" y="243.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.4" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.05%)</title><rect x="924.4" y="227.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="927.4" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.05%)</title><rect x="924.4" y="211.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="927.4" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.05%)</title><rect x="924.4" y="195.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="927.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (79 samples, 4.11%)</title><rect x="925.1" y="243.0" width="48.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.1" y="254.0">java..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (79 samples, 4.11%)</title><rect x="925.1" y="227.0" width="48.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.1" y="238.0">java..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.31%)</title><rect x="925.7" y="211.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.7" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.yield (1 samples, 0.05%)</title><rect x="929.3" y="211.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="932.3" y="222.0"></text>
</g>
<g>
<title>__GI_sched_yield (1 samples, 0.05%)</title><rect x="929.3" y="195.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="932.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (71 samples, 3.69%)</title><rect x="930.0" y="211.0" width="43.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.0" y="222.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (70 samples, 3.64%)</title><rect x="930.6" y="195.0" width="42.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.6" y="206.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park (35 samples, 1.82%)</title><rect x="931.2" y="179.0" width="21.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="934.2" y="190.0">U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="934.9" y="163.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="937.9" y="174.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.05%)</title><rect x="935.5" y="163.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.5" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.52%)</title><rect x="936.1" y="163.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.1" y="174.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="938.5" y="147.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.5" y="158.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.05%)</title><rect x="939.2" y="147.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.2" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.16%)</title><rect x="939.8" y="147.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="942.8" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="941.6" y="147.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="944.6" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="942.2" y="163.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.2" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.05%)</title><rect x="942.8" y="163.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="945.8" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (12 samples, 0.62%)</title><rect x="943.5" y="163.0" width="7.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="946.5" y="174.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.05%)</title><rect x="950.8" y="163.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.8" y="174.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.10%)</title><rect x="951.4" y="163.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="954.4" y="174.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 1.77%)</title><rect x="952.7" y="179.0" width="20.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="955.7" y="190.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (2 samples, 0.10%)</title><rect x="952.7" y="163.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="955.7" y="174.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.31%)</title><rect x="953.9" y="163.0" width="3.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="956.9" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.10%)</title><rect x="957.6" y="163.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="960.6" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="958.8" y="163.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="961.8" y="174.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (23 samples, 1.20%)</title><rect x="959.4" y="163.0" width="14.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="962.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOn (18 samples, 0.94%)</title><rect x="973.5" y="243.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="976.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (18 samples, 0.94%)</title><rect x="973.5" y="227.0" width="11.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="976.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (18 samples, 0.94%)</title><rect x="973.5" y="211.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="976.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (18 samples, 0.94%)</title><rect x="973.5" y="195.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="976.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.26%)</title><rect x="973.5" y="179.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="976.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.26%)</title><rect x="973.5" y="163.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="976.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.26%)</title><rect x="973.5" y="147.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="976.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.26%)</title><rect x="973.5" y="131.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="976.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.10%)</title><rect x="976.6" y="179.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="979.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.10%)</title><rect x="976.6" y="163.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.10%)</title><rect x="976.6" y="147.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="979.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.05%)</title><rect x="977.2" y="131.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="980.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.05%)</title><rect x="977.2" y="115.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="980.2" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.05%)</title><rect x="977.2" y="99.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.2" y="110.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="977.2" y="83.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="980.2" y="94.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="977.2" y="67.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="980.2" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.57%)</title><rect x="977.8" y="179.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.57%)</title><rect x="977.8" y="163.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="980.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.57%)</title><rect x="977.8" y="147.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.52%)</title><rect x="978.4" y="131.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.52%)</title><rect x="978.4" y="115.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="981.4" y="126.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.21%)</title><rect x="978.4" y="99.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="981.4" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="978.4" y="83.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.4" y="94.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="979.0" y="83.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="982.0" y="94.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.05%)</title><rect x="979.6" y="83.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.6" y="94.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.05%)</title><rect x="980.2" y="83.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.2" y="94.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.26%)</title><rect x="980.9" y="99.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="983.9" y="110.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.05%)</title><rect x="983.9" y="99.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.processRequest (7 samples, 0.36%)</title><rect x="984.5" y="243.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="987.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (7 samples, 0.36%)</title><rect x="984.5" y="227.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="987.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.36%)</title><rect x="984.5" y="211.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="987.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.36%)</title><rect x="984.5" y="195.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="987.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (4 samples, 0.21%)</title><rect x="984.5" y="179.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="987.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.21%)</title><rect x="984.5" y="163.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="987.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.21%)</title><rect x="984.5" y="147.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.21%)</title><rect x="984.5" y="131.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="987.0" y="179.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="990.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="987.0" y="163.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.05%)</title><rect x="987.0" y="147.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="990.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.05%)</title><rect x="987.0" y="131.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="990.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.05%)</title><rect x="987.0" y="115.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="990.0" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.05%)</title><rect x="987.0" y="99.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="990.0" y="110.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.05%)</title><rect x="987.0" y="83.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="990.0" y="94.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="987.0" y="67.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="990.0" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.10%)</title><rect x="987.6" y="179.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="990.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.10%)</title><rect x="987.6" y="163.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="990.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.10%)</title><rect x="987.6" y="147.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="990.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.10%)</title><rect x="987.6" y="131.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="990.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.10%)</title><rect x="987.6" y="115.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="990.6" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="987.6" y="99.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.6" y="110.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.05%)</title><rect x="988.2" y="99.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="991.2" y="110.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="988.2" y="83.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="991.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (44 samples, 2.29%)</title><rect x="988.8" y="243.0" width="27.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="991.8" y="254.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (44 samples, 2.29%)</title><rect x="988.8" y="227.0" width="27.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="991.8" y="238.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.16%)</title><rect x="990.1" y="211.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="993.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.16%)</title><rect x="990.1" y="195.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="993.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.16%)</title><rect x="990.1" y="179.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="993.1" y="190.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="990.7" y="163.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="993.7" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="990.7" y="147.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="993.7" y="158.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="991.3" y="163.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.3" y="174.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.05%)</title><rect x="991.3" y="147.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="994.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (39 samples, 2.03%)</title><rect x="991.9" y="211.0" width="23.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="994.9" y="222.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.83%)</title><rect x="991.9" y="195.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="994.9" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="996.2" y="179.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="999.2" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="996.2" y="163.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.2" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="996.2" y="147.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.2" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.42%)</title><rect x="996.8" y="179.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="999.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (8 samples, 0.42%)</title><rect x="996.8" y="163.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="999.8" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.42%)</title><rect x="996.8" y="147.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="999.8" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.16%)</title><rect x="999.9" y="131.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1002.9" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (23 samples, 1.20%)</title><rect x="1001.7" y="195.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1004.7" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (23 samples, 1.20%)</title><rect x="1001.7" y="179.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1004.7" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.05%)</title><rect x="1001.7" y="163.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1004.7" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (22 samples, 1.14%)</title><rect x="1002.3" y="163.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1005.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="1002.9" y="147.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.9" y="158.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (20 samples, 1.04%)</title><rect x="1003.6" y="147.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1006.6" y="158.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 0.68%)</title><rect x="1004.8" y="131.0" width="8.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1007.8" y="142.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="1007.2" y="115.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.2" y="126.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1007.8" y="115.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.8" y="126.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="1008.5" y="115.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1011.5" y="126.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.21%)</title><rect x="1009.1" y="115.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1012.1" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.10%)</title><rect x="1009.7" y="99.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1012.7" y="110.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.10%)</title><rect x="1009.7" y="83.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.7" y="94.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.05%)</title><rect x="1010.9" y="99.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.9" y="110.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.10%)</title><rect x="1011.5" y="115.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.5" y="126.0"></text>
</g>
<g>
<title>__libc_send (4 samples, 0.21%)</title><rect x="1012.8" y="131.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1015.8" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="1015.2" y="131.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1018.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNodes (7 samples, 0.36%)</title><rect x="1015.8" y="243.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.8" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.16%)</title><rect x="1016.4" y="227.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1019.4" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.16%)</title><rect x="1018.3" y="227.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1021.3" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.16%)</title><rect x="1018.3" y="211.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ReplicasResponseComposer.addResponse (2 samples, 0.10%)</title><rect x="1020.1" y="243.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1023.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (2 samples, 0.10%)</title><rect x="1020.1" y="227.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1023.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.10%)</title><rect x="1020.1" y="211.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1023.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (120 samples, 6.24%)</title><rect x="1021.3" y="259.0" width="73.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1024.3" y="270.0">ru/mail/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (119 samples, 6.19%)</title><rect x="1022.0" y="243.0" width="72.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.0" y="254.0">one/nio/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.31%)</title><rect x="1026.2" y="227.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1029.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.31%)</title><rect x="1026.2" y="211.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1029.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.31%)</title><rect x="1026.2" y="195.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1029.2" y="206.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1028.1" y="179.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1031.1" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1028.1" y="163.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.1" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1028.7" y="179.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1031.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="1029.3" y="179.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1032.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (104 samples, 5.41%)</title><rect x="1029.9" y="227.0" width="63.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1032.9" y="238.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (33 samples, 1.72%)</title><rect x="1032.4" y="211.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1035.4" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1042.2" y="195.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1045.2" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1042.2" y="179.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.2" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1042.2" y="163.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.2" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (16 samples, 0.83%)</title><rect x="1042.8" y="195.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1045.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (16 samples, 0.83%)</title><rect x="1042.8" y="179.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1045.8" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (16 samples, 0.83%)</title><rect x="1042.8" y="163.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1045.8" y="174.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="1050.8" y="147.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1053.8" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.10%)</title><rect x="1051.4" y="147.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1054.4" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (67 samples, 3.48%)</title><rect x="1052.6" y="211.0" width="41.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1055.6" y="222.0">one..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="1052.6" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.6" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="1052.6" y="179.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.6" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="1052.6" y="163.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.6" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1052.6" y="147.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.6" y="158.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1052.6" y="131.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.6" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1052.6" y="115.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.6" y="126.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.05%)</title><rect x="1052.6" y="99.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.6" y="110.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (66 samples, 3.43%)</title><rect x="1053.2" y="195.0" width="40.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1056.2" y="206.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.05%)</title><rect x="1053.2" y="179.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1056.2" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (65 samples, 3.38%)</title><rect x="1053.8" y="179.0" width="39.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1056.8" y="190.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="1056.3" y="163.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.3" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (60 samples, 3.12%)</title><rect x="1056.9" y="163.0" width="36.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1059.9" y="174.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (22 samples, 1.14%)</title><rect x="1060.0" y="147.0" width="13.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1063.0" y="158.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="1063.0" y="131.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.0" y="142.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="1063.7" y="131.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1066.7" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.78%)</title><rect x="1064.3" y="131.0" width="9.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1067.3" y="142.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1068.6" y="115.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.6" y="126.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.05%)</title><rect x="1069.2" y="115.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.2" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.31%)</title><rect x="1069.8" y="115.0" width="3.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1072.8" y="126.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.10%)</title><rect x="1072.2" y="99.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.2" y="110.0"></text>
</g>
<g>
<title>__libc_send (27 samples, 1.40%)</title><rect x="1073.5" y="147.0" width="16.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1076.5" y="158.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.10%)</title><rect x="1090.0" y="147.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1093.0" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.16%)</title><rect x="1091.3" y="147.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1094.3" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="1093.1" y="147.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1096.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.10%)</title><rect x="1093.7" y="227.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1096.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.21%)</title><rect x="1094.9" y="291.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1097.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.10%)</title><rect x="1095.6" y="275.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1098.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.10%)</title><rect x="1095.6" y="259.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1098.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.10%)</title><rect x="1095.6" y="243.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1098.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1096.8" y="275.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1099.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="1097.4" y="291.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1100.4" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="1097.4" y="275.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="1097.4" y="259.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1100.4" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="1097.4" y="243.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.4" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1097.4" y="227.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.4" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1097.4" y="211.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.4" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1097.4" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.4" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1097.4" y="179.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.4" y="190.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="1097.4" y="163.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (30 samples, 1.56%)</title><rect x="1098.0" y="323.0" width="18.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1101.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (13 samples, 0.68%)</title><rect x="1098.6" y="307.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1101.6" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.31%)</title><rect x="1102.9" y="291.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1105.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.26%)</title><rect x="1103.5" y="275.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1106.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.05%)</title><rect x="1106.0" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.0" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.62%)</title><rect x="1106.6" y="307.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1109.6" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.62%)</title><rect x="1106.6" y="291.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1109.6" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1112.7" y="275.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.7" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1112.7" y="259.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.7" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1112.7" y="243.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1113.3" y="275.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1113.3" y="259.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1116.3" y="270.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="1113.3" y="243.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1116.3" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1113.3" y="227.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.3" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1113.3" y="211.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.3" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1113.3" y="195.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.3" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1113.3" y="179.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.3" y="190.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1113.3" y="163.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.3" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1113.3" y="147.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.3" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.05%)</title><rect x="1113.3" y="131.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.3" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.21%)</title><rect x="1114.0" y="307.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1117.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.42%)</title><rect x="1116.4" y="323.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1119.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.26%)</title><rect x="1118.2" y="307.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1121.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.26%)</title><rect x="1118.2" y="291.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1121.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.10%)</title><rect x="1118.9" y="275.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1121.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.10%)</title><rect x="1118.9" y="259.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1121.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="1120.1" y="275.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.1" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1120.7" y="275.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1123.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (18 samples, 0.94%)</title><rect x="1121.3" y="323.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1124.3" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_handleEntityRequest.handleRequest (8 samples, 0.42%)</title><rect x="1122.5" y="307.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.5" y="318.0"></text>
</g>
<g>
<title>itable stub (8 samples, 0.42%)</title><rect x="1127.4" y="307.0" width="4.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1130.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.16%)</title><rect x="1132.3" y="323.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1135.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="1133.6" y="307.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1136.6" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="1133.6" y="291.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1136.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.36%)</title><rect x="1134.2" y="323.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1137.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.36%)</title><rect x="1134.2" y="307.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1137.2" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="1136.6" y="291.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.6" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="1136.6" y="275.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.6" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="1136.6" y="259.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.6" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1136.6" y="243.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.6" y="254.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1136.6" y="227.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.6" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="1136.6" y="211.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1137.3" y="291.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1140.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.10%)</title><rect x="1137.3" y="275.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1140.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.10%)</title><rect x="1137.3" y="259.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1140.3" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.10%)</title><rect x="1137.3" y="243.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.3" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.10%)</title><rect x="1137.3" y="227.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.3" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.10%)</title><rect x="1137.3" y="211.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.3" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1137.9" y="195.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.9" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1137.9" y="179.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.9" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1137.9" y="163.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (74 samples, 3.85%)</title><rect x="1138.5" y="339.0" width="45.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1141.5" y="350.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (72 samples, 3.74%)</title><rect x="1139.7" y="323.0" width="44.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1142.7" y="334.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (23 samples, 1.20%)</title><rect x="1144.0" y="307.0" width="14.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1147.0" y="318.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="1146.5" y="291.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="302.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="1147.1" y="291.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.1" y="302.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1147.7" y="291.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="302.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.10%)</title><rect x="1148.3" y="291.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1151.3" y="302.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.47%)</title><rect x="1149.5" y="291.0" width="5.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1152.5" y="302.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="1152.0" y="275.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.0" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1152.6" y="275.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="286.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.16%)</title><rect x="1153.2" y="275.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1156.2" y="286.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.05%)</title><rect x="1154.4" y="259.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.4" y="270.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (3 samples, 0.16%)</title><rect x="1155.0" y="291.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="302.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.10%)</title><rect x="1156.9" y="291.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.9" y="302.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="1158.1" y="307.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1161.1" y="318.0"></text>
</g>
<g>
<title>__recv (40 samples, 2.08%)</title><rect x="1158.7" y="307.0" width="24.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1161.7" y="318.0">_..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.05%)</title><rect x="1183.3" y="307.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1186.3" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.16%)</title><rect x="1183.9" y="371.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.10%)</title><rect x="1184.5" y="355.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1187.5" y="366.0"></text>
</g>
<g>
<title>start_thread (7 samples, 0.36%)</title><rect x="1185.7" y="387.0" width="4.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.36%)</title><rect x="1185.7" y="371.0" width="4.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.36%)</title><rect x="1185.7" y="355.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.7" y="366.0"></text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.36%)</title><rect x="1185.7" y="339.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="350.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 0.26%)</title><rect x="1185.7" y="323.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="334.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.16%)</title><rect x="1185.7" y="307.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="318.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.05%)</title><rect x="1185.7" y="291.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="302.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.05%)</title><rect x="1185.7" y="275.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1188.7" y="286.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.10%)</title><rect x="1186.3" y="291.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1189.3" y="302.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.10%)</title><rect x="1187.5" y="307.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="318.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.10%)</title><rect x="1187.5" y="291.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.5" y="302.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.10%)</title><rect x="1187.5" y="275.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="286.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.10%)</title><rect x="1187.5" y="259.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.10%)</title><rect x="1187.5" y="243.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="254.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.10%)</title><rect x="1187.5" y="227.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="238.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.10%)</title><rect x="1187.5" y="211.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="222.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.05%)</title><rect x="1187.5" y="195.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="206.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.05%)</title><rect x="1187.5" y="179.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="190.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.05%)</title><rect x="1188.2" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.2" y="206.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.10%)</title><rect x="1188.8" y="323.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="334.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.10%)</title><rect x="1188.8" y="307.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="318.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.10%)</title><rect x="1188.8" y="291.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="302.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.10%)</title><rect x="1188.8" y="275.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="286.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="1188.8" y="259.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.8" y="270.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.05%)</title><rect x="1188.8" y="243.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="254.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="1189.4" y="259.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.4" y="270.0"></text>
</g>
</g>
</svg>
