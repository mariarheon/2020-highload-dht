<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (355 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 2.82%)</title><rect x="10.0" y="371.0" width="33.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="382.0">Sh..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (10 samples, 2.82%)</title><rect x="10.0" y="355.0" width="33.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="366.0">Ob..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (10 samples, 2.82%)</title><rect x="10.0" y="339.0" width="33.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="350.0">Ob..</text>
</g>
<g>
<title>SpinPause (5 samples, 1.41%)</title><rect x="13.3" y="323.0" width="16.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.3" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.85%)</title><rect x="29.9" y="323.0" width="10.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="32.9" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.28%)</title><rect x="39.9" y="323.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="42.9" y="334.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.28%)</title><rect x="39.9" y="307.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="42.9" y="318.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.85%)</title><rect x="43.2" y="371.0" width="10.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="46.2" y="382.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.28%)</title><rect x="43.2" y="355.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="46.2" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.28%)</title><rect x="46.6" y="355.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="49.6" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="49.9" y="355.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="52.9" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.28%)</title><rect x="49.9" y="339.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="52.9" y="350.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="49.9" y="323.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="52.9" y="334.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.28%)</title><rect x="49.9" y="307.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="52.9" y="318.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 1.13%)</title><rect x="53.2" y="371.0" width="13.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="56.2" y="382.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (2 samples, 0.56%)</title><rect x="53.2" y="355.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="56.2" y="366.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2 samples, 0.56%)</title><rect x="59.9" y="355.0" width="6.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="62.9" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.85%)</title><rect x="66.5" y="371.0" width="10.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="69.5" y="382.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.85%)</title><rect x="66.5" y="355.0" width="10.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="69.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (229 samples, 64.51%)</title><rect x="76.5" y="371.0" width="761.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.5" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (229 samples, 64.51%)</title><rect x="76.5" y="355.0" width="761.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.5" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (229 samples, 64.51%)</title><rect x="76.5" y="339.0" width="761.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.5" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.28%)</title><rect x="86.5" y="323.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.28%)</title><rect x="86.5" y="307.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.28%)</title><rect x="86.5" y="291.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$70/502171037.run (1 samples, 0.28%)</title><rect x="86.5" y="275.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (71 samples, 20.00%)</title><rect x="89.8" y="323.0" width="236.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.8" y="334.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (68 samples, 19.15%)</title><rect x="93.1" y="307.0" width="226.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.1" y="318.0">java/util/concurrent/ArrayBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (59 samples, 16.62%)</title><rect x="93.1" y="291.0" width="196.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.1" y="302.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.56%)</title><rect x="99.7" y="275.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.28%)</title><rect x="106.4" y="275.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.28%)</title><rect x="109.7" y="275.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.28%)</title><rect x="109.7" y="259.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.28%)</title><rect x="109.7" y="243.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="112.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.28%)</title><rect x="109.7" y="227.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.7" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.28%)</title><rect x="109.7" y="211.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="112.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.28%)</title><rect x="113.0" y="275.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="113.0" y="259.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (52 samples, 14.65%)</title><rect x="116.4" y="275.0" width="172.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.4" y="286.0">java/util/concurrent/l..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (52 samples, 14.65%)</title><rect x="116.4" y="259.0" width="172.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="119.4" y="270.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>Unsafe_Park (22 samples, 6.20%)</title><rect x="116.4" y="243.0" width="73.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="119.4" y="254.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.28%)</title><rect x="116.4" y="227.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="119.4" y="238.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.28%)</title><rect x="119.7" y="227.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="122.7" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="123.0" y="227.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="126.0" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 1.13%)</title><rect x="126.3" y="227.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="129.3" y="238.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.28%)</title><rect x="136.3" y="211.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="139.3" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.28%)</title><rect x="139.6" y="227.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="142.6" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.56%)</title><rect x="143.0" y="227.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="146.0" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.28%)</title><rect x="149.6" y="227.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="152.6" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (9 samples, 2.54%)</title><rect x="152.9" y="227.0" width="29.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="155.9" y="238.0">__..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="182.8" y="227.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="185.8" y="238.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.28%)</title><rect x="186.2" y="227.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="189.2" y="238.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 7.89%)</title><rect x="189.5" y="243.0" width="93.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="192.5" y="254.0">[unknown]</text>
</g>
<g>
<title>__condvar_dec_grefs (2 samples, 0.56%)</title><rect x="189.5" y="227.0" width="6.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="192.5" y="238.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 1.41%)</title><rect x="196.1" y="227.0" width="16.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="199.1" y="238.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.28%)</title><rect x="212.8" y="227.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="215.8" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.28%)</title><rect x="216.1" y="227.0" width="3.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="219.1" y="238.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (19 samples, 5.35%)</title><rect x="219.4" y="227.0" width="63.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="222.4" y="238.0">pthread..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.56%)</title><rect x="282.6" y="243.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="285.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.28%)</title><rect x="289.2" y="291.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 2.25%)</title><rect x="292.5" y="291.0" width="26.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.5" y="302.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.25%)</title><rect x="292.5" y="275.0" width="26.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.5" y="286.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.41%)</title><rect x="302.5" y="259.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.41%)</title><rect x="302.5" y="243.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.5" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 1.41%)</title><rect x="302.5" y="227.0" width="16.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.5" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 1.13%)</title><rect x="302.5" y="211.0" width="13.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="305.5" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.28%)</title><rect x="302.5" y="195.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.5" y="206.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.28%)</title><rect x="305.8" y="195.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="308.8" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.28%)</title><rect x="309.2" y="195.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="312.2" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.28%)</title><rect x="312.5" y="195.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="315.5" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.28%)</title><rect x="315.8" y="211.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="318.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.28%)</title><rect x="319.1" y="307.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.28%)</title><rect x="322.5" y="307.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$70/502171037.run (84 samples, 23.66%)</title><rect x="325.8" y="323.0" width="279.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.8" y="334.0">ru/mail/polis/service/mariarheon/Asyn..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$passOn$1 (84 samples, 23.66%)</title><rect x="325.8" y="307.0" width="279.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.8" y="318.0">ru/mail/polis/service/mariarheon/Asyn..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOnInternal (84 samples, 23.66%)</title><rect x="325.8" y="291.0" width="279.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.8" y="302.0">ru/mail/polis/service/mariarheon/Asyn..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18 samples, 5.07%)</title><rect x="325.8" y="275.0" width="59.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.8" y="286.0">one/ni..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.28%)</title><rect x="335.7" y="259.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="338.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (12 samples, 3.38%)</title><rect x="339.1" y="259.0" width="39.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="342.1" y="270.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 1.41%)</title><rect x="339.1" y="243.0" width="16.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="342.1" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 1.13%)</title><rect x="342.4" y="227.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.4" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 1.13%)</title><rect x="342.4" y="211.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 1.13%)</title><rect x="342.4" y="195.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="345.4" y="206.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.56%)</title><rect x="349.0" y="179.0" width="6.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="352.0" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 1.97%)</title><rect x="355.7" y="243.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.7" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 1.97%)</title><rect x="355.7" y="227.0" width="23.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.7" y="238.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 1.97%)</title><rect x="355.7" y="211.0" width="23.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.7" y="222.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 1.69%)</title><rect x="359.0" y="195.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.0" y="206.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.56%)</title><rect x="362.3" y="179.0" width="6.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="365.3" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.56%)</title><rect x="362.3" y="163.0" width="6.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="365.3" y="174.0"></text>
</g>
<g>
<title>__libc_send (3 samples, 0.85%)</title><rect x="369.0" y="179.0" width="10.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="372.0" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.56%)</title><rect x="379.0" y="259.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.56%)</title><rect x="379.0" y="243.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.56%)</title><rect x="379.0" y="227.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.passOn (66 samples, 18.59%)</title><rect x="385.6" y="275.0" width="219.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.6" y="286.0">ru/mail/polis/service/mariarh..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 2.25%)</title><rect x="385.6" y="259.0" width="26.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="388.6" y="270.0">S..</text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.28%)</title><rect x="385.6" y="243.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="388.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.28%)</title><rect x="388.9" y="243.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="391.9" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 1.13%)</title><rect x="392.3" y="243.0" width="13.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="395.3" y="254.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.85%)</title><rect x="395.6" y="227.0" width="9.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="398.6" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.28%)</title><rect x="405.5" y="243.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="408.5" y="254.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.28%)</title><rect x="408.9" y="243.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="411.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (58 samples, 16.34%)</title><rect x="412.2" y="259.0" width="192.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.2" y="270.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (58 samples, 16.34%)</title><rect x="412.2" y="243.0" width="192.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.2" y="254.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (15 samples, 4.23%)</title><rect x="418.8" y="227.0" width="49.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.8" y="238.0">one/n..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="428.8" y="211.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="431.8" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="428.8" y="195.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="431.8" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.28%)</title><rect x="428.8" y="179.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="431.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.28%)</title><rect x="428.8" y="163.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.8" y="174.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.28%)</title><rect x="428.8" y="147.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.8" y="158.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (10 samples, 2.82%)</title><rect x="432.1" y="211.0" width="33.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.1" y="222.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 1.41%)</title><rect x="432.1" y="195.0" width="16.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="435.1" y="206.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.28%)</title><rect x="432.1" y="179.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="435.1" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 1.13%)</title><rect x="435.5" y="179.0" width="13.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="438.5" y="190.0"></text>
</g>
<g>
<title>__recv (3 samples, 0.85%)</title><rect x="448.8" y="195.0" width="9.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="451.8" y="206.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.56%)</title><rect x="458.7" y="195.0" width="6.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="461.7" y="206.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.28%)</title><rect x="465.4" y="211.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (18 samples, 5.07%)</title><rect x="468.7" y="227.0" width="59.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="471.7" y="238.0">one/ni..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.28%)</title><rect x="468.7" y="211.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="471.7" y="222.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.28%)</title><rect x="468.7" y="195.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="471.7" y="206.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.28%)</title><rect x="468.7" y="179.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.7" y="190.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.28%)</title><rect x="468.7" y="163.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.7" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.28%)</title><rect x="472.0" y="211.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.28%)</title><rect x="472.0" y="195.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.0" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.28%)</title><rect x="472.0" y="179.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.0" y="190.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.28%)</title><rect x="472.0" y="163.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="475.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (14 samples, 3.94%)</title><rect x="475.4" y="211.0" width="46.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.4" y="222.0">one/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="485.3" y="195.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="488.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.28%)</title><rect x="488.6" y="195.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.6" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 2.54%)</title><rect x="492.0" y="195.0" width="29.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.0" y="206.0">on..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.28%)</title><rect x="498.6" y="179.0" width="3.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="501.6" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 1.69%)</title><rect x="501.9" y="179.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.9" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.56%)</title><rect x="521.9" y="211.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="524.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.28%)</title><rect x="525.2" y="195.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.2" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.28%)</title><rect x="525.2" y="179.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (5 samples, 1.41%)</title><rect x="528.5" y="227.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.5" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.28%)</title><rect x="531.9" y="211.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="534.9" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.85%)</title><rect x="535.2" y="211.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="538.2" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.56%)</title><rect x="535.2" y="195.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.2" y="206.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.28%)</title><rect x="538.5" y="179.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="541.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.28%)</title><rect x="538.5" y="163.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.5" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.28%)</title><rect x="541.8" y="195.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.28%)</title><rect x="541.8" y="179.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.28%)</title><rect x="541.8" y="163.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="544.8" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (9 samples, 2.54%)</title><rect x="545.2" y="227.0" width="29.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.2" y="238.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.56%)</title><rect x="545.2" y="211.0" width="6.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="548.2" y="222.0"></text>
</g>
<g>
<title>__setsockopt (7 samples, 1.97%)</title><rect x="551.8" y="211.0" width="23.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="554.8" y="222.0">_..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (9 samples, 2.54%)</title><rect x="575.1" y="227.0" width="29.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.1" y="238.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (3 samples, 0.85%)</title><rect x="575.1" y="211.0" width="9.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="578.1" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.28%)</title><rect x="578.4" y="195.0" width="3.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="581.4" y="206.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.28%)</title><rect x="578.4" y="179.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="581.4" y="190.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.28%)</title><rect x="581.7" y="195.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="584.7" y="206.0"></text>
</g>
<g>
<title>__libc_send (6 samples, 1.69%)</title><rect x="585.0" y="211.0" width="20.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="588.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$73/1659544978.run (70 samples, 19.72%)</title><rect x="605.0" y="323.0" width="232.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.0" y="334.0">ru/mail/polis/service/mariarheo..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$handleEntityRequest$0 (67 samples, 18.87%)</title><rect x="615.0" y="307.0" width="222.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.0" y="318.0">ru/mail/polis/service/mariarh..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.get (67 samples, 18.87%)</title><rect x="615.0" y="291.0" width="222.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.0" y="302.0">ru/mail/polis/service/mariarh..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 3.10%)</title><rect x="615.0" y="275.0" width="36.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.0" y="286.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10 samples, 2.82%)</title><rect x="618.3" y="259.0" width="33.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="621.3" y="270.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.56%)</title><rect x="618.3" y="243.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="621.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.56%)</title><rect x="618.3" y="227.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.3" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.56%)</title><rect x="618.3" y="211.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.56%)</title><rect x="618.3" y="195.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="621.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 2.25%)</title><rect x="624.9" y="243.0" width="26.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="627.9" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 2.25%)</title><rect x="624.9" y="227.0" width="26.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="627.9" y="238.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 2.25%)</title><rect x="624.9" y="211.0" width="26.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.9" y="222.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.56%)</title><rect x="624.9" y="195.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.9" y="206.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 1.69%)</title><rect x="631.6" y="195.0" width="19.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.6" y="206.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.28%)</title><rect x="631.6" y="179.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="634.6" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.28%)</title><rect x="631.6" y="163.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="634.6" y="174.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.28%)</title><rect x="631.6" y="147.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="634.6" y="158.0"></text>
</g>
<g>
<title>__libc_send (2 samples, 0.56%)</title><rect x="634.9" y="179.0" width="6.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="637.9" y="190.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.28%)</title><rect x="641.5" y="179.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="644.5" y="190.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.56%)</title><rect x="644.9" y="179.0" width="6.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="647.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.get (56 samples, 15.77%)</title><rect x="651.5" y="275.0" width="186.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="654.5" y="286.0">ru/mail/polis/dao/mariar..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (54 samples, 15.21%)</title><rect x="651.5" y="259.0" width="179.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="654.5" y="270.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (54 samples, 15.21%)</title><rect x="651.5" y="243.0" width="179.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.5" y="254.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (48 samples, 13.52%)</title><rect x="654.8" y="227.0" width="159.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="657.8" y="238.0">Java_org_rocksdb_Roc..</text>
</g>
<g>
<title>_int_free (1 samples, 0.28%)</title><rect x="654.8" y="211.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="657.8" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.28%)</title><rect x="658.2" y="211.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="661.2" y="222.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.28%)</title><rect x="661.5" y="211.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="664.5" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (44 samples, 12.39%)</title><rect x="664.8" y="211.0" width="146.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="667.8" y="222.0">rocksdb_get_helper..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.28%)</title><rect x="668.1" y="195.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="671.1" y="206.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.28%)</title><rect x="671.5" y="195.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (32 samples, 9.01%)</title><rect x="674.8" y="195.0" width="106.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="677.8" y="206.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (32 samples, 9.01%)</title><rect x="674.8" y="179.0" width="106.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="677.8" y="190.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (31 samples, 8.73%)</title><rect x="678.1" y="163.0" width="103.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="681.1" y="174.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (31 samples, 8.73%)</title><rect x="678.1" y="147.0" width="103.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="681.1" y="158.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.28%)</title><rect x="678.1" y="131.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="681.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.28%)</title><rect x="681.4" y="131.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="684.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (26 samples, 7.32%)</title><rect x="684.8" y="131.0" width="86.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="687.8" y="142.0">rocksdb::D..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.28%)</title><rect x="688.1" y="115.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="691.1" y="126.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.28%)</title><rect x="691.4" y="115.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="694.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.56%)</title><rect x="694.7" y="115.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="697.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.28%)</title><rect x="698.1" y="99.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="701.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (1 samples, 0.28%)</title><rect x="701.4" y="115.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (20 samples, 5.63%)</title><rect x="704.7" y="115.0" width="66.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="707.7" y="126.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (1 samples, 0.28%)</title><rect x="711.4" y="99.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="714.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (17 samples, 4.79%)</title><rect x="714.7" y="99.0" width="56.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="717.7" y="110.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (16 samples, 4.51%)</title><rect x="714.7" y="83.0" width="53.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="717.7" y="94.0">/tmp/..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (1 samples, 0.28%)</title><rect x="714.7" y="67.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="717.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (15 samples, 4.23%)</title><rect x="718.0" y="67.0" width="49.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="721.0" y="78.0">rocks..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 1.97%)</title><rect x="744.6" y="51.0" width="23.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="747.6" y="62.0">r..</text>
</g>
<g>
<title>__memcmp_avx2_movbe (4 samples, 1.13%)</title><rect x="754.6" y="35.0" width="13.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="757.6" y="46.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.28%)</title><rect x="767.9" y="83.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="770.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (1 samples, 0.28%)</title><rect x="771.2" y="131.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="774.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (1 samples, 0.28%)</title><rect x="774.5" y="131.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="777.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (1 samples, 0.28%)</title><rect x="777.8" y="131.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="780.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (9 samples, 2.54%)</title><rect x="781.2" y="195.0" width="29.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.2" y="206.0">ro..</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.28%)</title><rect x="781.2" y="179.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="784.2" y="190.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.56%)</title><rect x="784.5" y="179.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="787.5" y="190.0"></text>
</g>
<g>
<title>jni_NewByteArray (6 samples, 1.69%)</title><rect x="791.1" y="179.0" width="20.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="794.1" y="190.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 1.13%)</title><rect x="797.8" y="163.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.8" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.56%)</title><rect x="801.1" y="147.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="804.1" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.28%)</title><rect x="801.1" y="131.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="804.1" y="142.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.28%)</title><rect x="801.1" y="115.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="804.1" y="126.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.28%)</title><rect x="804.4" y="131.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="807.4" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.28%)</title><rect x="807.7" y="147.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="810.7" y="158.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.28%)</title><rect x="811.1" y="211.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="814.1" y="222.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.56%)</title><rect x="814.4" y="227.0" width="6.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="817.4" y="238.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.28%)</title><rect x="814.4" y="211.0" width="3.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="817.4" y="222.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (1 samples, 0.28%)</title><rect x="817.7" y="211.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="820.7" y="222.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.28%)</title><rect x="821.0" y="227.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="824.0" y="238.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (2 samples, 0.56%)</title><rect x="824.4" y="227.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="827.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArrayUnsigned (2 samples, 0.56%)</title><rect x="831.0" y="259.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="834.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (2 samples, 0.56%)</title><rect x="831.0" y="243.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.56%)</title><rect x="831.0" y="227.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="834.0" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="834.3" y="211.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="837.3" y="222.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (103 samples, 29.01%)</title><rect x="837.7" y="371.0" width="342.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="840.7" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.28%)</title><rect x="837.7" y="355.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="840.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.28%)</title><rect x="837.7" y="339.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="840.7" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.28%)</title><rect x="837.7" y="323.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="840.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.28%)</title><rect x="841.0" y="355.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (20 samples, 5.63%)</title><rect x="844.3" y="355.0" width="66.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="847.3" y="366.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.56%)</title><rect x="847.6" y="339.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="850.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.28%)</title><rect x="851.0" y="323.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="854.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (17 samples, 4.79%)</title><rect x="854.3" y="339.0" width="56.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.3" y="350.0">one/ni..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.56%)</title><rect x="854.3" y="323.0" width="6.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="857.3" y="334.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.28%)</title><rect x="860.9" y="323.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="863.9" y="334.0"></text>
</g>
<g>
<title>epoll_wait (13 samples, 3.66%)</title><rect x="864.3" y="323.0" width="43.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="867.3" y="334.0">epol..</text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.28%)</title><rect x="907.5" y="323.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="910.5" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (81 samples, 22.82%)</title><rect x="910.8" y="355.0" width="269.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.8" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (78 samples, 21.97%)</title><rect x="920.8" y="339.0" width="259.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.8" y="350.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (59 samples, 16.62%)</title><rect x="924.1" y="323.0" width="196.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="927.1" y="334.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (46 samples, 12.96%)</title><rect x="930.7" y="307.0" width="152.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.7" y="318.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.85%)</title><rect x="934.1" y="291.0" width="9.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="937.1" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (41 samples, 11.55%)</title><rect x="944.0" y="291.0" width="136.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.0" y="302.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler1_handleEntityRequest.handleRequest (40 samples, 11.27%)</title><rect x="944.0" y="275.0" width="133.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="947.0" y="286.0">RequestHandler1_..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.56%)</title><rect x="944.0" y="259.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="947.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.56%)</title><rect x="944.0" y="243.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="947.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.handleEntityRequest (38 samples, 10.70%)</title><rect x="950.7" y="259.0" width="126.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.7" y="270.0">ru/mail/polis/se..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (20 samples, 5.63%)</title><rect x="950.7" y="243.0" width="66.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="953.7" y="254.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (19 samples, 5.35%)</title><rect x="954.0" y="227.0" width="63.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.0" y="238.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.28%)</title><rect x="954.0" y="211.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="957.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 5.07%)</title><rect x="957.3" y="211.0" width="59.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.3" y="222.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 5.07%)</title><rect x="957.3" y="195.0" width="59.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="960.3" y="206.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 5.07%)</title><rect x="957.3" y="179.0" width="59.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="960.3" y="190.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 5.07%)</title><rect x="957.3" y="163.0" width="59.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="960.3" y="174.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 5.07%)</title><rect x="957.3" y="147.0" width="59.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="960.3" y="158.0">jdk/in..</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.28%)</title><rect x="957.3" y="131.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.3" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.28%)</title><rect x="960.6" y="131.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="963.6" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 1.41%)</title><rect x="964.0" y="131.0" width="16.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="967.0" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 1.13%)</title><rect x="967.3" y="115.0" width="13.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="970.3" y="126.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 3.10%)</title><rect x="980.6" y="131.0" width="36.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="983.6" y="142.0">__p..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOn (14 samples, 3.94%)</title><rect x="1017.2" y="243.0" width="46.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1020.2" y="254.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 3.94%)</title><rect x="1017.2" y="227.0" width="46.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1020.2" y="238.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (12 samples, 3.38%)</title><rect x="1023.8" y="211.0" width="39.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1026.8" y="222.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 3.10%)</title><rect x="1027.1" y="195.0" width="36.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1030.1" y="206.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 3.10%)</title><rect x="1027.1" y="179.0" width="36.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1030.1" y="190.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 3.10%)</title><rect x="1027.1" y="163.0" width="36.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.1" y="174.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 3.10%)</title><rect x="1027.1" y="147.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1030.1" y="158.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 2.82%)</title><rect x="1030.5" y="131.0" width="33.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.5" y="142.0">jd..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.28%)</title><rect x="1030.5" y="115.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.5" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.28%)</title><rect x="1033.8" y="115.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.8" y="126.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.56%)</title><rect x="1037.1" y="115.0" width="6.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1040.1" y="126.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.28%)</title><rect x="1037.1" y="99.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1040.1" y="110.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.28%)</title><rect x="1040.4" y="99.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.4" y="110.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 1.69%)</title><rect x="1043.7" y="115.0" width="20.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1046.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNode (4 samples, 1.13%)</title><rect x="1063.7" y="243.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1066.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.56%)</title><rect x="1070.3" y="227.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1073.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.28%)</title><rect x="1077.0" y="275.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1080.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.28%)</title><rect x="1077.0" y="259.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.0" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="1077.0" y="243.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1080.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.28%)</title><rect x="1077.0" y="227.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1080.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.handleEntityRequest (1 samples, 0.28%)</title><rect x="1080.3" y="291.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1083.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 1.97%)</title><rect x="1083.6" y="307.0" width="23.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1086.6" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.28%)</title><rect x="1087.0" y="291.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1090.0" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="1087.0" y="275.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.0" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.28%)</title><rect x="1087.0" y="259.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.0" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.28%)</title><rect x="1087.0" y="243.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.0" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.28%)</title><rect x="1087.0" y="227.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.0" y="238.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.28%)</title><rect x="1087.0" y="211.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.0" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.28%)</title><rect x="1087.0" y="195.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.0" y="206.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.28%)</title><rect x="1087.0" y="179.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.0" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.28%)</title><rect x="1087.0" y="163.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.0" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.28%)</title><rect x="1090.3" y="291.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1093.3" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.28%)</title><rect x="1090.3" y="275.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1093.3" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 1.13%)</title><rect x="1093.6" y="291.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1096.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.56%)</title><rect x="1106.9" y="307.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1109.9" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.56%)</title><rect x="1113.5" y="307.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1116.5" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.56%)</title><rect x="1113.5" y="291.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1116.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 5.07%)</title><rect x="1120.2" y="323.0" width="59.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1123.2" y="334.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (18 samples, 5.07%)</title><rect x="1120.2" y="307.0" width="59.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1123.2" y="318.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (10 samples, 2.82%)</title><rect x="1126.8" y="291.0" width="33.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1129.8" y="302.0">Ja..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.28%)</title><rect x="1126.8" y="275.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.8" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.28%)</title><rect x="1130.2" y="275.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.2" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.28%)</title><rect x="1133.5" y="275.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.5" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 1.97%)</title><rect x="1136.8" y="275.0" width="23.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1139.8" y="286.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.85%)</title><rect x="1136.8" y="259.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.8" y="270.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.56%)</title><rect x="1146.8" y="259.0" width="6.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1149.8" y="270.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.56%)</title><rect x="1146.8" y="243.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.8" y="254.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.56%)</title><rect x="1153.4" y="259.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.4" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.28%)</title><rect x="1160.1" y="291.0" width="3.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1163.1" y="302.0"></text>
</g>
<g>
<title>__recv (5 samples, 1.41%)</title><rect x="1163.4" y="291.0" width="16.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1166.4" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.85%)</title><rect x="1180.0" y="371.0" width="10.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1183.0" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.85%)</title><rect x="1180.0" y="355.0" width="10.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1183.0" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.85%)</title><rect x="1180.0" y="339.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.85%)</title><rect x="1180.0" y="323.0" width="10.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="334.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.85%)</title><rect x="1180.0" y="307.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="318.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.85%)</title><rect x="1180.0" y="291.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="302.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.85%)</title><rect x="1180.0" y="275.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="286.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 0.85%)</title><rect x="1180.0" y="259.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="270.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 0.56%)</title><rect x="1180.0" y="243.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 0.56%)</title><rect x="1180.0" y="227.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.28%)</title><rect x="1180.0" y="211.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="222.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1180.0" y="195.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="206.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.28%)</title><rect x="1183.4" y="211.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="222.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.28%)</title><rect x="1186.7" y="243.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="254.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.28%)</title><rect x="1186.7" y="227.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.28%)</title><rect x="1186.7" y="211.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="222.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1186.7" y="195.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="206.0"></text>
</g>
</g>
</svg>
