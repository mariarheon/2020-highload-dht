<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="629"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="629"> </text>
<g id="frames">
<g>
<title>all (471 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="606.0">all</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.21%)</title><rect x="10.0" y="579.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.21%)</title><rect x="10.0" y="563.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="10.0" y="547.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="10.0" y="531.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="10.0" y="515.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.21%)</title><rect x="10.0" y="499.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.21%)</title><rect x="10.0" y="483.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.21%)</title><rect x="10.0" y="467.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.21%)</title><rect x="10.0" y="451.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.21%)</title><rect x="10.0" y="435.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="10.0" y="419.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.21%)</title><rect x="10.0" y="403.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.21%)</title><rect x="10.0" y="387.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.21%)</title><rect x="10.0" y="371.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (1 samples, 0.21%)</title><rect x="10.0" y="355.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="10.0" y="339.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="10.0" y="323.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.21%)</title><rect x="10.0" y="307.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.21%)</title><rect x="10.0" y="291.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.21%)</title><rect x="10.0" y="275.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.21%)</title><rect x="10.0" y="259.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (1 samples, 0.21%)</title><rect x="10.0" y="243.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.85%)</title><rect x="12.5" y="579.0" width="10.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="15.5" y="590.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.21%)</title><rect x="12.5" y="563.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="15.5" y="574.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.21%)</title><rect x="12.5" y="547.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="12.5" y="531.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="12.5" y="515.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="12.5" y="499.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.21%)</title><rect x="12.5" y="483.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.21%)</title><rect x="12.5" y="467.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.21%)</title><rect x="12.5" y="451.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.21%)</title><rect x="12.5" y="435.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.21%)</title><rect x="12.5" y="419.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="12.5" y="403.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.21%)</title><rect x="12.5" y="387.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.21%)</title><rect x="12.5" y="371.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.5" y="382.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.21%)</title><rect x="12.5" y="355.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.5" y="366.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (1 samples, 0.21%)</title><rect x="12.5" y="339.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="12.5" y="323.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="12.5" y="307.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.5" y="318.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.21%)</title><rect x="12.5" y="291.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.5" y="302.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.21%)</title><rect x="12.5" y="275.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="15.5" y="286.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.21%)</title><rect x="12.5" y="259.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="15.5" y="270.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.21%)</title><rect x="12.5" y="243.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.5" y="254.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.21%)</title><rect x="12.5" y="227.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.5" y="238.0"></text>
</g>
<g>
<title>call_stub (3 samples, 0.64%)</title><rect x="15.0" y="563.0" width="7.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="18.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="22.5" y="579.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="25.5" y="590.0"></text>
</g>
<g>
<title>PerfEvents::stop() (1 samples, 0.21%)</title><rect x="22.5" y="563.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.5" y="574.0"></text>
</g>
<g>
<title>[unknown_Java] (9 samples, 1.91%)</title><rect x="25.0" y="579.0" width="22.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="28.0" y="590.0">[..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (7 samples, 1.49%)</title><rect x="25.0" y="563.0" width="17.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="28.0" y="574.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (7 samples, 1.49%)</title><rect x="25.0" y="547.0" width="17.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.49%)</title><rect x="25.0" y="531.0" width="17.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="28.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.49%)</title><rect x="25.0" y="515.0" width="17.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="28.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.49%)</title><rect x="25.0" y="499.0" width="17.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (7 samples, 1.49%)</title><rect x="25.0" y="483.0" width="17.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="28.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (7 samples, 1.49%)</title><rect x="25.0" y="467.0" width="17.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="28.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (7 samples, 1.49%)</title><rect x="25.0" y="451.0" width="17.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="28.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (7 samples, 1.49%)</title><rect x="25.0" y="435.0" width="17.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="28.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 1.49%)</title><rect x="25.0" y="419.0" width="17.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="28.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.49%)</title><rect x="25.0" y="403.0" width="17.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="28.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (7 samples, 1.49%)</title><rect x="25.0" y="387.0" width="17.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="28.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (7 samples, 1.49%)</title><rect x="25.0" y="371.0" width="17.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="28.0" y="382.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (7 samples, 1.49%)</title><rect x="25.0" y="355.0" width="17.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="28.0" y="366.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (7 samples, 1.49%)</title><rect x="25.0" y="339.0" width="17.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="28.0" y="350.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (3 samples, 0.64%)</title><rect x="25.0" y="323.0" width="7.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="28.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.64%)</title><rect x="25.0" y="307.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="28.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.64%)</title><rect x="25.0" y="291.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="28.0" y="302.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.21%)</title><rect x="25.0" y="275.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.0" y="286.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.21%)</title><rect x="25.0" y="259.0" width="2.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="28.0" y="270.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.21%)</title><rect x="25.0" y="243.0" width="2.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="28.0" y="254.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.21%)</title><rect x="25.0" y="227.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="28.0" y="238.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (1 samples, 0.21%)</title><rect x="25.0" y="211.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="28.0" y="222.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.42%)</title><rect x="27.5" y="275.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.5" y="286.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.42%)</title><rect x="27.5" y="259.0" width="5.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="30.5" y="270.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (2 samples, 0.42%)</title><rect x="27.5" y="243.0" width="5.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="30.5" y="254.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.42%)</title><rect x="27.5" y="227.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="30.5" y="238.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.21%)</title><rect x="27.5" y="211.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="30.5" y="222.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.21%)</title><rect x="30.0" y="211.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.85%)</title><rect x="32.5" y="323.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="35.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (4 samples, 0.85%)</title><rect x="32.5" y="307.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="35.5" y="318.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.42%)</title><rect x="32.5" y="291.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="35.5" y="302.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.42%)</title><rect x="32.5" y="275.0" width="5.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="35.5" y="286.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (2 samples, 0.42%)</title><rect x="32.5" y="259.0" width="5.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="35.5" y="270.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.42%)</title><rect x="32.5" y="243.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="35.5" y="254.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.21%)</title><rect x="35.1" y="227.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="38.1" y="238.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.42%)</title><rect x="37.6" y="291.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="40.6" y="302.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.42%)</title><rect x="37.6" y="275.0" width="5.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="40.6" y="286.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (2 samples, 0.42%)</title><rect x="37.6" y="259.0" width="5.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="40.6" y="270.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.42%)</title><rect x="37.6" y="243.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="40.6" y="254.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.21%)</title><rect x="40.1" y="227.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="43.1" y="238.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.42%)</title><rect x="42.6" y="563.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="45.6" y="574.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (449 samples, 95.33%)</title><rect x="47.6" y="579.0" width="1124.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.6" y="590.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.21%)</title><rect x="67.6" y="563.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.21%)</title><rect x="70.1" y="563.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.21%)</title><rect x="70.1" y="547.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (22 samples, 4.67%)</title><rect x="72.6" y="563.0" width="55.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="75.6" y="574.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (22 samples, 4.67%)</title><rect x="72.6" y="547.0" width="55.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.6" y="558.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.21%)</title><rect x="80.1" y="531.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="83.1" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 1.70%)</title><rect x="82.7" y="531.0" width="20.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="85.7" y="542.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.42%)</title><rect x="102.7" y="531.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="105.7" y="542.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.21%)</title><rect x="107.7" y="531.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="110.7" y="542.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 1.49%)</title><rect x="110.2" y="531.0" width="17.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="113.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (417 samples, 88.54%)</title><rect x="127.7" y="563.0" width="1044.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.7" y="574.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.21%)</title><rect x="127.7" y="547.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (416 samples, 88.32%)</title><rect x="130.3" y="547.0" width="1042.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.3" y="558.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (384 samples, 81.53%)</title><rect x="132.8" y="531.0" width="962.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="135.8" y="542.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.42%)</title><rect x="137.8" y="515.0" width="5.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="140.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (359 samples, 76.22%)</title><rect x="142.8" y="515.0" width="899.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="145.8" y="526.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/util/LinkedList.addLast (1 samples, 0.21%)</title><rect x="147.8" y="499.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.8" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (356 samples, 75.58%)</title><rect x="150.3" y="499.0" width="891.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.3" y="510.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (354 samples, 75.16%)</title><rect x="150.3" y="483.0" width="886.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.3" y="494.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (23 samples, 4.88%)</title><rect x="150.3" y="467.0" width="57.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.3" y="478.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (21 samples, 4.46%)</title><rect x="155.3" y="451.0" width="52.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.3" y="462.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 1.49%)</title><rect x="155.3" y="435.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.3" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.64%)</title><rect x="165.3" y="419.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.3" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.64%)</title><rect x="165.3" y="403.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="168.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.64%)</title><rect x="165.3" y="387.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="168.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 2.97%)</title><rect x="172.8" y="435.0" width="35.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.8" y="446.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 2.97%)</title><rect x="172.8" y="419.0" width="35.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.8" y="430.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 2.97%)</title><rect x="172.8" y="403.0" width="35.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.8" y="414.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (14 samples, 2.97%)</title><rect x="172.8" y="387.0" width="35.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.8" y="398.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.42%)</title><rect x="177.9" y="371.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="180.9" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.21%)</title><rect x="180.4" y="355.0" width="2.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="183.4" y="366.0"></text>
</g>
<g>
<title>__libc_send (10 samples, 2.12%)</title><rect x="182.9" y="371.0" width="25.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="185.9" y="382.0">_..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.85%)</title><rect x="207.9" y="467.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.21%)</title><rect x="207.9" y="451.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.9" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.21%)</title><rect x="207.9" y="435.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.9" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.21%)</title><rect x="210.4" y="451.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="213.4" y="462.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.42%)</title><rect x="212.9" y="451.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ServiceImpl.put (327 samples, 69.43%)</title><rect x="217.9" y="467.0" width="819.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.9" y="478.0">ru/mail/polis/service/mariarheon/ServiceImpl.put</text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (3 samples, 0.64%)</title><rect x="217.9" y="451.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.64%)</title><rect x="217.9" y="435.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.64%)</title><rect x="217.9" y="419.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.9" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.64%)</title><rect x="217.9" y="403.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.64%)</title><rect x="217.9" y="387.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.9" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.64%)</title><rect x="217.9" y="371.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.64%)</title><rect x="217.9" y="355.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.64%)</title><rect x="217.9" y="339.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.9" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.21%)</title><rect x="223.0" y="323.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.upsert (323 samples, 68.58%)</title><rect x="225.5" y="451.0" width="809.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.5" y="462.0">ru/mail/polis/dao/mariarheon/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (321 samples, 68.15%)</title><rect x="225.5" y="435.0" width="804.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.5" y="446.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.21%)</title><rect x="225.5" y="419.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.5" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.21%)</title><rect x="228.0" y="419.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="231.0" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (319 samples, 67.73%)</title><rect x="230.5" y="419.0" width="799.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.5" y="430.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.21%)</title><rect x="230.5" y="403.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.5" y="414.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (251 samples, 53.29%)</title><rect x="233.0" y="403.0" width="628.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="236.0" y="414.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator delete[](void*) [clone .plt] (1 samples, 0.21%)</title><rect x="235.5" y="387.0" width="2.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="238.5" y="398.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.64%)</title><rect x="238.0" y="387.0" width="7.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="241.0" y="398.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (1 samples, 0.21%)</title><rect x="245.5" y="387.0" width="2.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="248.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="248.0" y="387.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="251.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.21%)</title><rect x="250.5" y="387.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="253.5" y="398.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (243 samples, 51.59%)</title><rect x="253.0" y="387.0" width="608.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="256.0" y="398.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::Co..</text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.21%)</title><rect x="253.0" y="371.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="256.0" y="382.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.21%)</title><rect x="255.5" y="371.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="258.5" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.64%)</title><rect x="258.0" y="371.0" width="7.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="261.0" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.21%)</title><rect x="260.5" y="355.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="263.5" y="366.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.21%)</title><rect x="263.0" y="355.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="266.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (238 samples, 50.53%)</title><rect x="265.5" y="371.0" width="596.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="268.5" y="382.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slic..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="265.5" y="355.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="268.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (237 samples, 50.32%)</title><rect x="268.0" y="355.0" width="593.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="271.0" y="366.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (233 samples, 49.47%)</title><rect x="268.0" y="339.0" width="583.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="271.0" y="350.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (225 samples, 47.77%)</title><rect x="268.0" y="323.0" width="563.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="271.0" y="334.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.42%)</title><rect x="268.0" y="307.0" width="5.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="271.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.21%)</title><rect x="273.1" y="307.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="276.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (213 samples, 45.22%)</title><rect x="275.6" y="307.0" width="533.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="278.6" y="318.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBat..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.21%)</title><rect x="298.1" y="291.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="301.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (33 samples, 7.01%)</title><rect x="300.6" y="291.0" width="82.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="303.6" y="302.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.21%)</title><rect x="300.6" y="275.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="303.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (31 samples, 6.58%)</title><rect x="303.1" y="275.0" width="77.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="306.1" y="286.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.21%)</title><rect x="303.1" y="259.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="306.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (27 samples, 5.73%)</title><rect x="305.6" y="259.0" width="67.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="308.6" y="270.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (4 samples, 0.85%)</title><rect x="310.6" y="243.0" width="10.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="313.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (18 samples, 3.82%)</title><rect x="320.7" y="243.0" width="45.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="323.7" y="254.0">rock..</text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.21%)</title><rect x="325.7" y="227.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="328.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() [clone .plt] (1 samples, 0.21%)</title><rect x="328.2" y="227.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="331.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (14 samples, 2.97%)</title><rect x="330.7" y="227.0" width="35.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="333.7" y="238.0">roc..</text>
</g>
<g>
<title>__libc_write (10 samples, 2.12%)</title><rect x="335.7" y="211.0" width="25.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="338.7" y="222.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.21%)</title><rect x="360.7" y="211.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="363.7" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.21%)</title><rect x="363.2" y="211.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="366.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.21%)</title><rect x="365.8" y="243.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="368.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.42%)</title><rect x="368.3" y="243.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="371.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.21%)</title><rect x="370.8" y="227.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="373.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.64%)</title><rect x="373.3" y="259.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="376.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.21%)</title><rect x="380.8" y="275.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="383.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.21%)</title><rect x="383.3" y="291.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="386.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.21%)</title><rect x="385.8" y="291.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="388.8" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.21%)</title><rect x="385.8" y="275.0" width="2.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="388.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (1 samples, 0.21%)</title><rect x="388.3" y="291.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="391.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.21%)</title><rect x="390.8" y="291.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="393.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (163 samples, 34.61%)</title><rect x="393.3" y="291.0" width="408.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="396.3" y="302.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteTh..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (162 samples, 34.39%)</title><rect x="393.3" y="275.0" width="405.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="396.3" y="286.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handl..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (162 samples, 34.39%)</title><rect x="393.3" y="259.0" width="405.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="396.3" y="270.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (158 samples, 33.55%)</title><rect x="400.8" y="243.0" width="395.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="403.8" y="254.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.21%)</title><rect x="400.8" y="227.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="403.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.21%)</title><rect x="403.3" y="227.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="406.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (156 samples, 33.12%)</title><rect x="405.8" y="227.0" width="390.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="408.8" y="238.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (2 samples, 0.42%)</title><rect x="410.8" y="211.0" width="5.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="413.8" y="222.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.21%)</title><rect x="415.9" y="211.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="418.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (2 samples, 0.42%)</title><rect x="418.4" y="211.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="421.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.21%)</title><rect x="423.4" y="211.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="426.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (147 samples, 31.21%)</title><rect x="425.9" y="211.0" width="368.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="428.9" y="222.0">rocksdb::MemTable::Add(unsigned long, rocksdb::Val..</text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (4 samples, 0.85%)</title><rect x="433.4" y="195.0" width="10.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="436.4" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.42%)</title><rect x="435.9" y="179.0" width="5.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="438.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.21%)</title><rect x="440.9" y="179.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="443.9" y="190.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (136 samples, 28.87%)</title><rect x="443.4" y="195.0" width="340.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="446.4" y="206.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTable..</text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (100 samples, 21.23%)</title><rect x="445.9" y="179.0" width="250.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="448.9" y="190.0">/tmp/librocksdbjni324065336134395..</text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (39 samples, 8.28%)</title><rect x="448.4" y="163.0" width="97.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="451.4" y="174.0">/tmp/libroc..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (39 samples, 8.28%)</title><rect x="448.4" y="147.0" width="97.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="451.4" y="158.0">rocksdb::Me..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (38 samples, 8.07%)</title><rect x="450.9" y="131.0" width="95.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="453.9" y="142.0">rocksdb::Ba..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (9 samples, 1.91%)</title><rect x="453.4" y="115.0" width="22.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="456.4" y="126.0">J..</text>
</g>
<g>
<title>jni_CallIntMethodV (9 samples, 1.91%)</title><rect x="453.4" y="99.0" width="22.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="456.4" y="110.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.21%)</title><rect x="453.4" y="83.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="456.4" y="94.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.21%)</title><rect x="455.9" y="83.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.9" y="94.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (6 samples, 1.27%)</title><rect x="458.5" y="83.0" width="15.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="461.5" y="94.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.42%)</title><rect x="463.5" y="67.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="466.5" y="78.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (1 samples, 0.21%)</title><rect x="466.0" y="51.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="469.0" y="62.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.42%)</title><rect x="468.5" y="67.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="471.5" y="78.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.42%)</title><rect x="468.5" y="51.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="471.5" y="62.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.21%)</title><rect x="473.5" y="83.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="476.5" y="94.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (22 samples, 4.67%)</title><rect x="476.0" y="115.0" width="55.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="479.0" y="126.0">JNIEn..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::JNI_ArgumentPusherVaArg(_jmethodID*, __va_list_tag*) (1 samples, 0.21%)</title><rect x="476.0" y="99.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="479.0" y="110.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (21 samples, 4.46%)</title><rect x="478.5" y="99.0" width="52.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="481.5" y="110.0">jni_C..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.64%)</title><rect x="486.0" y="83.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="489.0" y="94.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (14 samples, 2.97%)</title><rect x="493.5" y="83.0" width="35.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="496.5" y="94.0">jni..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (1 samples, 0.21%)</title><rect x="501.0" y="67.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="504.0" y="78.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 1.49%)</title><rect x="503.5" y="67.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="506.5" y="78.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.21%)</title><rect x="506.1" y="51.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="509.1" y="62.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.21%)</title><rect x="508.6" y="51.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="511.6" y="62.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.64%)</title><rect x="511.1" y="51.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="514.1" y="62.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.21%)</title><rect x="516.1" y="35.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="519.1" y="46.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.21%)</title><rect x="518.6" y="51.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="521.6" y="62.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.21%)</title><rect x="521.1" y="67.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="524.1" y="78.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.42%)</title><rect x="523.6" y="67.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="526.6" y="78.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.21%)</title><rect x="528.6" y="83.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="531.6" y="94.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.64%)</title><rect x="531.1" y="115.0" width="7.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="534.1" y="126.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.42%)</title><rect x="538.6" y="115.0" width="5.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="541.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.21%)</title><rect x="543.6" y="115.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="546.6" y="126.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="546.1" y="163.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="549.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (59 samples, 12.53%)</title><rect x="548.6" y="163.0" width="147.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="551.6" y="174.0">rocksdb::MemTable::..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (57 samples, 12.10%)</title><rect x="553.7" y="147.0" width="142.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="556.7" y="158.0">rocksdb::BaseCompa..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (9 samples, 1.91%)</title><rect x="558.7" y="131.0" width="22.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="561.7" y="142.0">J..</text>
</g>
<g>
<title>jni_CallIntMethodV (9 samples, 1.91%)</title><rect x="558.7" y="115.0" width="22.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="561.7" y="126.0">j..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::JNI_ArgumentPusherVaArg(_jmethodID*, __va_list_tag*) (3 samples, 0.64%)</title><rect x="558.7" y="99.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="561.7" y="110.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.42%)</title><rect x="566.2" y="99.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="569.2" y="110.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (4 samples, 0.85%)</title><rect x="571.2" y="99.0" width="10.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="574.2" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.42%)</title><rect x="571.2" y="83.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="574.2" y="94.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (1 samples, 0.21%)</title><rect x="573.7" y="67.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="576.7" y="78.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.21%)</title><rect x="576.2" y="83.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="579.2" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.21%)</title><rect x="576.2" y="67.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.2" y="78.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.21%)</title><rect x="578.7" y="83.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="581.7" y="94.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (28 samples, 5.94%)</title><rect x="581.2" y="131.0" width="70.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="584.2" y="142.0">JNIEnv_:..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.21%)</title><rect x="581.2" y="115.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.2" y="126.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (27 samples, 5.73%)</title><rect x="583.7" y="115.0" width="67.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="586.7" y="126.0">jni_Cal..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::JNI_ArgumentPusherVaArg(_jmethodID*, __va_list_tag*) (1 samples, 0.21%)</title><rect x="591.2" y="99.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="594.2" y="110.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.21%)</title><rect x="593.7" y="99.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.7" y="110.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.21%)</title><rect x="596.2" y="99.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="599.2" y="110.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.21%)</title><rect x="598.7" y="99.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="601.7" y="110.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (19 samples, 4.03%)</title><rect x="601.3" y="99.0" width="47.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="604.3" y="110.0">jni_..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (4 samples, 0.85%)</title><rect x="613.8" y="83.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="616.8" y="94.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (1 samples, 0.21%)</title><rect x="621.3" y="67.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="624.3" y="78.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.85%)</title><rect x="623.8" y="83.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.8" y="94.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.21%)</title><rect x="628.8" y="67.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="631.8" y="78.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.21%)</title><rect x="631.3" y="67.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.3" y="78.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.21%)</title><rect x="633.8" y="83.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="636.8" y="94.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.21%)</title><rect x="636.3" y="83.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="639.3" y="94.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.42%)</title><rect x="638.8" y="83.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="641.8" y="94.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (2 samples, 0.42%)</title><rect x="643.8" y="83.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="646.8" y="94.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.21%)</title><rect x="648.9" y="99.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="651.9" y="110.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.42%)</title><rect x="651.4" y="131.0" width="5.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="654.4" y="142.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.21%)</title><rect x="656.4" y="131.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="659.4" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (11 samples, 2.34%)</title><rect x="658.9" y="131.0" width="27.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="661.9" y="142.0">j..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.21%)</title><rect x="683.9" y="115.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.9" y="126.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.21%)</title><rect x="686.4" y="131.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="689.4" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.21%)</title><rect x="688.9" y="131.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="691.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.42%)</title><rect x="691.4" y="131.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="694.4" y="142.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.21%)</title><rect x="691.4" y="115.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="694.4" y="126.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.21%)</title><rect x="693.9" y="115.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="696.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (34 samples, 7.22%)</title><rect x="696.5" y="179.0" width="85.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.5" y="190.0">rocksdb::M..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (34 samples, 7.22%)</title><rect x="696.5" y="163.0" width="85.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="699.5" y="174.0">rocksdb::B..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (11 samples, 2.34%)</title><rect x="701.5" y="147.0" width="27.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="704.5" y="158.0">J..</text>
</g>
<g>
<title>jni_CallIntMethodV (11 samples, 2.34%)</title><rect x="701.5" y="131.0" width="27.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="704.5" y="142.0">j..</text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (8 samples, 1.70%)</title><rect x="706.5" y="115.0" width="20.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="709.5" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.21%)</title><rect x="709.0" y="99.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="712.0" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (1 samples, 0.21%)</title><rect x="709.0" y="83.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="712.0" y="94.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 1.27%)</title><rect x="711.5" y="99.0" width="15.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="714.5" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.21%)</title><rect x="711.5" y="83.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="714.5" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.85%)</title><rect x="714.0" y="83.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="717.0" y="94.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.21%)</title><rect x="721.5" y="67.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="724.5" y="78.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (1 samples, 0.21%)</title><rect x="724.0" y="83.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.0" y="94.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.21%)</title><rect x="726.5" y="115.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="729.5" y="126.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (16 samples, 3.40%)</title><rect x="729.0" y="147.0" width="40.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.0" y="158.0">JNI..</text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.21%)</title><rect x="729.0" y="131.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="732.0" y="142.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (15 samples, 3.18%)</title><rect x="731.5" y="131.0" width="37.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="734.5" y="142.0">jni..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.21%)</title><rect x="734.0" y="115.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="737.0" y="126.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (13 samples, 2.76%)</title><rect x="736.5" y="115.0" width="32.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="739.5" y="126.0">jn..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.42%)</title><rect x="741.5" y="99.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.5" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (1 samples, 0.21%)</title><rect x="744.1" y="83.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="747.1" y="94.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 1.49%)</title><rect x="746.6" y="99.0" width="17.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="749.6" y="110.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.21%)</title><rect x="756.6" y="83.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="759.6" y="94.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.21%)</title><rect x="759.1" y="83.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="762.1" y="94.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.21%)</title><rect x="761.6" y="83.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="764.6" y="94.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.21%)</title><rect x="764.1" y="99.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.1" y="110.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.21%)</title><rect x="766.6" y="99.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="769.6" y="110.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.21%)</title><rect x="769.1" y="147.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="772.1" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.42%)</title><rect x="771.6" y="147.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="774.6" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.42%)</title><rect x="776.6" y="147.0" width="5.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="779.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="781.6" y="179.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="784.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (3 samples, 0.64%)</title><rect x="784.1" y="195.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="787.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.21%)</title><rect x="791.7" y="195.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (1 samples, 0.21%)</title><rect x="791.7" y="179.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="794.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.21%)</title><rect x="794.2" y="211.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="797.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.21%)</title><rect x="796.7" y="243.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.21%)</title><rect x="799.2" y="275.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="802.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (1 samples, 0.21%)</title><rect x="801.7" y="291.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.21%)</title><rect x="804.2" y="291.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="807.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.21%)</title><rect x="804.2" y="275.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.21%)</title><rect x="806.7" y="291.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (2 samples, 0.42%)</title><rect x="809.2" y="307.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="812.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (2 samples, 0.42%)</title><rect x="814.2" y="307.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="817.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.21%)</title><rect x="819.2" y="307.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="822.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) [clone .plt] (1 samples, 0.21%)</title><rect x="821.7" y="307.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.21%)</title><rect x="824.2" y="307.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="827.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.42%)</title><rect x="826.7" y="307.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="829.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.42%)</title><rect x="831.7" y="323.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.85%)</title><rect x="836.8" y="323.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.64%)</title><rect x="836.8" y="307.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="839.8" y="318.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (2 samples, 0.42%)</title><rect x="836.8" y="291.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.8" y="302.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() [clone .plt] (1 samples, 0.21%)</title><rect x="841.8" y="291.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="844.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.21%)</title><rect x="844.3" y="307.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="847.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="846.8" y="323.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.8" y="334.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.21%)</title><rect x="849.3" y="323.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="852.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.21%)</title><rect x="851.8" y="339.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="854.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.42%)</title><rect x="854.3" y="339.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="857.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() [clone .plt] (1 samples, 0.21%)</title><rect x="859.3" y="339.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="862.3" y="350.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 1.06%)</title><rect x="861.8" y="403.0" width="12.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="864.8" y="414.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="861.8" y="387.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="864.8" y="398.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.21%)</title><rect x="861.8" y="371.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.8" y="382.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.21%)</title><rect x="861.8" y="355.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.8" y="366.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.21%)</title><rect x="864.3" y="387.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="867.3" y="398.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.21%)</title><rect x="866.8" y="387.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="869.8" y="398.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (2 samples, 0.42%)</title><rect x="869.3" y="387.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="872.3" y="398.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.21%)</title><rect x="874.3" y="403.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="877.3" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (61 samples, 12.95%)</title><rect x="876.8" y="403.0" width="152.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="879.8" y="414.0">org/rocksdb/util/By..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (61 samples, 12.95%)</title><rect x="876.8" y="387.0" width="152.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="879.8" y="398.0">org/rocksdb/util/By..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (57 samples, 12.10%)</title><rect x="876.8" y="371.0" width="142.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.8" y="382.0">org/rocksdb/Abstra..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.21%)</title><rect x="876.8" y="355.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="879.8" y="366.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (56 samples, 11.89%)</title><rect x="879.3" y="355.0" width="140.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="882.3" y="366.0">org/rocksdb/Slice...</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (56 samples, 11.89%)</title><rect x="879.3" y="339.0" width="140.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="882.3" y="350.0">org/rocksdb/Slice...</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (50 samples, 10.62%)</title><rect x="891.9" y="323.0" width="125.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="894.9" y="334.0">Java_org_rocksd..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.21%)</title><rect x="891.9" y="307.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.9" y="318.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.42%)</title><rect x="894.4" y="307.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="897.4" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.21%)</title><rect x="899.4" y="307.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="902.4" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.21%)</title><rect x="901.9" y="307.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="904.9" y="318.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.21%)</title><rect x="904.4" y="307.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="907.4" y="318.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 1.27%)</title><rect x="906.9" y="307.0" width="15.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="909.9" y="318.0"></text>
</g>
<g>
<title>jni_NewByteArray (26 samples, 5.52%)</title><rect x="921.9" y="307.0" width="65.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="924.9" y="318.0">jni_New..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.64%)</title><rect x="929.4" y="291.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.4" y="302.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.21%)</title><rect x="937.0" y="291.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="940.0" y="302.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.21%)</title><rect x="939.5" y="291.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.5" y="302.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.85%)</title><rect x="942.0" y="291.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="945.0" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (14 samples, 2.97%)</title><rect x="952.0" y="291.0" width="35.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="955.0" y="302.0">Typ..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 1.70%)</title><rect x="964.5" y="275.0" width="20.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.5" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 1.27%)</title><rect x="969.5" y="259.0" width="15.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.5" y="270.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.21%)</title><rect x="969.5" y="243.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.5" y="254.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.21%)</title><rect x="972.0" y="243.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.0" y="254.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.85%)</title><rect x="974.5" y="243.0" width="10.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="977.5" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.21%)</title><rect x="984.6" y="275.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.6" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (12 samples, 2.55%)</title><rect x="987.1" y="307.0" width="30.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="990.1" y="318.0">jn..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.85%)</title><rect x="1002.1" y="291.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.1" y="302.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.42%)</title><rect x="1012.1" y="291.0" width="5.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1015.1" y="302.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.21%)</title><rect x="1017.1" y="323.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1020.1" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (4 samples, 0.85%)</title><rect x="1019.6" y="371.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1022.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.85%)</title><rect x="1019.6" y="355.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1022.6" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.85%)</title><rect x="1019.6" y="339.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1022.6" y="350.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.21%)</title><rect x="1027.2" y="323.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1030.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (2 samples, 0.42%)</title><rect x="1029.7" y="435.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1032.7" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.42%)</title><rect x="1029.7" y="419.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.42%)</title><rect x="1029.7" y="403.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1032.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.42%)</title><rect x="1029.7" y="387.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1032.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.42%)</title><rect x="1029.7" y="371.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.21%)</title><rect x="1029.7" y="355.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.21%)</title><rect x="1029.7" y="339.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1032.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.21%)</title><rect x="1032.2" y="355.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1035.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.21%)</title><rect x="1032.2" y="339.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1035.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ZeroResponse.&lt;init&gt; (1 samples, 0.21%)</title><rect x="1034.7" y="451.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1037.7" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.21%)</title><rect x="1034.7" y="435.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1037.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.42%)</title><rect x="1037.2" y="483.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1040.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.42%)</title><rect x="1037.2" y="467.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1040.2" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.21%)</title><rect x="1037.2" y="451.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1040.2" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.21%)</title><rect x="1039.7" y="451.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1042.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.21%)</title><rect x="1039.7" y="435.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1042.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.21%)</title><rect x="1039.7" y="419.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1042.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.85%)</title><rect x="1042.2" y="515.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1045.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.21%)</title><rect x="1042.2" y="499.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.21%)</title><rect x="1042.2" y="483.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.21%)</title><rect x="1042.2" y="467.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1045.2" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.21%)</title><rect x="1042.2" y="451.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.2" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.64%)</title><rect x="1044.7" y="499.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.7" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.21%)</title><rect x="1049.7" y="483.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1052.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.21%)</title><rect x="1052.2" y="515.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1055.2" y="526.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.21%)</title><rect x="1052.2" y="499.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1055.2" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.21%)</title><rect x="1052.2" y="483.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1055.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 1.06%)</title><rect x="1054.7" y="515.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1057.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.85%)</title><rect x="1054.7" y="499.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1057.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.85%)</title><rect x="1054.7" y="483.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.21%)</title><rect x="1064.7" y="499.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1067.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.21%)</title><rect x="1064.7" y="483.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1067.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.21%)</title><rect x="1064.7" y="467.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.7" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.21%)</title><rect x="1064.7" y="451.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.7" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.21%)</title><rect x="1064.7" y="435.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.7" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.21%)</title><rect x="1064.7" y="419.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.7" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.21%)</title><rect x="1064.7" y="403.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.21%)</title><rect x="1064.7" y="387.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.7" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.21%)</title><rect x="1064.7" y="371.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.7" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.21%)</title><rect x="1064.7" y="355.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.7" y="366.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.21%)</title><rect x="1064.7" y="339.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.21%)</title><rect x="1064.7" y="323.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.7" y="334.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.21%)</title><rect x="1064.7" y="307.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.7" y="318.0"></text>
</g>
<g>
<title>HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long) (1 samples, 0.21%)</title><rect x="1064.7" y="291.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.7" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 2.34%)</title><rect x="1067.2" y="515.0" width="27.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.2" y="526.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.42%)</title><rect x="1089.8" y="499.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1092.8" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (31 samples, 6.58%)</title><rect x="1094.8" y="531.0" width="77.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.8" y="542.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (30 samples, 6.37%)</title><rect x="1097.3" y="515.0" width="75.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1100.3" y="526.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (6 samples, 1.27%)</title><rect x="1097.3" y="499.0" width="15.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1100.3" y="510.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.21%)</title><rect x="1099.8" y="483.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.8" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.21%)</title><rect x="1102.3" y="483.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.3" y="494.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.64%)</title><rect x="1104.8" y="483.0" width="7.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1107.8" y="494.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.21%)</title><rect x="1112.3" y="499.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1115.3" y="510.0"></text>
</g>
<g>
<title>__recv (22 samples, 4.67%)</title><rect x="1114.8" y="499.0" width="55.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1117.8" y="510.0">__recv</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.21%)</title><rect x="1170.0" y="499.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1173.0" y="510.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (1 samples, 0.21%)</title><rect x="1172.5" y="579.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1175.5" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.21%)</title><rect x="1172.5" y="563.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1175.5" y="574.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.21%)</title><rect x="1172.5" y="547.0" width="2.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1175.5" y="558.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.21%)</title><rect x="1172.5" y="531.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="1172.5" y="515.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="1172.5" y="499.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="1172.5" y="483.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.21%)</title><rect x="1172.5" y="467.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.21%)</title><rect x="1172.5" y="451.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.21%)</title><rect x="1172.5" y="435.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.21%)</title><rect x="1172.5" y="419.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.21%)</title><rect x="1172.5" y="403.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.21%)</title><rect x="1172.5" y="387.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.21%)</title><rect x="1172.5" y="371.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.21%)</title><rect x="1172.5" y="355.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="366.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.21%)</title><rect x="1172.5" y="339.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="350.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (1 samples, 0.21%)</title><rect x="1172.5" y="323.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.5" y="334.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3240653361343951297.so (1 samples, 0.21%)</title><rect x="1172.5" y="307.0" width="2.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1175.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="1172.5" y="291.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.21%)</title><rect x="1172.5" y="275.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="286.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.21%)</title><rect x="1172.5" y="259.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="270.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.21%)</title><rect x="1172.5" y="243.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.5" y="254.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.21%)</title><rect x="1172.5" y="227.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.5" y="238.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.21%)</title><rect x="1172.5" y="211.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="222.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.21%)</title><rect x="1172.5" y="195.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="206.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.21%)</title><rect x="1172.5" y="179.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.5" y="190.0"></text>
</g>
<g>
<title>start_thread (6 samples, 1.27%)</title><rect x="1175.0" y="579.0" width="15.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1178.0" y="590.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 1.27%)</title><rect x="1175.0" y="563.0" width="15.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1178.0" y="574.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 1.27%)</title><rect x="1175.0" y="547.0" width="15.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (6 samples, 1.27%)</title><rect x="1175.0" y="531.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="542.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (6 samples, 1.27%)</title><rect x="1175.0" y="515.0" width="15.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="526.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 1.27%)</title><rect x="1175.0" y="499.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="510.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 1.27%)</title><rect x="1175.0" y="483.0" width="15.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="494.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (6 samples, 1.27%)</title><rect x="1175.0" y="467.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="478.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.64%)</title><rect x="1175.0" y="451.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.21%)</title><rect x="1175.0" y="435.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.21%)</title><rect x="1175.0" y="419.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.21%)</title><rect x="1175.0" y="403.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="414.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.21%)</title><rect x="1175.0" y="387.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="398.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.21%)</title><rect x="1175.0" y="371.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 0.42%)</title><rect x="1177.5" y="435.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.21%)</title><rect x="1177.5" y="419.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.21%)</title><rect x="1180.0" y="419.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="430.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.64%)</title><rect x="1182.5" y="451.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.21%)</title><rect x="1182.5" y="435.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.21%)</title><rect x="1182.5" y="419.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.21%)</title><rect x="1182.5" y="403.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.21%)</title><rect x="1182.5" y="387.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.21%)</title><rect x="1182.5" y="371.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.21%)</title><rect x="1182.5" y="355.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.42%)</title><rect x="1185.0" y="435.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.42%)</title><rect x="1185.0" y="419.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.0" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.21%)</title><rect x="1185.0" y="403.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.21%)</title><rect x="1185.0" y="387.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="398.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.21%)</title><rect x="1185.0" y="371.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="382.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.21%)</title><rect x="1187.5" y="403.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.5" y="414.0"></text>
</g>
</g>
</svg>
