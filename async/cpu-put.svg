<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="613"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="613"> </text>
<g id="frames">
<g>
<title>all (406 samples, 100.00%)</title><rect x="10.0" y="579.0" width="1180.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="590.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (11 samples, 2.71%)</title><rect x="10.0" y="563.0" width="32.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="574.0">Sh..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (11 samples, 2.71%)</title><rect x="10.0" y="547.0" width="32.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="558.0">Ob..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (11 samples, 2.71%)</title><rect x="10.0" y="531.0" width="32.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="542.0">Ob..</text>
</g>
<g>
<title>SpinPause (5 samples, 1.23%)</title><rect x="12.9" y="515.0" width="14.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="15.9" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.49%)</title><rect x="27.4" y="515.0" width="5.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="30.4" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.25%)</title><rect x="33.3" y="515.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="36.3" y="526.0"></text>
</g>
<g>
<title>pthread_cond_wait@plt (1 samples, 0.25%)</title><rect x="36.2" y="515.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="39.2" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.25%)</title><rect x="39.1" y="515.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="42.1" y="526.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.25%)</title><rect x="42.0" y="563.0" width="2.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="45.0" y="574.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.25%)</title><rect x="42.0" y="547.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="45.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.74%)</title><rect x="44.9" y="563.0" width="8.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="47.9" y="574.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.25%)</title><rect x="44.9" y="547.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="47.9" y="558.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.49%)</title><rect x="47.8" y="547.0" width="5.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="50.8" y="558.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.99%)</title><rect x="53.6" y="563.0" width="11.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="56.6" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.25%)</title><rect x="53.6" y="547.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="56.6" y="558.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.25%)</title><rect x="53.6" y="531.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="56.6" y="542.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.74%)</title><rect x="56.5" y="547.0" width="8.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="59.5" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="65.2" y="563.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="68.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (258 samples, 63.55%)</title><rect x="68.1" y="563.0" width="749.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.1" y="574.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (258 samples, 63.55%)</title><rect x="68.1" y="547.0" width="749.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.1" y="558.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (258 samples, 63.55%)</title><rect x="68.1" y="531.0" width="749.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.1" y="542.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.25%)</title><rect x="68.1" y="515.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.25%)</title><rect x="68.1" y="499.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.25%)</title><rect x="68.1" y="483.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$70/502171037.run (1 samples, 0.25%)</title><rect x="68.1" y="467.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (75 samples, 18.47%)</title><rect x="71.0" y="515.0" width="218.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.0" y="526.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (74 samples, 18.23%)</title><rect x="71.0" y="499.0" width="215.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.0" y="510.0">java/util/concurrent/ArrayBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (67 samples, 16.50%)</title><rect x="71.0" y="483.0" width="194.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.0" y="494.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.25%)</title><rect x="76.8" y="467.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.25%)</title><rect x="76.8" y="451.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.74%)</title><rect x="79.8" y="467.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.74%)</title><rect x="79.8" y="451.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.25%)</title><rect x="85.6" y="435.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (61 samples, 15.02%)</title><rect x="88.5" y="467.0" width="177.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.5" y="478.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.25%)</title><rect x="88.5" y="451.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (60 samples, 14.78%)</title><rect x="91.4" y="451.0" width="174.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.4" y="462.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.74%)</title><rect x="91.4" y="435.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="94.4" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park (25 samples, 6.16%)</title><rect x="100.1" y="435.0" width="72.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="103.1" y="446.0">Unsafe_P..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.25%)</title><rect x="111.7" y="419.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.7" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 1.23%)</title><rect x="114.6" y="419.0" width="14.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="117.6" y="430.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.25%)</title><rect x="123.3" y="403.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="126.3" y="414.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.25%)</title><rect x="126.3" y="403.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="129.3" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.25%)</title><rect x="129.2" y="419.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="132.2" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.25%)</title><rect x="132.1" y="419.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="135.1" y="430.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.25%)</title><rect x="135.0" y="419.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="138.0" y="430.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.25%)</title><rect x="137.9" y="419.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="140.9" y="430.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (10 samples, 2.46%)</title><rect x="140.8" y="419.0" width="29.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="143.8" y="430.0">__..</text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.25%)</title><rect x="169.9" y="419.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="172.9" y="430.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 7.14%)</title><rect x="172.8" y="435.0" width="84.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="175.8" y="446.0">[unknown]</text>
</g>
<g>
<title>__condvar_dec_grefs (3 samples, 0.74%)</title><rect x="172.8" y="419.0" width="8.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="175.8" y="430.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.99%)</title><rect x="181.5" y="419.0" width="11.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="184.5" y="430.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (22 samples, 5.42%)</title><rect x="193.1" y="419.0" width="63.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="196.1" y="430.0">pthread..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.74%)</title><rect x="257.0" y="435.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="260.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 1.23%)</title><rect x="265.8" y="483.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="268.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.99%)</title><rect x="265.8" y="467.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.25%)</title><rect x="265.8" y="451.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.25%)</title><rect x="265.8" y="435.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.25%)</title><rect x="265.8" y="419.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.8" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.25%)</title><rect x="265.8" y="403.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.8" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.25%)</title><rect x="265.8" y="387.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.8" y="398.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.25%)</title><rect x="265.8" y="371.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.74%)</title><rect x="268.7" y="451.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.74%)</title><rect x="268.7" y="435.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.25%)</title><rect x="277.4" y="467.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.49%)</title><rect x="280.3" y="483.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.49%)</title><rect x="280.3" y="467.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.49%)</title><rect x="280.3" y="451.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.49%)</title><rect x="280.3" y="435.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.49%)</title><rect x="280.3" y="419.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.3" y="430.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.25%)</title><rect x="280.3" y="403.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="283.3" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.25%)</title><rect x="280.3" y="387.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.3" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.25%)</title><rect x="283.2" y="403.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="286.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.25%)</title><rect x="286.1" y="499.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$70/502171037.run (84 samples, 20.69%)</title><rect x="289.0" y="515.0" width="244.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.0" y="526.0">ru/mail/polis/service/mariarheon..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$passOn$1 (84 samples, 20.69%)</title><rect x="289.0" y="499.0" width="244.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.0" y="510.0">ru/mail/polis/service/mariarheon..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOnInternal (84 samples, 20.69%)</title><rect x="289.0" y="483.0" width="244.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.0" y="494.0">ru/mail/polis/service/mariarheon..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 3.69%)</title><rect x="289.0" y="467.0" width="43.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.0" y="478.0">one/..</text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.25%)</title><rect x="291.9" y="451.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="294.9" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.99%)</title><rect x="294.8" y="451.0" width="11.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="297.8" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.49%)</title><rect x="294.8" y="435.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="297.8" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.25%)</title><rect x="297.7" y="419.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="300.7" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.25%)</title><rect x="300.6" y="435.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="303.6" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.25%)</title><rect x="300.6" y="419.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="303.6" y="430.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.25%)</title><rect x="303.5" y="435.0" width="3.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="306.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 1.48%)</title><rect x="306.5" y="451.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.5" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 1.48%)</title><rect x="306.5" y="435.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.5" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 1.48%)</title><rect x="306.5" y="419.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 1.48%)</title><rect x="306.5" y="403.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="309.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 1.48%)</title><rect x="306.5" y="387.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.5" y="398.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.25%)</title><rect x="306.5" y="371.0" width="2.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="309.5" y="382.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.25%)</title><rect x="306.5" y="355.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="309.5" y="366.0"></text>
</g>
<g>
<title>__libc_send (2 samples, 0.49%)</title><rect x="309.4" y="371.0" width="5.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="312.4" y="382.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.74%)</title><rect x="315.2" y="371.0" width="8.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="318.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.49%)</title><rect x="323.9" y="451.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.49%)</title><rect x="323.9" y="435.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.9" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.49%)</title><rect x="323.9" y="419.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.9" y="430.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.25%)</title><rect x="329.7" y="451.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.passOn (69 samples, 17.00%)</title><rect x="332.6" y="467.0" width="200.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="335.6" y="478.0">ru/mail/polis/service/mari..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 2.46%)</title><rect x="332.6" y="451.0" width="29.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="335.6" y="462.0">Sh..</text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.25%)</title><rect x="332.6" y="435.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="335.6" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 1.72%)</title><rect x="335.5" y="435.0" width="20.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="338.5" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.25%)</title><rect x="338.4" y="419.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="341.4" y="430.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 1.23%)</title><rect x="341.3" y="419.0" width="14.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="344.3" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.25%)</title><rect x="355.9" y="435.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="358.9" y="446.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.25%)</title><rect x="358.8" y="435.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="361.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (59 samples, 14.53%)</title><rect x="361.7" y="451.0" width="171.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.7" y="462.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (59 samples, 14.53%)</title><rect x="361.7" y="435.0" width="171.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.7" y="446.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (20 samples, 4.93%)</title><rect x="367.5" y="419.0" width="58.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.5" y="430.0">one/ni..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.25%)</title><rect x="373.3" y="403.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="376.3" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.25%)</title><rect x="373.3" y="387.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="376.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.25%)</title><rect x="373.3" y="371.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="376.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.25%)</title><rect x="373.3" y="355.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="376.3" y="366.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.25%)</title><rect x="373.3" y="339.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="376.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (17 samples, 4.19%)</title><rect x="376.2" y="403.0" width="49.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.2" y="414.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 1.23%)</title><rect x="376.2" y="387.0" width="14.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="379.2" y="398.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.25%)</title><rect x="376.2" y="371.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="379.2" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.25%)</title><rect x="379.1" y="371.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="382.1" y="382.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.25%)</title><rect x="382.0" y="371.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="385.0" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.49%)</title><rect x="384.9" y="371.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="387.9" y="382.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.25%)</title><rect x="387.8" y="355.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="390.8" y="366.0"></text>
</g>
<g>
<title>__recv (11 samples, 2.71%)</title><rect x="390.7" y="387.0" width="32.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="393.7" y="398.0">__..</text>
</g>
<g>
<title>recv@plt (1 samples, 0.25%)</title><rect x="422.7" y="387.0" width="2.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="425.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (10 samples, 2.46%)</title><rect x="425.6" y="419.0" width="29.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="428.6" y="430.0">on..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.25%)</title><rect x="425.6" y="403.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.6" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.25%)</title><rect x="425.6" y="387.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="428.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.25%)</title><rect x="425.6" y="371.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.25%)</title><rect x="425.6" y="355.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.6" y="366.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.25%)</title><rect x="425.6" y="339.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (9 samples, 2.22%)</title><rect x="428.5" y="403.0" width="26.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="431.5" y="414.0">o..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="434.3" y="387.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="437.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 1.48%)</title><rect x="437.2" y="387.0" width="17.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="440.2" y="398.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.25%)</title><rect x="440.1" y="371.0" width="3.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="443.1" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.74%)</title><rect x="443.1" y="371.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.1" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="451.8" y="371.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="454.8" y="382.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.25%)</title><rect x="451.8" y="355.0" width="2.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="454.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (7 samples, 1.72%)</title><rect x="454.7" y="419.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.7" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="463.4" y="403.0" width="2.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="466.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.74%)</title><rect x="466.3" y="403.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.74%)</title><rect x="466.3" y="387.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.74%)</title><rect x="466.3" y="371.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.3" y="382.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.25%)</title><rect x="469.2" y="355.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="472.2" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="472.1" y="355.0" width="2.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="475.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (9 samples, 2.22%)</title><rect x="475.0" y="419.0" width="26.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.0" y="430.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.49%)</title><rect x="480.8" y="403.0" width="5.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="483.8" y="414.0"></text>
</g>
<g>
<title>__setsockopt (5 samples, 1.23%)</title><rect x="486.7" y="403.0" width="14.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="489.7" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (11 samples, 2.71%)</title><rect x="501.2" y="419.0" width="32.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="504.2" y="430.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (6 samples, 1.48%)</title><rect x="504.1" y="403.0" width="17.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="507.1" y="414.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.74%)</title><rect x="504.1" y="387.0" width="8.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="507.1" y="398.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.25%)</title><rect x="512.8" y="387.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="515.8" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.49%)</title><rect x="515.7" y="387.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="518.7" y="398.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.25%)</title><rect x="518.6" y="371.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="521.6" y="382.0"></text>
</g>
<g>
<title>__libc_send (3 samples, 0.74%)</title><rect x="521.5" y="403.0" width="8.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="524.5" y="414.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.25%)</title><rect x="530.2" y="403.0" width="3.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="533.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$73/1659544978.run (98 samples, 24.14%)</title><rect x="533.2" y="515.0" width="284.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="536.2" y="526.0">ru/mail/polis/service/mariarheon/Async..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$handleEntityRequest$0 (98 samples, 24.14%)</title><rect x="533.2" y="499.0" width="284.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="536.2" y="510.0">ru/mail/polis/service/mariarheon/Async..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.put (98 samples, 24.14%)</title><rect x="533.2" y="483.0" width="284.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="536.2" y="494.0">ru/mail/polis/service/mariarheon/Async..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 3.69%)</title><rect x="533.2" y="467.0" width="43.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="536.2" y="478.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.25%)</title><rect x="536.1" y="451.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="539.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.25%)</title><rect x="536.1" y="435.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="539.1" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.25%)</title><rect x="536.1" y="419.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (12 samples, 2.96%)</title><rect x="539.0" y="451.0" width="34.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.0" y="462.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.99%)</title><rect x="539.0" y="435.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.0" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.74%)</title><rect x="541.9" y="419.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.74%)</title><rect x="541.9" y="403.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="544.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.74%)</title><rect x="541.9" y="387.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="544.9" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="547.7" y="371.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="550.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 1.97%)</title><rect x="550.6" y="435.0" width="23.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="553.6" y="446.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 1.97%)</title><rect x="550.6" y="419.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="553.6" y="430.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 1.72%)</title><rect x="553.5" y="403.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (7 samples, 1.72%)</title><rect x="553.5" y="387.0" width="20.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.5" y="398.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.49%)</title><rect x="556.4" y="371.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="559.4" y="382.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.25%)</title><rect x="556.4" y="355.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="559.4" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.25%)</title><rect x="559.3" y="355.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="562.3" y="366.0"></text>
</g>
<g>
<title>__libc_send (3 samples, 0.74%)</title><rect x="562.2" y="371.0" width="8.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="565.2" y="382.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.25%)</title><rect x="570.9" y="371.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="573.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.25%)</title><rect x="573.8" y="451.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="576.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (4 samples, 0.99%)</title><rect x="576.7" y="467.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="579.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.99%)</title><rect x="576.7" y="451.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.99%)</title><rect x="576.7" y="435.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="579.7" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="576.7" y="419.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="579.7" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="576.7" y="403.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.7" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.25%)</title><rect x="576.7" y="387.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="579.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.25%)</title><rect x="576.7" y="371.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="579.7" y="382.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.25%)</title><rect x="576.7" y="355.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="579.7" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.25%)</title><rect x="576.7" y="339.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.7" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.25%)</title><rect x="576.7" y="323.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="579.7" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.25%)</title><rect x="576.7" y="307.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="579.7" y="318.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.25%)</title><rect x="576.7" y="291.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="579.7" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.25%)</title><rect x="576.7" y="275.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="579.7" y="286.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.25%)</title><rect x="576.7" y="259.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="579.7" y="270.0"></text>
</g>
<g>
<title>HeapRegionType::get_trace_type() (1 samples, 0.25%)</title><rect x="576.7" y="243.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.74%)</title><rect x="579.7" y="419.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.74%)</title><rect x="579.7" y="403.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.7" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.74%)</title><rect x="579.7" y="387.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.74%)</title><rect x="579.7" y="371.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.74%)</title><rect x="579.7" y="355.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.7" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.49%)</title><rect x="582.6" y="339.0" width="5.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="585.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.upsert (79 samples, 19.46%)</title><rect x="588.4" y="467.0" width="229.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.4" y="478.0">ru/mail/polis/dao/mariarheon/D..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (78 samples, 19.21%)</title><rect x="588.4" y="451.0" width="226.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="591.4" y="462.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (78 samples, 19.21%)</title><rect x="588.4" y="435.0" width="226.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.4" y="446.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (76 samples, 18.72%)</title><rect x="588.4" y="419.0" width="220.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="591.4" y="430.0">Java_org_rocksdb_RocksDB_put_..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.25%)</title><rect x="588.4" y="403.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="591.4" y="414.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.25%)</title><rect x="591.3" y="403.0" width="2.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="594.3" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.25%)</title><rect x="594.2" y="403.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="597.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.49%)</title><rect x="597.1" y="403.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.1" y="414.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (71 samples, 17.49%)</title><rect x="602.9" y="403.0" width="206.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="605.9" y="414.0">rocksdb_put_helper(JNIEnv_*..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.25%)</title><rect x="602.9" y="387.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="605.9" y="398.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.25%)</title><rect x="605.8" y="387.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="608.8" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.74%)</title><rect x="608.7" y="387.0" width="8.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="611.7" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.49%)</title><rect x="608.7" y="371.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="611.7" y="382.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.25%)</title><rect x="614.5" y="371.0" width="2.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="617.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (66 samples, 16.26%)</title><rect x="617.4" y="387.0" width="191.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="620.4" y="398.0">rocksdb::DB::Put(rocksdb:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.25%)</title><rect x="617.4" y="371.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="620.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (65 samples, 16.01%)</title><rect x="620.3" y="371.0" width="189.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.3" y="382.0">rocksdb::DBImpl::Put(roc..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (60 samples, 14.78%)</title><rect x="620.3" y="355.0" width="174.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="623.3" y="366.0">rocksdb::DB::Put(rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (50 samples, 12.32%)</title><rect x="620.3" y="339.0" width="145.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.3" y="350.0">rocksdb::DBImpl::W..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.25%)</title><rect x="620.3" y="323.0" width="3.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="623.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.25%)</title><rect x="623.3" y="323.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="626.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (45 samples, 11.08%)</title><rect x="626.2" y="323.0" width="130.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="629.2" y="334.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.49%)</title><rect x="626.2" y="307.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="629.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (19 samples, 4.68%)</title><rect x="632.0" y="307.0" width="55.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.0" y="318.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (18 samples, 4.43%)</title><rect x="634.9" y="291.0" width="52.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="637.9" y="302.0">rocks..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.25%)</title><rect x="634.9" y="275.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="637.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (17 samples, 4.19%)</title><rect x="637.8" y="275.0" width="49.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.8" y="286.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (5 samples, 1.23%)</title><rect x="640.7" y="259.0" width="14.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="643.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (7 samples, 1.72%)</title><rect x="655.2" y="259.0" width="20.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="658.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.25%)</title><rect x="655.2" y="243.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="658.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (6 samples, 1.48%)</title><rect x="658.1" y="243.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="661.1" y="254.0"></text>
</g>
<g>
<title>__libc_write (4 samples, 0.99%)</title><rect x="661.0" y="227.0" width="11.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="664.0" y="238.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.25%)</title><rect x="672.7" y="227.0" width="2.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="675.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (4 samples, 0.99%)</title><rect x="675.6" y="259.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="678.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.49%)</title><rect x="681.4" y="243.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="684.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.25%)</title><rect x="687.2" y="307.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="690.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (19 samples, 4.68%)</title><rect x="690.1" y="307.0" width="55.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="693.1" y="318.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (18 samples, 4.43%)</title><rect x="693.0" y="291.0" width="52.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="696.0" y="302.0">rocks..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.25%)</title><rect x="693.0" y="275.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="696.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (17 samples, 4.19%)</title><rect x="695.9" y="275.0" width="49.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="698.9" y="286.0">rocks..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (15 samples, 3.69%)</title><rect x="695.9" y="259.0" width="43.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="698.9" y="270.0">rock..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.25%)</title><rect x="695.9" y="243.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="698.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (14 samples, 3.45%)</title><rect x="698.8" y="243.0" width="40.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="701.8" y="254.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (1 samples, 0.25%)</title><rect x="698.8" y="227.0" width="2.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="701.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.25%)</title><rect x="701.7" y="227.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="704.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (12 samples, 2.96%)</title><rect x="704.6" y="227.0" width="34.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="707.6" y="238.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (1 samples, 0.25%)</title><rect x="704.6" y="211.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="707.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.25%)</title><rect x="704.6" y="195.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="707.6" y="206.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (11 samples, 2.71%)</title><rect x="707.5" y="211.0" width="32.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="710.5" y="222.0">bo..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (11 samples, 2.71%)</title><rect x="707.5" y="195.0" width="32.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="710.5" y="206.0">/t..</text>
</g>
<g>
<title>/tmp/librocksdbjni2743432471942708747.so (5 samples, 1.23%)</title><rect x="719.2" y="179.0" width="14.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="722.2" y="190.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.25%)</title><rect x="719.2" y="163.0" width="2.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="722.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.99%)</title><rect x="722.1" y="163.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="725.1" y="174.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (3 samples, 0.74%)</title><rect x="725.0" y="147.0" width="8.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="728.0" y="158.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.25%)</title><rect x="733.7" y="179.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="736.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.25%)</title><rect x="736.6" y="179.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="739.6" y="190.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.25%)</title><rect x="736.6" y="163.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="739.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.25%)</title><rect x="739.5" y="259.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="742.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.25%)</title><rect x="742.4" y="259.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="745.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (2 samples, 0.49%)</title><rect x="745.3" y="307.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="748.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.25%)</title><rect x="751.1" y="307.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="754.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) [clone .plt] (1 samples, 0.25%)</title><rect x="754.0" y="307.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="757.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.25%)</title><rect x="756.9" y="323.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) [clone .plt] (1 samples, 0.25%)</title><rect x="759.9" y="323.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="762.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.25%)</title><rect x="762.8" y="323.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="765.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.25%)</title><rect x="765.7" y="339.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="768.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 1.23%)</title><rect x="768.6" y="339.0" width="14.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="771.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.25%)</title><rect x="768.6" y="323.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="771.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.25%)</title><rect x="771.5" y="323.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const [clone .plt] (1 samples, 0.25%)</title><rect x="774.4" y="323.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="777.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.25%)</title><rect x="777.3" y="323.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="780.3" y="334.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.25%)</title><rect x="780.2" y="323.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="783.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.25%)</title><rect x="783.1" y="339.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="786.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.25%)</title><rect x="786.0" y="339.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="789.0" y="350.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.25%)</title><rect x="788.9" y="339.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="791.9" y="350.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.25%)</title><rect x="791.8" y="339.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.25%)</title><rect x="794.7" y="355.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="797.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.25%)</title><rect x="797.6" y="355.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="800.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.49%)</title><rect x="800.5" y="355.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="803.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.25%)</title><rect x="806.4" y="355.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.4" y="366.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.49%)</title><rect x="809.3" y="419.0" width="5.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="812.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (1 samples, 0.25%)</title><rect x="815.1" y="451.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="818.1" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.25%)</title><rect x="815.1" y="435.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="815.1" y="419.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="818.1" y="430.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.25%)</title><rect x="815.1" y="403.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="818.1" y="414.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (123 samples, 30.30%)</title><rect x="818.0" y="563.0" width="357.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.0" y="574.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (1 samples, 0.25%)</title><rect x="832.5" y="547.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="835.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.25%)</title><rect x="832.5" y="531.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="835.5" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="832.5" y="515.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="835.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.25%)</title><rect x="835.4" y="547.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.25%)</title><rect x="838.3" y="547.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="841.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (27 samples, 6.65%)</title><rect x="841.2" y="547.0" width="78.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.2" y="558.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.49%)</title><rect x="850.0" y="531.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (22 samples, 5.42%)</title><rect x="855.8" y="531.0" width="63.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="858.8" y="542.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.25%)</title><rect x="858.7" y="515.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="861.7" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.74%)</title><rect x="861.6" y="515.0" width="8.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="864.6" y="526.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.25%)</title><rect x="867.4" y="499.0" width="2.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="870.4" y="510.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.25%)</title><rect x="870.3" y="515.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="873.3" y="526.0"></text>
</g>
<g>
<title>epoll_wait (16 samples, 3.94%)</title><rect x="873.2" y="515.0" width="46.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="876.2" y="526.0">epol..</text>
</g>
<g>
<title>one/nio/net/Session.process (88 samples, 21.67%)</title><rect x="919.7" y="547.0" width="255.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.7" y="558.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (88 samples, 21.67%)</title><rect x="919.7" y="531.0" width="255.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.7" y="542.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (64 samples, 15.76%)</title><rect x="922.6" y="515.0" width="186.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="925.6" y="526.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="925.5" y="499.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="928.5" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (48 samples, 11.82%)</title><rect x="928.4" y="499.0" width="139.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="931.4" y="510.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (48 samples, 11.82%)</title><rect x="928.4" y="483.0" width="139.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.4" y="494.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler1_handleEntityRequest.handleRequest (46 samples, 11.33%)</title><rect x="928.4" y="467.0" width="133.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.4" y="478.0">RequestHandler1_h..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 1.48%)</title><rect x="937.1" y="451.0" width="17.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="940.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.99%)</title><rect x="943.0" y="435.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="946.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.25%)</title><rect x="945.9" y="419.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="948.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.25%)</title><rect x="945.9" y="403.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.25%)</title><rect x="945.9" y="387.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.9" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="948.8" y="419.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="951.8" y="430.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.25%)</title><rect x="951.7" y="419.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="954.7" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.25%)</title><rect x="951.7" y="403.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="954.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.25%)</title><rect x="951.7" y="387.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.25%)</title><rect x="951.7" y="371.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="954.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.handleEntityRequest (37 samples, 9.11%)</title><rect x="954.6" y="451.0" width="107.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="957.6" y="462.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 3.45%)</title><rect x="957.5" y="435.0" width="40.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="960.5" y="446.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (14 samples, 3.45%)</title><rect x="957.5" y="419.0" width="40.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="960.5" y="430.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.25%)</title><rect x="957.5" y="403.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.25%)</title><rect x="957.5" y="387.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="960.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.25%)</title><rect x="957.5" y="371.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="960.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.25%)</title><rect x="957.5" y="355.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="960.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.25%)</title><rect x="957.5" y="339.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 3.20%)</title><rect x="960.4" y="403.0" width="37.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="963.4" y="414.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 3.20%)</title><rect x="960.4" y="387.0" width="37.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="963.4" y="398.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 3.20%)</title><rect x="960.4" y="371.0" width="37.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="963.4" y="382.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 3.20%)</title><rect x="960.4" y="355.0" width="37.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="963.4" y="366.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 3.20%)</title><rect x="960.4" y="339.0" width="37.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="963.4" y="350.0">jdk..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.25%)</title><rect x="963.3" y="323.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.3" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 1.23%)</title><rect x="966.2" y="323.0" width="14.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="969.2" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.25%)</title><rect x="966.2" y="307.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.2" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.25%)</title><rect x="969.1" y="307.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.1" y="318.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.74%)</title><rect x="972.0" y="307.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.0" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 1.48%)</title><rect x="980.7" y="323.0" width="17.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="983.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOn (18 samples, 4.43%)</title><rect x="998.2" y="435.0" width="52.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1001.2" y="446.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (18 samples, 4.43%)</title><rect x="998.2" y="419.0" width="52.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1001.2" y="430.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (16 samples, 3.94%)</title><rect x="1004.0" y="403.0" width="46.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1007.0" y="414.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.25%)</title><rect x="1004.0" y="387.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1007.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.74%)</title><rect x="1006.9" y="387.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1009.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.74%)</title><rect x="1006.9" y="371.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.25%)</title><rect x="1006.9" y="355.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1009.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.25%)</title><rect x="1006.9" y="339.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1009.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.25%)</title><rect x="1006.9" y="323.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1009.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.25%)</title><rect x="1006.9" y="307.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.9" y="318.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.25%)</title><rect x="1006.9" y="291.0" width="2.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1009.9" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.25%)</title><rect x="1006.9" y="275.0" width="2.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1009.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.49%)</title><rect x="1009.8" y="355.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1012.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.49%)</title><rect x="1009.8" y="339.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1012.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.25%)</title><rect x="1009.8" y="323.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1012.8" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.25%)</title><rect x="1009.8" y="307.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1012.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.25%)</title><rect x="1009.8" y="291.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1012.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.25%)</title><rect x="1012.7" y="323.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1015.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 2.96%)</title><rect x="1015.6" y="387.0" width="34.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1018.6" y="398.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 2.96%)</title><rect x="1015.6" y="371.0" width="34.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.6" y="382.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 2.96%)</title><rect x="1015.6" y="355.0" width="34.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1018.6" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 2.96%)</title><rect x="1015.6" y="339.0" width="34.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.6" y="350.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 2.96%)</title><rect x="1015.6" y="323.0" width="34.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1018.6" y="334.0">jd..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.25%)</title><rect x="1015.6" y="307.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1018.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.25%)</title><rect x="1018.5" y="307.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.5" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.74%)</title><rect x="1021.4" y="307.0" width="8.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1024.4" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.25%)</title><rect x="1021.4" y="291.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="302.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.25%)</title><rect x="1024.3" y="291.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1027.3" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.25%)</title><rect x="1027.2" y="291.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1030.2" y="302.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 1.72%)</title><rect x="1030.1" y="307.0" width="20.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1033.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNode (4 samples, 0.99%)</title><rect x="1050.5" y="435.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.25%)</title><rect x="1059.2" y="419.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1062.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.49%)</title><rect x="1062.1" y="467.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1065.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.49%)</title><rect x="1062.1" y="451.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1065.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.49%)</title><rect x="1062.1" y="435.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1065.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.49%)</title><rect x="1067.9" y="499.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1070.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.49%)</title><rect x="1067.9" y="483.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.49%)</title><rect x="1067.9" y="467.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.49%)</title><rect x="1067.9" y="451.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1070.9" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.49%)</title><rect x="1067.9" y="435.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1070.9" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.25%)</title><rect x="1070.8" y="419.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1073.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.25%)</title><rect x="1073.7" y="499.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.7" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.25%)</title><rect x="1073.7" y="483.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1076.7" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 2.71%)</title><rect x="1076.7" y="499.0" width="31.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1079.7" y="510.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 1.23%)</title><rect x="1094.1" y="483.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1097.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.25%)</title><rect x="1108.6" y="515.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1111.6" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (22 samples, 5.42%)</title><rect x="1111.5" y="515.0" width="64.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1114.5" y="526.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (21 samples, 5.17%)</title><rect x="1114.4" y="499.0" width="61.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1117.4" y="510.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (6 samples, 1.48%)</title><rect x="1117.3" y="483.0" width="17.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1120.3" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.25%)</title><rect x="1123.2" y="467.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.2" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.25%)</title><rect x="1126.1" y="467.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.1" y="478.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.25%)</title><rect x="1129.0" y="467.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1132.0" y="478.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.25%)</title><rect x="1131.9" y="467.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1134.9" y="478.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.25%)</title><rect x="1131.9" y="451.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.9" y="462.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.49%)</title><rect x="1134.8" y="483.0" width="5.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1137.8" y="494.0"></text>
</g>
<g>
<title>__recv (11 samples, 2.71%)</title><rect x="1140.6" y="483.0" width="32.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1143.6" y="494.0">__..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.25%)</title><rect x="1172.6" y="483.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1175.6" y="494.0"></text>
</g>
<g>
<title>start_thread (5 samples, 1.23%)</title><rect x="1175.5" y="563.0" width="14.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1178.5" y="574.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 1.23%)</title><rect x="1175.5" y="547.0" width="14.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 1.23%)</title><rect x="1175.5" y="531.0" width="14.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="542.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 1.23%)</title><rect x="1175.5" y="515.0" width="14.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="526.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 1.23%)</title><rect x="1175.5" y="499.0" width="14.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="510.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 1.23%)</title><rect x="1175.5" y="483.0" width="14.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="494.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 1.23%)</title><rect x="1175.5" y="467.0" width="14.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (5 samples, 1.23%)</title><rect x="1175.5" y="451.0" width="14.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="462.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.74%)</title><rect x="1175.5" y="435.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="446.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.25%)</title><rect x="1175.5" y="419.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="430.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.25%)</title><rect x="1175.5" y="403.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="414.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.25%)</title><rect x="1175.5" y="387.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.5" y="398.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.25%)</title><rect x="1175.5" y="371.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="382.0"></text>
</g>
<g>
<title>State::_sub_Op_AddI(Node const*) (1 samples, 0.25%)</title><rect x="1175.5" y="355.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="366.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.25%)</title><rect x="1178.4" y="419.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.25%)</title><rect x="1178.4" y="403.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.25%)</title><rect x="1178.4" y="387.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.25%)</title><rect x="1181.3" y="419.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.25%)</title><rect x="1181.3" y="403.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.25%)</title><rect x="1181.3" y="387.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.49%)</title><rect x="1184.2" y="435.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.49%)</title><rect x="1184.2" y="419.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.49%)</title><rect x="1184.2" y="403.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="414.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicates(int) (1 samples, 0.25%)</title><rect x="1184.2" y="387.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="398.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.25%)</title><rect x="1184.2" y="371.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="382.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.25%)</title><rect x="1184.2" y="355.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1187.1" y="387.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1187.1" y="371.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1187.1" y="355.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1187.1" y="339.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1187.1" y="323.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1187.1" y="307.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1187.1" y="291.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1187.1" y="275.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1187.1" y="259.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1187.1" y="243.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1187.1" y="227.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1187.1" y="211.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1187.1" y="195.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1187.1" y="179.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1187.1" y="163.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1187.1" y="147.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1187.1" y="131.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.1" y="142.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.25%)</title><rect x="1187.1" y="115.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.25%)</title><rect x="1187.1" y="99.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="110.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.25%)</title><rect x="1187.1" y="83.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.25%)</title><rect x="1187.1" y="67.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.25%)</title><rect x="1187.1" y="51.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.25%)</title><rect x="1187.1" y="35.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="46.0"></text>
</g>
</g>
</svg>
