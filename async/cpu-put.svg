<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (2,173 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.23%)</title><rect x="10.0" y="467.0" width="2.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="10.0" y="451.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.05%)</title><rect x="10.0" y="435.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.18%)</title><rect x="10.5" y="451.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.5" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.18%)</title><rect x="10.5" y="435.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.14%)</title><rect x="10.5" y="419.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.5" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.14%)</title><rect x="10.5" y="403.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.5" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.09%)</title><rect x="11.1" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.1" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="12.2" y="419.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.2" y="430.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="12.2" y="403.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.2" y="414.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.05%)</title><rect x="12.2" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.2" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,426 samples, 65.62%)</title><rect x="12.7" y="467.0" width="774.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.7" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,426 samples, 65.62%)</title><rect x="12.7" y="451.0" width="774.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.7" y="462.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,426 samples, 65.62%)</title><rect x="12.7" y="435.0" width="774.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.7" y="446.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1,094 samples, 50.35%)</title><rect x="19.2" y="419.0" width="594.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.2" y="430.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (84 samples, 3.87%)</title><rect x="22.5" y="403.0" width="45.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.5" y="414.0">java..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.finishCompletion (83 samples, 3.82%)</title><rect x="23.0" y="387.0" width="45.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.0" y="398.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 3.82%)</title><rect x="23.0" y="371.0" width="45.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.0" y="382.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (78 samples, 3.59%)</title><rect x="25.7" y="355.0" width="42.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.7" y="366.0">jdk/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="26.3" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.3" y="350.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.09%)</title><rect x="26.8" y="339.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="29.8" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.09%)</title><rect x="27.9" y="339.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="30.9" y="350.0"></text>
</g>
<g>
<title>Unsafe_Unpark (33 samples, 1.52%)</title><rect x="29.0" y="339.0" width="17.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="32.0" y="350.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="30.1" y="323.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="33.1" y="334.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="30.6" y="323.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.6" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.09%)</title><rect x="31.2" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="34.2" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="32.3" y="323.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="35.3" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.09%)</title><rect x="32.8" y="323.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="35.8" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.18%)</title><rect x="33.9" y="323.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="36.9" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.09%)</title><rect x="36.1" y="323.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="39.1" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.14%)</title><rect x="37.2" y="323.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="40.2" y="334.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.09%)</title><rect x="38.8" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="41.8" y="334.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.09%)</title><rect x="39.9" y="323.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="42.9" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.46%)</title><rect x="41.0" y="323.0" width="5.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="44.0" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.05%)</title><rect x="46.4" y="323.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="49.4" y="334.0"></text>
</g>
<g>
<title>__pthread_cond_signal (33 samples, 1.52%)</title><rect x="46.9" y="339.0" width="17.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="49.9" y="350.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.23%)</title><rect x="64.8" y="339.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="67.8" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.05%)</title><rect x="67.6" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="70.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$65/632463387.call (329 samples, 15.14%)</title><rect x="68.1" y="403.0" width="178.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.1" y="414.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$passOn$1 (329 samples, 15.14%)</title><rect x="68.1" y="387.0" width="178.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.1" y="398.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOnInternal (329 samples, 15.14%)</title><rect x="68.1" y="371.0" width="178.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.1" y="382.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.addMyselfParamToRequest (13 samples, 0.60%)</title><rect x="68.1" y="355.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.23%)</title><rect x="71.4" y="339.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.23%)</title><rect x="71.4" y="323.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.23%)</title><rect x="71.4" y="307.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.4" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.23%)</title><rect x="71.4" y="291.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.4" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.14%)</title><rect x="72.4" y="275.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="75.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.09%)</title><rect x="74.1" y="339.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="74.6" y="323.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="74.6" y="307.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.passOn (316 samples, 14.54%)</title><rect x="75.2" y="355.0" width="171.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="78.2" y="366.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.05%)</title><rect x="75.2" y="339.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="75.2" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="75.2" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="75.2" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.2" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (315 samples, 14.50%)</title><rect x="75.7" y="339.0" width="171.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.7" y="350.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (315 samples, 14.50%)</title><rect x="75.7" y="323.0" width="171.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.7" y="334.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (103 samples, 4.74%)</title><rect x="77.9" y="307.0" width="55.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.9" y="318.0">one/n..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.37%)</title><rect x="87.1" y="291.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="90.1" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.37%)</title><rect x="87.1" y="275.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="90.1" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.32%)</title><rect x="87.1" y="259.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="90.1" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.32%)</title><rect x="87.1" y="243.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="90.1" y="254.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.09%)</title><rect x="87.1" y="227.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="90.1" y="238.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="87.1" y="211.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="90.1" y="222.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.05%)</title><rect x="87.1" y="195.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="90.1" y="206.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="87.7" y="211.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="90.7" y="222.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.05%)</title><rect x="88.2" y="227.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="91.2" y="238.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.18%)</title><rect x="88.7" y="227.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="91.7" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="90.9" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="93.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (78 samples, 3.59%)</title><rect x="91.5" y="291.0" width="42.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="94.5" y="302.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (43 samples, 1.98%)</title><rect x="94.7" y="275.0" width="23.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="97.7" y="286.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.23%)</title><rect x="98.5" y="259.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="101.5" y="270.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="101.2" y="259.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="104.2" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="101.8" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="104.8" y="270.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.18%)</title><rect x="102.3" y="259.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="105.3" y="270.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.05%)</title><rect x="104.5" y="259.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="107.5" y="270.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (17 samples, 0.78%)</title><rect x="105.0" y="259.0" width="9.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="108.0" y="270.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.09%)</title><rect x="109.9" y="243.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="112.9" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="111.0" y="243.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="114.0" y="254.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.18%)</title><rect x="111.5" y="243.0" width="2.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="114.5" y="254.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.09%)</title><rect x="112.6" y="227.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="115.6" y="238.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.05%)</title><rect x="113.7" y="243.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="116.7" y="254.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (5 samples, 0.23%)</title><rect x="114.3" y="259.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="117.3" y="270.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.09%)</title><rect x="117.0" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="120.0" y="270.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.14%)</title><rect x="118.1" y="275.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="121.1" y="286.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.09%)</title><rect x="119.7" y="275.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="122.7" y="286.0"></text>
</g>
<g>
<title>__recv (21 samples, 0.97%)</title><rect x="120.8" y="275.0" width="11.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="123.8" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.14%)</title><rect x="132.2" y="275.0" width="1.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="135.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (72 samples, 3.31%)</title><rect x="133.8" y="307.0" width="39.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="136.8" y="318.0">one..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.28%)</title><rect x="134.4" y="291.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.4" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.28%)</title><rect x="134.4" y="275.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.4" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.05%)</title><rect x="134.9" y="259.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="137.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.14%)</title><rect x="135.4" y="259.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.09%)</title><rect x="136.0" y="243.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="137.1" y="259.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.05%)</title><rect x="137.1" y="243.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="140.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.09%)</title><rect x="137.6" y="291.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.09%)</title><rect x="137.6" y="275.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="140.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.09%)</title><rect x="137.6" y="259.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.09%)</title><rect x="137.6" y="243.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.23%)</title><rect x="138.7" y="291.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.23%)</title><rect x="138.7" y="275.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.23%)</title><rect x="138.7" y="259.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.7" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="140.3" y="243.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="143.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="140.9" y="243.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (47 samples, 2.16%)</title><rect x="141.4" y="291.0" width="25.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.4" y="302.0">o..</text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.23%)</title><rect x="147.9" y="275.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="150.9" y="286.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.14%)</title><rect x="150.6" y="275.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="153.6" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 1.24%)</title><rect x="152.3" y="275.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (3 samples, 0.14%)</title><rect x="155.0" y="259.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="158.0" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.78%)</title><rect x="156.6" y="259.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ZeroResponse.&lt;init&gt; (2 samples, 0.09%)</title><rect x="165.8" y="259.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.8" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (11 samples, 0.51%)</title><rect x="166.9" y="291.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.28%)</title><rect x="169.7" y="275.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.7" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.28%)</title><rect x="169.7" y="259.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.7" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="172.4" y="243.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="175.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (52 samples, 2.39%)</title><rect x="172.9" y="307.0" width="28.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.9" y="318.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (51 samples, 2.35%)</title><rect x="173.5" y="291.0" width="27.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="176.5" y="302.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.length (26 samples, 1.20%)</title><rect x="173.5" y="275.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (18 samples, 0.83%)</title><rect x="173.5" y="259.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (8 samples, 0.37%)</title><rect x="178.3" y="243.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="182.7" y="243.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.length (8 samples, 0.37%)</title><rect x="183.2" y="259.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.2" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="185.9" y="243.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="188.9" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.09%)</title><rect x="186.5" y="243.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (25 samples, 1.15%)</title><rect x="187.6" y="275.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.6" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (25 samples, 1.15%)</title><rect x="187.6" y="259.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.6" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.14%)</title><rect x="190.8" y="243.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (16 samples, 0.74%)</title><rect x="192.5" y="243.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (16 samples, 0.74%)</title><rect x="192.5" y="227.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (7 samples, 0.32%)</title><rect x="201.1" y="307.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.23%)</title><rect x="201.7" y="291.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.23%)</title><rect x="201.7" y="275.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="204.4" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="204.4" y="275.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.4" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="204.4" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.4" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="204.4" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="207.4" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="204.4" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="207.4" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="204.4" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="207.4" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="204.4" y="195.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="207.4" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="204.4" y="179.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="207.4" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="204.4" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="207.4" y="174.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.05%)</title><rect x="204.4" y="147.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="207.4" y="158.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.05%)</title><rect x="204.4" y="131.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="207.4" y="142.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (38 samples, 1.75%)</title><rect x="204.9" y="307.0" width="20.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.9" y="318.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.14%)</title><rect x="206.6" y="291.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="209.6" y="302.0"></text>
</g>
<g>
<title>__setsockopt (32 samples, 1.47%)</title><rect x="208.2" y="291.0" width="17.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="211.2" y="302.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (35 samples, 1.61%)</title><rect x="225.6" y="307.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.6" y="318.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (13 samples, 0.60%)</title><rect x="227.2" y="291.0" width="7.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="230.2" y="302.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.09%)</title><rect x="228.3" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="231.3" y="286.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="229.4" y="275.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="232.4" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.37%)</title><rect x="229.9" y="275.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="232.9" y="286.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.09%)</title><rect x="233.2" y="259.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="236.2" y="270.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.09%)</title><rect x="233.2" y="243.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="236.2" y="254.0"></text>
</g>
<g>
<title>__libc_send (14 samples, 0.64%)</title><rect x="234.3" y="291.0" width="7.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="237.3" y="302.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.23%)</title><rect x="241.9" y="291.0" width="2.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="244.9" y="302.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.05%)</title><rect x="244.6" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.6" y="318.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (3 samples, 0.14%)</title><rect x="245.1" y="307.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.1" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (3 samples, 0.14%)</title><rect x="245.1" y="291.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.1" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (3 samples, 0.14%)</title><rect x="245.1" y="275.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.1" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (3 samples, 0.14%)</title><rect x="245.1" y="259.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.1" y="270.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="246.2" y="243.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$71/656783190.call (675 samples, 31.06%)</title><rect x="246.8" y="403.0" width="366.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.8" y="414.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl$..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$processRequest$0 (675 samples, 31.06%)</title><rect x="246.8" y="387.0" width="366.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.8" y="398.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl...</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.put (675 samples, 31.06%)</title><rect x="246.8" y="371.0" width="366.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.8" y="382.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl...</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.09%)</title><rect x="247.8" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.09%)</title><rect x="247.8" y="339.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.09%)</title><rect x="247.8" y="323.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.8" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.09%)</title><rect x="247.8" y="307.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.8" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.09%)</title><rect x="247.8" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="250.8" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.09%)</title><rect x="247.8" y="275.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="250.8" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.09%)</title><rect x="247.8" y="259.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="250.8" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.09%)</title><rect x="247.8" y="243.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="250.8" y="254.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="247.8" y="227.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="250.8" y="238.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="247.8" y="211.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="250.8" y="222.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="248.4" y="227.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="251.4" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="248.4" y="211.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="251.4" y="222.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.05%)</title><rect x="248.4" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="251.4" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (6 samples, 0.28%)</title><rect x="248.9" y="355.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (17 samples, 0.78%)</title><rect x="252.2" y="355.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.78%)</title><rect x="252.2" y="339.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.78%)</title><rect x="252.2" y="323.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.2" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.14%)</title><rect x="252.2" y="307.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="255.2" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.14%)</title><rect x="252.2" y="291.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="255.2" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.14%)</title><rect x="252.2" y="275.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="255.2" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.14%)</title><rect x="252.2" y="259.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="255.2" y="270.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="252.2" y="243.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="255.2" y="254.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.09%)</title><rect x="252.7" y="243.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="255.7" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="253.3" y="227.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="256.3" y="238.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.05%)</title><rect x="253.3" y="211.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="256.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.64%)</title><rect x="253.8" y="307.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.64%)</title><rect x="253.8" y="291.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.8" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.64%)</title><rect x="253.8" y="275.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.8" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.60%)</title><rect x="253.8" y="259.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="258.2" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="258.2" y="227.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="258.7" y="243.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.7" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="259.8" y="243.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="262.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="260.9" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="260.9" y="243.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.upsert (647 samples, 29.77%)</title><rect x="261.4" y="355.0" width="351.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.4" y="366.0">ru/mail/polis/dao/mariarheon/DAOImpl.upsert</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.14%)</title><rect x="261.4" y="339.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.4" y="350.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (618 samples, 28.44%)</title><rect x="263.1" y="339.0" width="335.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="266.1" y="350.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (614 samples, 28.26%)</title><rect x="265.2" y="323.0" width="333.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.2" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (586 samples, 26.97%)</title><rect x="266.3" y="307.0" width="318.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="269.3" y="318.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.09%)</title><rect x="268.5" y="291.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="271.5" y="302.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="269.6" y="291.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="272.6" y="302.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.28%)</title><rect x="270.1" y="291.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="273.1" y="302.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.05%)</title><rect x="273.4" y="291.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="276.4" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.09%)</title><rect x="273.9" y="291.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="276.9" y="302.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (7 samples, 0.32%)</title><rect x="275.0" y="291.0" width="3.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="278.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="278.8" y="291.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="281.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) [clone .plt] (1 samples, 0.05%)</title><rect x="279.9" y="291.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="282.9" y="302.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (560 samples, 25.77%)</title><rect x="280.4" y="291.0" width="304.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="283.4" y="302.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="282.1" y="275.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="285.1" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.05%)</title><rect x="282.6" y="275.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="285.6" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="283.1" y="275.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="286.1" y="286.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.09%)</title><rect x="283.7" y="275.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="286.7" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (9 samples, 0.41%)</title><rect x="284.8" y="275.0" width="4.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="287.8" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.14%)</title><rect x="288.0" y="259.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="291.0" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.64%)</title><rect x="289.7" y="275.0" width="7.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="292.7" y="286.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.09%)</title><rect x="292.9" y="259.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="295.9" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.14%)</title><rect x="294.0" y="259.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="297.0" y="270.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.14%)</title><rect x="295.6" y="259.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="298.6" y="270.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.05%)</title><rect x="296.7" y="243.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="299.7" y="254.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.05%)</title><rect x="297.3" y="275.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="300.3" y="286.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.09%)</title><rect x="297.8" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="300.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (521 samples, 23.98%)</title><rect x="298.9" y="275.0" width="282.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="301.9" y="286.0">rocksdb::DB::Put(rocksdb::WriteOptions..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (519 samples, 23.88%)</title><rect x="300.0" y="259.0" width="281.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="303.0" y="270.0">rocksdb::DBImpl::Put(rocksdb::WriteOpt..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (510 samples, 23.47%)</title><rect x="300.0" y="243.0" width="276.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="303.0" y="254.0">rocksdb::DB::Put(rocksdb::WriteOption..</text>
</g>
<g>
<title>__libc_free (4 samples, 0.18%)</title><rect x="300.5" y="227.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="303.5" y="238.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.05%)</title><rect x="302.7" y="227.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="305.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.09%)</title><rect x="303.2" y="227.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="306.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (457 samples, 21.03%)</title><rect x="304.3" y="227.0" width="248.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="307.3" y="238.0">rocksdb::DBImpl::Write(rocksdb::W..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.09%)</title><rect x="304.9" y="211.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="307.9" y="222.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (1 samples, 0.05%)</title><rect x="306.0" y="211.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="309.0" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="306.5" y="211.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="309.5" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.05%)</title><rect x="307.0" y="211.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="310.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.05%)</title><rect x="307.6" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="310.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) [clone .plt] (1 samples, 0.05%)</title><rect x="308.1" y="211.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="311.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (419 samples, 19.28%)</title><rect x="308.7" y="211.0" width="227.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="311.7" y="222.0">rocksdb::DBImpl::WriteImpl(roc..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.09%)</title><rect x="328.8" y="195.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="331.8" y="206.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (1 samples, 0.05%)</title><rect x="329.8" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="332.8" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="330.4" y="195.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="333.4" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.14%)</title><rect x="330.9" y="195.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="333.9" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.28%)</title><rect x="332.6" y="195.0" width="3.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="335.6" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.05%)</title><rect x="335.8" y="195.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="338.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.14%)</title><rect x="336.4" y="195.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="339.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (5 samples, 0.23%)</title><rect x="338.0" y="195.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="341.0" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="340.2" y="179.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="343.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (3 samples, 0.14%)</title><rect x="340.7" y="195.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="343.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (1 samples, 0.05%)</title><rect x="341.8" y="179.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="344.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1 samples, 0.05%)</title><rect x="342.3" y="195.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="345.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (101 samples, 4.65%)</title><rect x="342.9" y="195.0" width="54.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="345.9" y="206.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (93 samples, 4.28%)</title><rect x="344.5" y="179.0" width="50.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="347.5" y="190.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (87 samples, 4.00%)</title><rect x="347.2" y="163.0" width="47.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="350.2" y="174.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (13 samples, 0.60%)</title><rect x="349.4" y="147.0" width="7.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="352.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (48 samples, 2.21%)</title><rect x="356.5" y="147.0" width="26.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="359.5" y="158.0">r..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.09%)</title><rect x="357.5" y="131.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="360.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.05%)</title><rect x="358.6" y="131.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="361.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.05%)</title><rect x="359.2" y="131.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (42 samples, 1.93%)</title><rect x="359.7" y="131.0" width="22.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="362.7" y="142.0">r..</text>
</g>
<g>
<title>__libc_write (32 samples, 1.47%)</title><rect x="361.3" y="115.0" width="17.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="364.3" y="126.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="378.7" y="115.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="381.7" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.14%)</title><rect x="379.3" y="115.0" width="1.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="382.3" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.05%)</title><rect x="380.9" y="115.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="383.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.09%)</title><rect x="381.4" y="115.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="384.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (3 samples, 0.14%)</title><rect x="382.5" y="147.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="385.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) [clone .plt] (1 samples, 0.05%)</title><rect x="384.1" y="147.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="387.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.09%)</title><rect x="384.7" y="147.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="387.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (16 samples, 0.74%)</title><rect x="385.8" y="147.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="388.8" y="158.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (4 samples, 0.18%)</title><rect x="385.8" y="131.0" width="2.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="388.8" y="142.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="387.9" y="131.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="390.9" y="142.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.05%)</title><rect x="388.5" y="131.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="391.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.05%)</title><rect x="389.0" y="131.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="392.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.05%)</title><rect x="389.6" y="131.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="392.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (7 samples, 0.32%)</title><rect x="390.1" y="131.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="393.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.05%)</title><rect x="393.4" y="115.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="396.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::UpdateFileChecksum(rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="393.9" y="131.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="396.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.05%)</title><rect x="394.5" y="163.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="397.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.05%)</title><rect x="395.0" y="179.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="398.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.05%)</title><rect x="395.5" y="179.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="398.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="396.1" y="179.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="399.1" y="190.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (2 samples, 0.09%)</title><rect x="396.6" y="179.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="399.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.09%)</title><rect x="397.7" y="195.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="400.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (7 samples, 0.32%)</title><rect x="398.8" y="195.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="401.8" y="206.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="398.8" y="179.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="401.8" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.23%)</title><rect x="399.4" y="179.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="402.4" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.05%)</title><rect x="402.1" y="179.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="405.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (1 samples, 0.05%)</title><rect x="402.6" y="195.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="405.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() [clone .plt] (2 samples, 0.09%)</title><rect x="403.2" y="195.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="406.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (1 samples, 0.05%)</title><rect x="404.2" y="195.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="407.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.05%)</title><rect x="404.8" y="195.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="407.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (201 samples, 9.25%)</title><rect x="405.3" y="195.0" width="109.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="408.3" y="206.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (196 samples, 9.02%)</title><rect x="408.0" y="179.0" width="106.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="411.0" y="190.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="408.6" y="163.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="411.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.05%)</title><rect x="409.7" y="163.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="412.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.05%)</title><rect x="410.2" y="163.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="413.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) [clone .plt] (2 samples, 0.09%)</title><rect x="410.8" y="163.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="413.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (189 samples, 8.70%)</title><rect x="411.8" y="163.0" width="102.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="414.8" y="174.0">rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (173 samples, 7.96%)</title><rect x="417.8" y="147.0" width="94.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="420.8" y="158.0">rocksdb::Me..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.05%)</title><rect x="417.8" y="131.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="420.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.09%)</title><rect x="418.4" y="131.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="421.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.05%)</title><rect x="419.4" y="131.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="422.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.09%)</title><rect x="420.0" y="131.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="423.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) [clone .plt] (1 samples, 0.05%)</title><rect x="421.1" y="131.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="424.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (166 samples, 7.64%)</title><rect x="421.6" y="131.0" width="90.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="424.6" y="142.0">rocksdb::M..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (2 samples, 0.09%)</title><rect x="424.9" y="115.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="427.9" y="126.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.05%)</title><rect x="426.0" y="115.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="429.0" y="126.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) [clone .plt] (1 samples, 0.05%)</title><rect x="426.5" y="115.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="429.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.05%)</title><rect x="427.0" y="115.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="430.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (3 samples, 0.14%)</title><rect x="427.6" y="115.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="430.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const [clone .plt] (1 samples, 0.05%)</title><rect x="429.2" y="115.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="432.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (145 samples, 6.67%)</title><rect x="429.8" y="115.0" width="78.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="432.8" y="126.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (3 samples, 0.14%)</title><rect x="435.2" y="99.0" width="1.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="438.2" y="110.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="436.3" y="83.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="439.3" y="94.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (125 samples, 5.75%)</title><rect x="436.8" y="99.0" width="67.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.8" y="110.0">bool ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (113 samples, 5.20%)</title><rect x="440.1" y="83.0" width="61.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="443.1" y="94.0">/tmp/l..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (60 samples, 2.76%)</title><rect x="465.1" y="67.0" width="32.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="468.1" y="78.0">/t..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (4 samples, 0.18%)</title><rect x="467.2" y="51.0" width="2.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="470.2" y="62.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="469.4" y="51.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="472.4" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.28%)</title><rect x="469.9" y="51.0" width="3.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="472.9" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.05%)</title><rect x="473.2" y="51.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="476.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (44 samples, 2.02%)</title><rect x="473.7" y="51.0" width="23.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.7" y="62.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (2 samples, 0.09%)</title><rect x="482.4" y="35.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="485.4" y="46.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.18%)</title><rect x="483.5" y="35.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="486.5" y="46.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (16 samples, 0.74%)</title><rect x="485.7" y="35.0" width="8.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="488.7" y="46.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.28%)</title><rect x="494.4" y="35.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="497.4" y="46.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="497.6" y="67.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="500.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.28%)</title><rect x="498.2" y="67.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="501.2" y="78.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni5039174316364851291.so (1 samples, 0.05%)</title><rect x="498.2" y="51.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="501.2" y="62.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (5 samples, 0.23%)</title><rect x="498.7" y="51.0" width="2.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="501.7" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="501.4" y="83.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="504.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.18%)</title><rect x="502.0" y="83.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="505.0" y="94.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (1 samples, 0.05%)</title><rect x="503.1" y="67.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="506.1" y="78.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.05%)</title><rect x="503.6" y="67.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="506.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.05%)</title><rect x="504.2" y="83.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="507.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (2 samples, 0.09%)</title><rect x="504.7" y="99.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="507.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.05%)</title><rect x="505.8" y="99.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="508.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (1 samples, 0.05%)</title><rect x="506.3" y="99.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="509.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.05%)</title><rect x="506.9" y="99.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (1 samples, 0.05%)</title><rect x="506.9" y="83.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="509.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.05%)</title><rect x="507.4" y="99.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (1 samples, 0.05%)</title><rect x="508.0" y="99.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.14%)</title><rect x="508.5" y="115.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.09%)</title><rect x="510.1" y="115.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="513.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.05%)</title><rect x="511.2" y="115.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="514.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.09%)</title><rect x="511.8" y="147.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="514.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) [clone .plt] (1 samples, 0.05%)</title><rect x="512.8" y="147.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="515.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.09%)</title><rect x="513.4" y="147.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="516.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.09%)</title><rect x="514.5" y="195.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="517.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.09%)</title><rect x="514.5" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="514.5" y="163.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="514.5" y="147.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="517.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.09%)</title><rect x="514.5" y="131.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="517.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) [clone .plt] (1 samples, 0.05%)</title><rect x="514.5" y="115.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.5" y="126.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, rocksdb::MemTable* const&amp;) (1 samples, 0.05%)</title><rect x="515.0" y="115.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="518.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (3 samples, 0.14%)</title><rect x="515.6" y="195.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="518.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const [clone .plt] (1 samples, 0.05%)</title><rect x="517.2" y="195.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="520.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (21 samples, 0.97%)</title><rect x="517.7" y="195.0" width="11.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="520.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (2 samples, 0.09%)</title><rect x="529.1" y="195.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="532.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2 samples, 0.09%)</title><rect x="529.1" y="179.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="532.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (1 samples, 0.05%)</title><rect x="530.2" y="195.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="533.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.05%)</title><rect x="530.8" y="195.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.09%)</title><rect x="531.3" y="195.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="534.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.09%)</title><rect x="531.3" y="179.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="534.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (3 samples, 0.14%)</title><rect x="532.4" y="195.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="535.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (2 samples, 0.09%)</title><rect x="534.0" y="195.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="537.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.09%)</title><rect x="535.1" y="195.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (6 samples, 0.28%)</title><rect x="536.2" y="211.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="539.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) [clone .plt] (1 samples, 0.05%)</title><rect x="539.5" y="211.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="542.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (3 samples, 0.14%)</title><rect x="540.0" y="211.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="543.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) [clone .plt] (1 samples, 0.05%)</title><rect x="541.6" y="211.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="544.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.09%)</title><rect x="542.2" y="211.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="545.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.18%)</title><rect x="543.3" y="211.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="546.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) [clone .plt] (1 samples, 0.05%)</title><rect x="545.4" y="211.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="548.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.05%)</title><rect x="546.0" y="211.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="549.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.05%)</title><rect x="546.5" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="549.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.05%)</title><rect x="547.1" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="550.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) [clone .plt] (1 samples, 0.05%)</title><rect x="547.6" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="550.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.09%)</title><rect x="548.1" y="211.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) [clone .plt] (1 samples, 0.05%)</title><rect x="549.2" y="211.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="552.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.05%)</title><rect x="549.8" y="211.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="552.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) [clone .plt] (1 samples, 0.05%)</title><rect x="550.3" y="211.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="553.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (3 samples, 0.14%)</title><rect x="550.9" y="211.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="553.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (6 samples, 0.28%)</title><rect x="552.5" y="227.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="555.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (4 samples, 0.18%)</title><rect x="555.7" y="227.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="558.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (22 samples, 1.01%)</title><rect x="557.9" y="227.0" width="12.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="560.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.05%)</title><rect x="557.9" y="211.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="560.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (3 samples, 0.14%)</title><rect x="558.5" y="211.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="561.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const [clone .plt] (1 samples, 0.05%)</title><rect x="560.1" y="211.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (2 samples, 0.09%)</title><rect x="560.6" y="211.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="563.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.28%)</title><rect x="561.7" y="211.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="564.7" y="222.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (4 samples, 0.18%)</title><rect x="562.8" y="195.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="565.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (3 samples, 0.14%)</title><rect x="565.0" y="211.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="568.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) [clone .plt] (1 samples, 0.05%)</title><rect x="566.6" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="569.6" y="222.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (4 samples, 0.18%)</title><rect x="567.1" y="211.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="570.1" y="222.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) [clone .plt] (1 samples, 0.05%)</title><rect x="569.3" y="211.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="572.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="569.9" y="227.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="572.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.09%)</title><rect x="570.4" y="227.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="573.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="571.5" y="227.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="574.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.05%)</title><rect x="572.6" y="227.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="575.6" y="238.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.05%)</title><rect x="573.1" y="227.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="576.1" y="238.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (2 samples, 0.09%)</title><rect x="573.7" y="227.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="576.7" y="238.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (3 samples, 0.14%)</title><rect x="574.7" y="227.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="577.7" y="238.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) [clone .plt] (1 samples, 0.05%)</title><rect x="576.4" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="579.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.05%)</title><rect x="576.9" y="243.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="577.5" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="580.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (2 samples, 0.09%)</title><rect x="578.6" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="581.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.14%)</title><rect x="579.6" y="243.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="582.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) [clone .plt] (1 samples, 0.05%)</title><rect x="581.3" y="243.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="584.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.09%)</title><rect x="581.8" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="584.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="582.9" y="275.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="585.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.05%)</title><rect x="583.4" y="275.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="586.4" y="286.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.05%)</title><rect x="584.0" y="275.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="587.0" y="286.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.41%)</title><rect x="584.5" y="307.0" width="4.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="587.5" y="318.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="584.5" y="291.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="587.5" y="302.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.05%)</title><rect x="584.5" y="275.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="587.5" y="286.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.05%)</title><rect x="584.5" y="259.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="587.5" y="270.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.14%)</title><rect x="585.1" y="291.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="588.1" y="302.0"></text>
</g>
<g>
<title>_int_free (2 samples, 0.09%)</title><rect x="586.7" y="291.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="589.7" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="587.8" y="291.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="590.8" y="302.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.05%)</title><rect x="588.3" y="291.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="591.3" y="302.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.05%)</title><rect x="588.9" y="291.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="591.9" y="302.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.05%)</title><rect x="588.9" y="275.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="591.9" y="286.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (3 samples, 0.14%)</title><rect x="589.4" y="307.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="592.4" y="318.0"></text>
</g>
<g>
<title>malloc (12 samples, 0.55%)</title><rect x="591.0" y="307.0" width="6.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="594.0" y="318.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) [clone .plt] (1 samples, 0.05%)</title><rect x="597.6" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="600.6" y="318.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.05%)</title><rect x="598.1" y="307.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="601.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (7 samples, 0.32%)</title><rect x="598.6" y="339.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.6" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.09%)</title><rect x="598.6" y="323.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="601.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.14%)</title><rect x="599.7" y="323.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.7" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="600.8" y="307.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="603.8" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.09%)</title><rect x="601.4" y="323.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.4" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.09%)</title><rect x="601.4" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="604.4" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.09%)</title><rect x="601.4" y="291.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="604.4" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.09%)</title><rect x="601.4" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="604.4" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.09%)</title><rect x="601.4" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="604.4" y="270.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.09%)</title><rect x="601.4" y="243.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="604.4" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="601.4" y="227.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="604.4" y="238.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.05%)</title><rect x="601.9" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="604.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArrayUnsigned (19 samples, 0.87%)</title><rect x="602.4" y="339.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.4" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="607.3" y="323.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="610.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (9 samples, 0.41%)</title><rect x="607.9" y="323.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="610.9" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="608.4" y="307.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.4" y="318.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="608.4" y="291.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="611.4" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="608.4" y="275.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="611.4" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="608.4" y="259.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="611.4" y="270.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="608.4" y="243.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="611.4" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="608.4" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="611.4" y="238.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="608.4" y="211.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="611.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7 samples, 0.32%)</title><rect x="609.0" y="307.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="612.0" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="609.0" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="612.0" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="609.5" y="291.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="612.5" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="609.5" y="275.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="612.5" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="609.5" y="259.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="612.5" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="609.5" y="243.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="612.5" y="254.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="609.5" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="612.5" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="609.5" y="211.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="612.5" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="609.5" y="195.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="612.5" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.05%)</title><rect x="609.5" y="179.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="612.5" y="190.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="609.5" y="163.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="612.5" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.23%)</title><rect x="610.0" y="291.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.23%)</title><rect x="610.0" y="275.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.23%)</title><rect x="610.0" y="259.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.0" y="270.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="612.2" y="243.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ZeroResponse.&lt;init&gt; (1 samples, 0.05%)</title><rect x="612.8" y="355.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="615.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="612.8" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.8" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="612.8" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="615.8" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.05%)</title><rect x="612.8" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="615.8" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="612.8" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="615.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="612.8" y="275.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="615.8" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="612.8" y="259.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="615.8" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="612.8" y="243.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="615.8" y="254.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.05%)</title><rect x="612.8" y="227.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="615.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.32%)</title><rect x="613.3" y="419.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.32%)</title><rect x="613.3" y="403.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="616.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.32%)</title><rect x="613.3" y="387.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="616.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.32%)</title><rect x="613.3" y="371.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1 samples, 0.05%)</title><rect x="616.6" y="355.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (313 samples, 14.40%)</title><rect x="617.1" y="419.0" width="170.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.1" y="430.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (313 samples, 14.40%)</title><rect x="617.1" y="403.0" width="170.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="620.1" y="414.0">java/util/concurrent/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (226 samples, 10.40%)</title><rect x="620.4" y="387.0" width="122.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.4" y="398.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.05%)</title><rect x="625.8" y="371.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="628.8" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.05%)</title><rect x="625.8" y="355.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="628.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 0.69%)</title><rect x="626.3" y="371.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="629.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.14%)</title><rect x="632.9" y="355.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.14%)</title><rect x="632.9" y="339.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.14%)</title><rect x="632.9" y="323.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.9" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.05%)</title><rect x="632.9" y="307.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="635.9" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.05%)</title><rect x="632.9" y="291.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="635.9" y="302.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.09%)</title><rect x="633.4" y="307.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="636.4" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="633.4" y="291.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="636.4" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="633.9" y="291.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="636.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.55%)</title><rect x="634.5" y="371.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.55%)</title><rect x="634.5" y="355.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.32%)</title><rect x="637.2" y="339.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.32%)</title><rect x="637.2" y="323.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.32%)</title><rect x="637.2" y="307.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.2" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="637.2" y="291.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="640.2" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.14%)</title><rect x="637.7" y="291.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="640.7" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="637.7" y="275.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="640.7" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="638.3" y="275.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="641.3" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="638.8" y="275.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="641.8" y="286.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.14%)</title><rect x="639.4" y="291.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="642.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (185 samples, 8.51%)</title><rect x="641.0" y="371.0" width="100.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="644.0" y="382.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (182 samples, 8.38%)</title><rect x="642.6" y="355.0" width="98.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.6" y="366.0">jdk/internal..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.09%)</title><rect x="644.3" y="339.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="647.3" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park (104 samples, 4.79%)</title><rect x="645.3" y="339.0" width="56.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="648.3" y="350.0">Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.28%)</title><rect x="650.8" y="323.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="653.8" y="334.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.14%)</title><rect x="654.0" y="323.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="657.0" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 1.33%)</title><rect x="655.7" y="323.0" width="15.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="658.7" y="334.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.14%)</title><rect x="663.3" y="307.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="666.3" y="318.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="664.3" y="291.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="667.3" y="302.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.14%)</title><rect x="664.9" y="307.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="667.9" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.32%)</title><rect x="666.5" y="307.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="669.5" y="318.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.09%)</title><rect x="670.3" y="307.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="673.3" y="318.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.05%)</title><rect x="671.4" y="323.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="674.4" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.32%)</title><rect x="672.0" y="323.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="675.0" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="675.8" y="323.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="678.8" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (41 samples, 1.89%)</title><rect x="676.3" y="323.0" width="22.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="679.3" y="334.0">_..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.09%)</title><rect x="698.6" y="323.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="701.6" y="334.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.05%)</title><rect x="699.6" y="323.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="702.6" y="334.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.09%)</title><rect x="700.2" y="323.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="703.2" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.05%)</title><rect x="701.3" y="323.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="704.3" y="334.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 3.18%)</title><rect x="701.8" y="339.0" width="37.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="704.8" y="350.0">[un..</text>
</g>
<g>
<title>__condvar_dec_grefs (2 samples, 0.09%)</title><rect x="701.8" y="323.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="704.8" y="334.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.28%)</title><rect x="702.9" y="323.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="705.9" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.18%)</title><rect x="706.2" y="323.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="709.2" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="708.3" y="323.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="711.3" y="334.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (56 samples, 2.58%)</title><rect x="708.9" y="323.0" width="30.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="711.9" y="334.0">pt..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.09%)</title><rect x="739.3" y="339.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.3" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.09%)</title><rect x="740.4" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="743.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.14%)</title><rect x="741.5" y="371.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="744.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.37%)</title><rect x="743.1" y="387.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="746.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.37%)</title><rect x="743.1" y="371.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="746.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.37%)</title><rect x="743.1" y="355.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="746.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.14%)</title><rect x="745.8" y="339.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="748.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.14%)</title><rect x="745.8" y="323.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="748.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.14%)</title><rect x="745.8" y="307.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="748.8" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.09%)</title><rect x="745.8" y="291.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="748.8" y="302.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="746.3" y="275.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="749.3" y="286.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="746.9" y="291.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="749.9" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="746.9" y="275.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="749.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 3.36%)</title><rect x="747.4" y="387.0" width="39.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="750.4" y="398.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 3.36%)</title><rect x="747.4" y="371.0" width="39.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.4" y="382.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (73 samples, 3.36%)</title><rect x="747.4" y="355.0" width="39.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="750.4" y="366.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.09%)</title><rect x="754.5" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="757.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (58 samples, 2.67%)</title><rect x="755.6" y="339.0" width="31.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.6" y="350.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (58 samples, 2.67%)</title><rect x="755.6" y="323.0" width="31.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.6" y="334.0">jd..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="756.1" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="759.1" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.09%)</title><rect x="756.7" y="307.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="759.7" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="757.7" y="307.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="760.7" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark (29 samples, 1.33%)</title><rect x="758.3" y="307.0" width="15.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="761.3" y="318.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="758.3" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.3" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.09%)</title><rect x="758.8" y="291.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="761.8" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.14%)</title><rect x="759.9" y="291.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="762.9" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (8 samples, 0.37%)</title><rect x="761.6" y="291.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.6" y="302.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.09%)</title><rect x="765.9" y="291.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="768.9" y="302.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.05%)</title><rect x="767.0" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="770.0" y="302.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (6 samples, 0.28%)</title><rect x="767.5" y="291.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="770.5" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.23%)</title><rect x="770.8" y="291.0" width="2.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="773.8" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.05%)</title><rect x="773.5" y="291.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="776.5" y="302.0"></text>
</g>
<g>
<title>__pthread_cond_signal (24 samples, 1.10%)</title><rect x="774.0" y="307.0" width="13.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="777.0" y="318.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (733 samples, 33.73%)</title><rect x="787.1" y="467.0" width="398.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="790.1" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.05%)</title><rect x="790.3" y="451.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="793.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.05%)</title><rect x="790.9" y="451.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.9" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (9 samples, 0.41%)</title><rect x="791.4" y="451.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="794.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.37%)</title><rect x="792.0" y="435.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="795.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (5 samples, 0.23%)</title><rect x="793.6" y="419.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.6" y="430.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (64 samples, 2.95%)</title><rect x="796.3" y="451.0" width="34.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="799.3" y="462.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (56 samples, 2.58%)</title><rect x="800.6" y="435.0" width="30.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="803.6" y="446.0">on..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.05%)</title><rect x="803.4" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="806.4" y="430.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.05%)</title><rect x="803.4" y="403.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.4" y="414.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="803.4" y="387.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.4" y="398.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.05%)</title><rect x="803.4" y="371.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="806.4" y="382.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.09%)</title><rect x="803.9" y="419.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="806.9" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.46%)</title><rect x="805.0" y="419.0" width="5.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="808.0" y="430.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.09%)</title><rect x="808.8" y="403.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="811.8" y="414.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.05%)</title><rect x="809.9" y="403.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="812.9" y="414.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.14%)</title><rect x="810.4" y="419.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="813.4" y="430.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.09%)</title><rect x="812.1" y="419.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="815.1" y="430.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.05%)</title><rect x="813.1" y="419.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="816.1" y="430.0"></text>
</g>
<g>
<title>epoll_wait (32 samples, 1.47%)</title><rect x="813.7" y="419.0" width="17.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="816.7" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (649 samples, 29.87%)</title><rect x="831.1" y="451.0" width="352.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="834.1" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (648 samples, 29.82%)</title><rect x="831.6" y="435.0" width="351.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="834.6" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (567 samples, 26.09%)</title><rect x="832.7" y="419.0" width="307.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="835.7" y="430.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>RequestHandler0_handleEntityRequest.handleRequest (1 samples, 0.05%)</title><rect x="834.3" y="403.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.3" y="414.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.28%)</title><rect x="834.9" y="403.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="837.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (496 samples, 22.83%)</title><rect x="838.1" y="403.0" width="269.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.1" y="414.0">one/nio/http/HttpSession.handleParse..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (496 samples, 22.83%)</title><rect x="838.1" y="387.0" width="269.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.1" y="398.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_handleEntityRequest.handleRequest (491 samples, 22.60%)</title><rect x="838.1" y="371.0" width="266.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="841.1" y="382.0">RequestHandler0_handleEntityRequest...</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.55%)</title><rect x="838.1" y="355.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="841.1" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.14%)</title><rect x="841.9" y="339.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.14%)</title><rect x="841.9" y="323.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.05%)</title><rect x="843.0" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="846.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.09%)</title><rect x="843.5" y="339.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.09%)</title><rect x="843.5" y="323.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (12 samples, 0.55%)</title><rect x="844.6" y="355.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.55%)</title><rect x="844.6" y="339.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="847.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.23%)</title><rect x="846.3" y="323.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="849.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.23%)</title><rect x="846.3" y="307.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.09%)</title><rect x="847.9" y="291.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="849.0" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.0" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="849.0" y="307.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.0" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="849.5" y="323.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="852.5" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.09%)</title><rect x="850.1" y="323.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="850.6" y="307.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="853.6" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="850.6" y="291.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="853.6" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.05%)</title><rect x="850.6" y="275.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.handleEntityRequest (467 samples, 21.49%)</title><rect x="851.2" y="355.0" width="253.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.2" y="366.0">ru/mail/polis/service/mariarheon/A..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (100 samples, 4.60%)</title><rect x="851.2" y="339.0" width="54.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.2" y="350.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (99 samples, 4.56%)</title><rect x="851.7" y="323.0" width="53.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.7" y="334.0">java/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="852.8" y="307.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="855.8" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="852.8" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.8" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="852.8" y="275.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="855.8" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="852.8" y="259.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.8" y="270.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="852.8" y="243.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="855.8" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="852.8" y="227.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="855.8" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.23%)</title><rect x="853.3" y="307.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="856.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (91 samples, 4.19%)</title><rect x="856.0" y="307.0" width="49.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="859.0" y="318.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (91 samples, 4.19%)</title><rect x="856.0" y="291.0" width="49.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.0" y="302.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park (50 samples, 2.30%)</title><rect x="857.1" y="275.0" width="27.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="860.1" y="286.0">U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.09%)</title><rect x="859.3" y="259.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="862.3" y="270.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="860.4" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="863.4" y="270.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.05%)</title><rect x="860.9" y="259.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="863.9" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.55%)</title><rect x="861.5" y="259.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.5" y="270.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="864.2" y="243.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.2" y="254.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="864.2" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.2" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.09%)</title><rect x="864.7" y="243.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="867.7" y="254.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.18%)</title><rect x="865.8" y="243.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="868.8" y="254.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.05%)</title><rect x="868.0" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="871.0" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.18%)</title><rect x="868.5" y="259.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="871.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.09%)</title><rect x="870.7" y="259.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="873.7" y="270.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.09%)</title><rect x="871.8" y="259.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="874.8" y="270.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.05%)</title><rect x="872.9" y="259.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="875.9" y="270.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (19 samples, 0.87%)</title><rect x="873.4" y="259.0" width="10.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="876.4" y="270.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="883.7" y="259.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="886.7" y="270.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 1.75%)</title><rect x="884.3" y="275.0" width="20.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="887.3" y="286.0"></text>
</g>
<g>
<title>__condvar_confirm_wakeup (1 samples, 0.05%)</title><rect x="884.3" y="259.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="887.3" y="270.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (2 samples, 0.09%)</title><rect x="884.8" y="259.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="887.8" y="270.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.14%)</title><rect x="885.9" y="259.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="888.9" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.05%)</title><rect x="887.5" y="259.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="890.5" y="270.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="888.1" y="259.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="891.1" y="270.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (30 samples, 1.38%)</title><rect x="888.6" y="259.0" width="16.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="891.6" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.05%)</title><rect x="904.9" y="275.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="907.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.processRequest (45 samples, 2.07%)</title><rect x="905.5" y="339.0" width="24.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.5" y="350.0">r..</text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (45 samples, 2.07%)</title><rect x="905.5" y="323.0" width="24.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.5" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (40 samples, 1.84%)</title><rect x="908.2" y="307.0" width="21.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="911.2" y="318.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (40 samples, 1.84%)</title><rect x="908.2" y="291.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="911.2" y="302.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (4 samples, 0.18%)</title><rect x="908.2" y="275.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="911.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.18%)</title><rect x="908.2" y="259.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="911.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.18%)</title><rect x="908.2" y="243.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="911.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.18%)</title><rect x="908.2" y="227.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="911.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.18%)</title><rect x="910.3" y="275.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="913.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.18%)</title><rect x="910.3" y="259.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="913.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.05%)</title><rect x="911.4" y="243.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.05%)</title><rect x="911.4" y="227.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.05%)</title><rect x="911.4" y="211.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="914.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.05%)</title><rect x="911.4" y="195.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="914.4" y="206.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.05%)</title><rect x="911.4" y="179.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="914.4" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="911.4" y="163.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="914.4" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.05%)</title><rect x="912.0" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="915.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32 samples, 1.47%)</title><rect x="912.5" y="275.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="915.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 1.47%)</title><rect x="912.5" y="259.0" width="17.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="915.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 1.47%)</title><rect x="912.5" y="243.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="915.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 1.43%)</title><rect x="913.1" y="227.0" width="16.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.1" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (31 samples, 1.43%)</title><rect x="913.1" y="211.0" width="16.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="916.1" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="913.6" y="195.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.6" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.05%)</title><rect x="914.1" y="195.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="917.1" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark (12 samples, 0.55%)</title><rect x="914.7" y="195.0" width="6.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="917.7" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.14%)</title><rect x="916.3" y="179.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.3" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.05%)</title><rect x="917.9" y="179.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="920.9" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.05%)</title><rect x="918.5" y="179.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="921.5" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.18%)</title><rect x="919.0" y="179.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="922.0" y="190.0"></text>
</g>
<g>
<title>__pthread_cond_signal (16 samples, 0.74%)</title><rect x="921.2" y="195.0" width="8.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="924.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.sendToReplicas (206 samples, 9.48%)</title><rect x="929.9" y="339.0" width="111.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.9" y="350.0">ru/mail/polis..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="934.8" y="323.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="937.8" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="934.8" y="307.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.8" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="934.8" y="291.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="937.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="934.8" y="275.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.8" y="286.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="934.8" y="259.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="937.8" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.05%)</title><rect x="935.3" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="938.3" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.05%)</title><rect x="935.3" y="307.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="938.3" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.05%)</title><rect x="935.3" y="291.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="938.3" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.05%)</title><rect x="935.3" y="275.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.3" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="935.3" y="259.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="938.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="935.3" y="243.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="938.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (86 samples, 3.96%)</title><rect x="935.9" y="323.0" width="46.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.9" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (85 samples, 3.91%)</title><rect x="936.4" y="307.0" width="46.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="939.4" y="318.0">java..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.18%)</title><rect x="939.7" y="291.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="942.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (75 samples, 3.45%)</title><rect x="941.8" y="291.0" width="40.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.8" y="302.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (74 samples, 3.41%)</title><rect x="942.4" y="275.0" width="40.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="945.4" y="286.0">jdk..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="943.5" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park (39 samples, 1.79%)</title><rect x="944.0" y="259.0" width="21.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="947.0" y="270.0">U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.09%)</title><rect x="945.1" y="243.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.1" y="254.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.05%)</title><rect x="946.2" y="243.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="949.2" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.55%)</title><rect x="946.7" y="243.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="949.7" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.09%)</title><rect x="951.1" y="227.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.1" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.09%)</title><rect x="952.2" y="227.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="955.2" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.18%)</title><rect x="953.2" y="243.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="956.2" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.09%)</title><rect x="955.4" y="243.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="958.4" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.09%)</title><rect x="956.5" y="243.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="959.5" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.05%)</title><rect x="957.6" y="243.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="960.6" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (13 samples, 0.60%)</title><rect x="958.1" y="243.0" width="7.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="961.1" y="254.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 1.43%)</title><rect x="965.2" y="259.0" width="16.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="968.2" y="270.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (5 samples, 0.23%)</title><rect x="965.2" y="243.0" width="2.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="968.2" y="254.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.23%)</title><rect x="967.9" y="243.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="970.9" y="254.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.09%)</title><rect x="970.6" y="243.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="973.6" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.14%)</title><rect x="971.7" y="243.0" width="1.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="974.7" y="254.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (16 samples, 0.74%)</title><rect x="973.3" y="243.0" width="8.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="976.3" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.05%)</title><rect x="982.0" y="259.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOn (25 samples, 1.15%)</title><rect x="982.6" y="323.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="985.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (25 samples, 1.15%)</title><rect x="982.6" y="307.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="985.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (23 samples, 1.06%)</title><rect x="983.6" y="291.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="986.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (23 samples, 1.06%)</title><rect x="983.6" y="275.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="986.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (8 samples, 0.37%)</title><rect x="983.6" y="259.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="986.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (8 samples, 0.37%)</title><rect x="983.6" y="243.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="986.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (8 samples, 0.37%)</title><rect x="983.6" y="227.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="986.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.37%)</title><rect x="983.6" y="211.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="986.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.14%)</title><rect x="988.0" y="259.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="991.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.14%)</title><rect x="988.0" y="243.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.09%)</title><rect x="988.0" y="227.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="991.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.09%)</title><rect x="988.0" y="211.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="991.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.09%)</title><rect x="988.0" y="195.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="991.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.09%)</title><rect x="988.0" y="179.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="991.0" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.05%)</title><rect x="988.0" y="163.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="991.0" y="174.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.05%)</title><rect x="988.5" y="163.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="991.5" y="174.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.05%)</title><rect x="988.5" y="147.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.5" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.05%)</title><rect x="989.1" y="227.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="992.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.55%)</title><rect x="989.6" y="259.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="992.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.55%)</title><rect x="989.6" y="243.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="992.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.55%)</title><rect x="989.6" y="227.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="992.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.51%)</title><rect x="990.2" y="211.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="993.2" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (11 samples, 0.51%)</title><rect x="990.2" y="195.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="993.2" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.09%)</title><rect x="990.2" y="179.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.2" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.18%)</title><rect x="991.3" y="179.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="994.3" y="190.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.05%)</title><rect x="991.3" y="163.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.3" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.05%)</title><rect x="991.8" y="163.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.8" y="174.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.09%)</title><rect x="992.3" y="163.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.3" y="174.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.18%)</title><rect x="993.4" y="179.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="996.4" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.05%)</title><rect x="995.6" y="179.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="998.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.processRequest (9 samples, 0.41%)</title><rect x="996.1" y="323.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="999.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (9 samples, 0.41%)</title><rect x="996.1" y="307.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="999.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.18%)</title><rect x="998.9" y="291.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1001.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.18%)</title><rect x="998.9" y="275.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1001.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.14%)</title><rect x="998.9" y="259.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1001.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.14%)</title><rect x="998.9" y="243.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1001.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.14%)</title><rect x="998.9" y="227.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1001.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.14%)</title><rect x="998.9" y="211.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1001.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="1000.5" y="259.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1003.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="1000.5" y="243.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1003.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.05%)</title><rect x="1000.5" y="227.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (57 samples, 2.62%)</title><rect x="1001.0" y="323.0" width="31.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1004.0" y="334.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (56 samples, 2.58%)</title><rect x="1001.6" y="307.0" width="30.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1004.6" y="318.0">on..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.18%)</title><rect x="1003.2" y="291.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1006.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.18%)</title><rect x="1003.2" y="275.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1006.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.18%)</title><rect x="1003.2" y="259.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1006.2" y="270.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.05%)</title><rect x="1003.7" y="243.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1006.7" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.09%)</title><rect x="1004.3" y="243.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.3" y="254.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.05%)</title><rect x="1004.3" y="227.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1007.3" y="238.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1004.8" y="227.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1007.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (48 samples, 2.21%)</title><rect x="1005.4" y="291.0" width="26.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1008.4" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.92%)</title><rect x="1006.5" y="275.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1009.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1011.3" y="259.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1014.3" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1011.3" y="243.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.3" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1011.3" y="227.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.3" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1011.3" y="211.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.3" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1011.3" y="195.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.3" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1011.3" y="179.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.3" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1011.3" y="163.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.3" y="174.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="1011.3" y="147.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.3" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.46%)</title><rect x="1011.9" y="259.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1014.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.46%)</title><rect x="1011.9" y="243.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1014.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (10 samples, 0.46%)</title><rect x="1011.9" y="227.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1014.9" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1016.8" y="211.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1019.8" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 1.20%)</title><rect x="1017.3" y="275.0" width="14.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1020.3" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 1.20%)</title><rect x="1017.3" y="259.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1020.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (26 samples, 1.20%)</title><rect x="1017.3" y="243.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1020.3" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (24 samples, 1.10%)</title><rect x="1018.4" y="227.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.4" y="238.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (11 samples, 0.51%)</title><rect x="1018.9" y="211.0" width="6.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1021.9" y="222.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.05%)</title><rect x="1019.5" y="195.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1022.5" y="206.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.41%)</title><rect x="1020.0" y="195.0" width="4.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1023.0" y="206.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="1022.7" y="179.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1025.7" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.14%)</title><rect x="1023.3" y="179.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1026.3" y="190.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.09%)</title><rect x="1023.8" y="163.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.8" y="174.0"></text>
</g>
<g>
<title>__libc_send (8 samples, 0.37%)</title><rect x="1024.9" y="211.0" width="4.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1027.9" y="222.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.05%)</title><rect x="1029.3" y="211.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1032.3" y="222.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.09%)</title><rect x="1029.8" y="211.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1032.8" y="222.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.05%)</title><rect x="1030.9" y="211.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1033.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="1031.4" y="291.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNodes (16 samples, 0.74%)</title><rect x="1032.0" y="323.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1035.0" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.28%)</title><rect x="1032.5" y="307.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1035.5" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.28%)</title><rect x="1032.5" y="291.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.5" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.28%)</title><rect x="1032.5" y="275.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1035.5" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.28%)</title><rect x="1032.5" y="259.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1035.5" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.28%)</title><rect x="1032.5" y="243.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1035.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ReplicasResponseComposer.addResponse (2 samples, 0.09%)</title><rect x="1034.7" y="227.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1037.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNodeIndex (9 samples, 0.41%)</title><rect x="1035.8" y="307.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1038.8" y="318.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.05%)</title><rect x="1039.6" y="291.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.6" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.05%)</title><rect x="1039.6" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1042.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.05%)</title><rect x="1040.1" y="291.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ReplicasResponseComposer.addResponse (2 samples, 0.09%)</title><rect x="1040.7" y="323.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (2 samples, 0.09%)</title><rect x="1040.7" y="307.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1043.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.09%)</title><rect x="1040.7" y="291.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (116 samples, 5.34%)</title><rect x="1041.8" y="339.0" width="62.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.8" y="350.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (109 samples, 5.02%)</title><rect x="1045.6" y="323.0" width="59.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1048.6" y="334.0">one/ni..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.23%)</title><rect x="1048.3" y="307.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1051.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.23%)</title><rect x="1048.3" y="291.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1051.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.23%)</title><rect x="1048.3" y="275.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1051.3" y="286.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="1049.4" y="259.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1052.4" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1049.4" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.4" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1049.9" y="259.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1052.9" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="1050.4" y="259.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.4" y="270.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1050.4" y="243.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1053.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (94 samples, 4.33%)</title><rect x="1051.0" y="307.0" width="51.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1054.0" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (34 samples, 1.56%)</title><rect x="1051.0" y="291.0" width="18.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1054.0" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.55%)</title><rect x="1062.9" y="275.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1065.9" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (12 samples, 0.55%)</title><rect x="1062.9" y="259.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1065.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (12 samples, 0.55%)</title><rect x="1062.9" y="243.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1065.9" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1068.9" y="227.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1071.9" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (60 samples, 2.76%)</title><rect x="1069.4" y="291.0" width="32.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1072.4" y="302.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (60 samples, 2.76%)</title><rect x="1069.4" y="275.0" width="32.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1072.4" y="286.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.05%)</title><rect x="1070.0" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1073.0" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (58 samples, 2.67%)</title><rect x="1070.5" y="259.0" width="31.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1073.5" y="270.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="1071.6" y="243.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1074.6" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (55 samples, 2.53%)</title><rect x="1072.2" y="243.0" width="29.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1075.2" y="254.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (19 samples, 0.87%)</title><rect x="1074.9" y="227.0" width="10.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1077.9" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="1078.7" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.7" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1079.2" y="211.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.2" y="222.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.14%)</title><rect x="1079.8" y="211.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1082.8" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.28%)</title><rect x="1081.4" y="211.0" width="3.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1084.4" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1083.0" y="195.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.0" y="206.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.09%)</title><rect x="1083.6" y="195.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1086.6" y="206.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.05%)</title><rect x="1084.1" y="179.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.1" y="190.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.05%)</title><rect x="1084.7" y="211.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.7" y="222.0"></text>
</g>
<g>
<title>__libc_send (25 samples, 1.15%)</title><rect x="1085.2" y="227.0" width="13.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1088.2" y="238.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.18%)</title><rect x="1098.8" y="227.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1101.8" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.09%)</title><rect x="1100.9" y="227.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1103.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.23%)</title><rect x="1102.0" y="307.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1105.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.18%)</title><rect x="1102.6" y="291.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1105.6" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.18%)</title><rect x="1102.6" y="275.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1105.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.23%)</title><rect x="1104.7" y="371.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1107.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.23%)</title><rect x="1104.7" y="355.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1107.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.09%)</title><rect x="1104.7" y="339.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1107.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.14%)</title><rect x="1105.8" y="339.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1108.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.14%)</title><rect x="1105.8" y="323.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1108.8" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.14%)</title><rect x="1105.8" y="307.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1108.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 1.01%)</title><rect x="1107.5" y="403.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1110.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1108.0" y="387.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1111.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1108.0" y="371.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.0" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.05%)</title><rect x="1108.0" y="355.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.0" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1108.0" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.0" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1108.0" y="323.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.0" y="334.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.05%)</title><rect x="1108.0" y="307.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="1108.5" y="371.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1111.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="1108.5" y="355.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1111.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.05%)</title><rect x="1108.5" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1111.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.05%)</title><rect x="1108.5" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1111.5" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.69%)</title><rect x="1109.1" y="387.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.60%)</title><rect x="1110.2" y="371.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1113.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1116.7" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1119.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1116.7" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1119.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="1116.7" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1119.7" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1116.7" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.7" y="318.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1116.7" y="291.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.7" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1116.7" y="275.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.7" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1116.7" y="259.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.7" y="270.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1116.7" y="243.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.7" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.05%)</title><rect x="1116.7" y="227.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.18%)</title><rect x="1117.2" y="387.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1120.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.37%)</title><rect x="1119.4" y="403.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1122.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.18%)</title><rect x="1119.9" y="387.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.18%)</title><rect x="1119.9" y="371.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1122.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.14%)</title><rect x="1122.1" y="387.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1125.1" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.14%)</title><rect x="1122.1" y="371.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1125.1" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (31 samples, 1.43%)</title><rect x="1123.8" y="403.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1126.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.41%)</title><rect x="1135.7" y="387.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1138.7" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1138.4" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.4" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="1139.0" y="371.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.0" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="1139.0" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.0" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="1139.0" y="339.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.0" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1139.0" y="323.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.0" y="334.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1139.0" y="307.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.0" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1139.0" y="291.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.0" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="1139.0" y="275.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1139.5" y="371.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1139.5" y="355.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1142.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.09%)</title><rect x="1139.5" y="339.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1142.5" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.09%)</title><rect x="1139.5" y="323.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.5" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.09%)</title><rect x="1139.5" y="307.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.5" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.09%)</title><rect x="1139.5" y="291.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.09%)</title><rect x="1139.5" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.5" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1139.5" y="259.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1139.5" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.5" y="254.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="1139.5" y="227.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.5" y="238.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="1140.0" y="259.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.0" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (79 samples, 3.64%)</title><rect x="1140.6" y="419.0" width="42.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1143.6" y="430.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (75 samples, 3.45%)</title><rect x="1142.8" y="403.0" width="40.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1145.8" y="414.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 0.97%)</title><rect x="1146.0" y="387.0" width="11.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1149.0" y="398.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.09%)</title><rect x="1146.0" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.0" y="382.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.05%)</title><rect x="1147.1" y="371.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.1" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="1147.6" y="371.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.6" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1148.2" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.2" y="382.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (5 samples, 0.23%)</title><rect x="1148.7" y="371.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1151.7" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.37%)</title><rect x="1151.4" y="371.0" width="4.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1154.4" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="1154.2" y="355.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.2" y="366.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.09%)</title><rect x="1154.7" y="355.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1157.7" y="366.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.05%)</title><rect x="1155.2" y="339.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="350.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.09%)</title><rect x="1155.8" y="371.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.8" y="382.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.05%)</title><rect x="1156.9" y="371.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.9" y="382.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.18%)</title><rect x="1157.4" y="387.0" width="2.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1160.4" y="398.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.09%)</title><rect x="1159.6" y="387.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1162.6" y="398.0"></text>
</g>
<g>
<title>__recv (38 samples, 1.75%)</title><rect x="1160.7" y="387.0" width="20.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1163.7" y="398.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.18%)</title><rect x="1181.3" y="387.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.14%)</title><rect x="1183.5" y="451.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.05%)</title><rect x="1184.6" y="435.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>start_thread (9 samples, 0.41%)</title><rect x="1185.1" y="467.0" width="4.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1188.1" y="478.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.41%)</title><rect x="1185.1" y="451.0" width="4.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1188.1" y="462.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.41%)</title><rect x="1185.1" y="435.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="446.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.37%)</title><rect x="1185.1" y="419.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="430.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 0.37%)</title><rect x="1185.1" y="403.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="414.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.32%)</title><rect x="1185.1" y="387.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="398.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.05%)</title><rect x="1185.1" y="371.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="382.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.28%)</title><rect x="1185.7" y="371.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1188.9" y="387.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1188.9" y="371.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="382.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1188.9" y="355.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.9" y="366.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1188.9" y="339.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="350.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1188.9" y="323.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="334.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.05%)</title><rect x="1188.9" y="307.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="318.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.05%)</title><rect x="1188.9" y="291.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="302.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.05%)</title><rect x="1188.9" y="275.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.9" y="286.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.05%)</title><rect x="1189.5" y="419.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.5" y="430.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.05%)</title><rect x="1189.5" y="403.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.5" y="414.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.05%)</title><rect x="1189.5" y="387.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.5" y="398.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.05%)</title><rect x="1189.5" y="371.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.5" y="382.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.05%)</title><rect x="1189.5" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.5" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.05%)</title><rect x="1189.5" y="339.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.5" y="350.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.05%)</title><rect x="1189.5" y="323.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.5" y="334.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.05%)</title><rect x="1189.5" y="307.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.5" y="318.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="1189.5" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="302.0"></text>
</g>
</g>
</svg>
