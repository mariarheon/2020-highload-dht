<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (1,057 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.28%)</title><rect x="10.0" y="723.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.09%)</title><rect x="10.0" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.19%)</title><rect x="11.1" y="707.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.19%)</title><rect x="11.1" y="691.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.1" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="11.1" y="675.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.1" y="686.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.09%)</title><rect x="11.1" y="659.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.1" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="12.2" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.2" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="12.2" y="643.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.2" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.09%)</title><rect x="12.2" y="627.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="13.3" y="723.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.3" y="734.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.09%)</title><rect x="13.3" y="707.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="16.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (738 samples, 69.82%)</title><rect x="14.5" y="723.0" width="823.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="734.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (738 samples, 69.82%)</title><rect x="14.5" y="707.0" width="823.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="718.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (738 samples, 69.82%)</title><rect x="14.5" y="691.0" width="823.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.5" y="702.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.19%)</title><rect x="25.6" y="675.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.6" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (11 samples, 1.04%)</title><rect x="27.9" y="675.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (11 samples, 1.04%)</title><rect x="27.9" y="659.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.9" y="670.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (9 samples, 0.85%)</title><rect x="29.0" y="643.0" width="10.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="32.0" y="654.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="34.6" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="37.6" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="35.7" y="627.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="38.7" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="36.8" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="39.8" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="37.9" y="627.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="40.9" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="39.0" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="42.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.09%)</title><rect x="40.1" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.1" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.09%)</title><rect x="40.1" y="659.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.28%)</title><rect x="41.3" y="675.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.28%)</title><rect x="41.3" y="659.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.19%)</title><rect x="42.4" y="643.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (15 samples, 1.42%)</title><rect x="44.6" y="675.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.6" y="686.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.28%)</title><rect x="46.8" y="659.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="49.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.66%)</title><rect x="50.2" y="659.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.66%)</title><rect x="50.2" y="643.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.2" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.09%)</title><rect x="50.2" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.2" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="50.2" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="53.2" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="50.2" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="53.2" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="50.2" y="579.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="53.2" y="590.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.09%)</title><rect x="50.2" y="563.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="53.2" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.09%)</title><rect x="50.2" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.2" y="558.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.09%)</title><rect x="50.2" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="53.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.57%)</title><rect x="51.3" y="627.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.09%)</title><rect x="54.7" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$66/1991441571.run (1 samples, 0.09%)</title><rect x="55.8" y="611.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.8" y="622.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="56.9" y="611.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="59.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$66/1991441571.run (2 samples, 0.19%)</title><rect x="58.0" y="659.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$75/1951744626.run (1 samples, 0.09%)</title><rect x="60.2" y="659.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (204 samples, 19.30%)</title><rect x="61.4" y="675.0" width="227.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.4" y="686.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (201 samples, 19.02%)</title><rect x="64.7" y="659.0" width="224.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.7" y="670.0">java/util/concurrent/ArrayBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (166 samples, 15.70%)</title><rect x="68.1" y="643.0" width="185.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.1" y="654.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.76%)</title><rect x="71.4" y="627.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.09%)</title><rect x="79.2" y="611.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.09%)</title><rect x="79.2" y="595.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="79.2" y="579.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.2" y="590.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.09%)</title><rect x="79.2" y="563.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="82.2" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="79.2" y="547.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="82.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.57%)</title><rect x="80.3" y="627.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.57%)</title><rect x="80.3" y="611.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.19%)</title><rect x="82.6" y="595.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.19%)</title><rect x="82.6" y="579.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.19%)</title><rect x="82.6" y="563.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.6" y="574.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.09%)</title><rect x="82.6" y="547.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="85.6" y="558.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.09%)</title><rect x="82.6" y="531.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="85.6" y="542.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.09%)</title><rect x="83.7" y="547.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="86.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.19%)</title><rect x="84.8" y="595.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.47%)</title><rect x="87.0" y="627.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.47%)</title><rect x="87.0" y="611.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (143 samples, 13.53%)</title><rect x="92.6" y="627.0" width="159.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.6" y="638.0">java/util/concurrent..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (142 samples, 13.43%)</title><rect x="93.7" y="611.0" width="158.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.7" y="622.0">jdk/internal/misc/Un..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="97.1" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="100.1" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (90 samples, 8.51%)</title><rect x="98.2" y="595.0" width="100.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="101.2" y="606.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="104.9" y="579.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="107.9" y="590.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.09%)</title><rect x="107.1" y="579.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="110.1" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="108.2" y="579.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="111.2" y="590.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="109.4" y="579.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="112.4" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (33 samples, 3.12%)</title><rect x="111.6" y="579.0" width="36.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="114.6" y="590.0">Par..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.28%)</title><rect x="128.3" y="563.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="131.3" y="574.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="130.6" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="133.6" y="558.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="131.7" y="563.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="134.7" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.85%)</title><rect x="133.9" y="563.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="136.9" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.38%)</title><rect x="144.0" y="563.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="147.0" y="574.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="148.4" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="151.4" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.85%)</title><rect x="149.5" y="579.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="152.5" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="159.6" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="162.6" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (28 samples, 2.65%)</title><rect x="160.7" y="579.0" width="31.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="163.7" y="590.0">__..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.19%)</title><rect x="192.0" y="579.0" width="2.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="195.0" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.28%)</title><rect x="194.2" y="579.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="197.2" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.09%)</title><rect x="197.5" y="579.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="200.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 4.16%)</title><rect x="198.7" y="595.0" width="49.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="201.7" y="606.0">[unkn..</text>
</g>
<g>
<title>__condvar_dec_grefs (4 samples, 0.38%)</title><rect x="198.7" y="579.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="201.7" y="590.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.19%)</title><rect x="203.1" y="579.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="206.1" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.28%)</title><rect x="205.4" y="579.0" width="3.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="208.4" y="590.0"></text>
</g>
<g>
<title>_pthread_cleanup_pop (1 samples, 0.09%)</title><rect x="208.7" y="579.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="211.7" y="590.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (34 samples, 3.22%)</title><rect x="209.8" y="579.0" width="38.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="212.8" y="590.0">pth..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.38%)</title><rect x="247.8" y="595.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="250.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="252.3" y="627.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.57%)</title><rect x="253.4" y="643.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.57%)</title><rect x="253.4" y="627.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.4" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.19%)</title><rect x="253.4" y="611.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.19%)</title><rect x="253.4" y="595.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.4" y="606.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.09%)</title><rect x="253.4" y="579.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="256.4" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.09%)</title><rect x="253.4" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="256.4" y="574.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="254.5" y="579.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="257.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.38%)</title><rect x="255.6" y="611.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.19%)</title><rect x="255.6" y="595.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.19%)</title><rect x="257.8" y="595.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.19%)</title><rect x="257.8" y="579.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.19%)</title><rect x="257.8" y="563.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.8" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.09%)</title><rect x="257.8" y="547.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="260.8" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="257.8" y="531.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="260.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="258.9" y="547.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="261.9" y="558.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.09%)</title><rect x="258.9" y="531.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="261.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (26 samples, 2.46%)</title><rect x="260.1" y="643.0" width="29.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.1" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 2.46%)</title><rect x="260.1" y="627.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.1" y="638.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 2.46%)</title><rect x="260.1" y="611.0" width="29.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.1" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (26 samples, 2.46%)</title><rect x="260.1" y="595.0" width="29.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.1" y="606.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (21 samples, 1.99%)</title><rect x="265.6" y="579.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.6" y="590.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 0.95%)</title><rect x="265.6" y="563.0" width="11.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="268.6" y="574.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="266.8" y="547.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="269.8" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.28%)</title><rect x="267.9" y="547.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="270.9" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.28%)</title><rect x="271.2" y="547.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="274.2" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.19%)</title><rect x="274.6" y="547.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="277.6" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 1.04%)</title><rect x="276.8" y="563.0" width="12.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="279.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.09%)</title><rect x="289.1" y="675.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$66/1991441571.run (203 samples, 19.21%)</title><rect x="290.2" y="675.0" width="226.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.2" y="686.0">ru/mail/polis/service/mariarhe..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$passOn$1 (203 samples, 19.21%)</title><rect x="290.2" y="659.0" width="226.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.2" y="670.0">ru/mail/polis/service/mariarhe..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOnInternal (203 samples, 19.21%)</title><rect x="290.2" y="643.0" width="226.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.2" y="654.0">ru/mail/polis/service/mariarhe..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (43 samples, 4.07%)</title><rect x="290.2" y="627.0" width="48.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.2" y="638.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (42 samples, 3.97%)</title><rect x="291.3" y="611.0" width="46.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.3" y="622.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.38%)</title><rect x="291.3" y="595.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.38%)</title><rect x="291.3" y="579.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.38%)</title><rect x="291.3" y="563.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="293.6" y="547.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="296.6" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="293.6" y="531.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="296.6" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="294.7" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="297.7" y="558.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="294.7" y="531.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="297.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (36 samples, 3.41%)</title><rect x="295.8" y="595.0" width="40.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.8" y="606.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 1.14%)</title><rect x="298.0" y="579.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.0" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.66%)</title><rect x="303.6" y="563.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.6" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.66%)</title><rect x="303.6" y="547.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.66%)</title><rect x="303.6" y="531.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.6" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="309.2" y="515.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="312.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 2.08%)</title><rect x="311.4" y="579.0" width="24.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.4" y="590.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 2.08%)</title><rect x="311.4" y="563.0" width="24.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.4" y="574.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (22 samples, 2.08%)</title><rect x="311.4" y="547.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.4" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.09%)</title><rect x="311.4" y="531.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (21 samples, 1.99%)</title><rect x="312.5" y="531.0" width="23.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.5" y="542.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.57%)</title><rect x="312.5" y="515.0" width="6.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="315.5" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.38%)</title><rect x="313.7" y="499.0" width="4.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="316.7" y="510.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="317.0" y="483.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="320.0" y="494.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.09%)</title><rect x="317.0" y="467.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="320.0" y="478.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.09%)</title><rect x="318.1" y="499.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="321.1" y="510.0"></text>
</g>
<g>
<title>__libc_send (14 samples, 1.32%)</title><rect x="319.2" y="515.0" width="15.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="322.2" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.09%)</title><rect x="334.9" y="515.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="337.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.19%)</title><rect x="336.0" y="595.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.09%)</title><rect x="337.1" y="579.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.1" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="337.1" y="563.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.passOn (160 samples, 15.14%)</title><rect x="338.2" y="627.0" width="178.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.2" y="638.0">ru/mail/polis/service/m..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="340.4" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="340.4" y="595.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="343.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="340.4" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.09%)</title><rect x="340.4" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="343.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (157 samples, 14.85%)</title><rect x="341.6" y="611.0" width="175.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="344.6" y="622.0">one/nio/http/HttpClient..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (157 samples, 14.85%)</title><rect x="341.6" y="595.0" width="175.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.6" y="606.0">one/nio/http/HttpClient..</text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.09%)</title><rect x="341.6" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (66 samples, 6.24%)</title><rect x="342.7" y="579.0" width="73.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.7" y="590.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.57%)</title><rect x="348.3" y="563.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="351.3" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.57%)</title><rect x="348.3" y="547.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="351.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.47%)</title><rect x="348.3" y="531.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="351.3" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.47%)</title><rect x="348.3" y="515.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="351.3" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.09%)</title><rect x="348.3" y="499.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="351.3" y="510.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.09%)</title><rect x="349.4" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="352.4" y="510.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="349.4" y="483.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="352.4" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="350.5" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="353.5" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="350.5" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="353.5" y="494.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.19%)</title><rect x="351.6" y="499.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="354.6" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="353.8" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="356.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (55 samples, 5.20%)</title><rect x="355.0" y="563.0" width="61.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.0" y="574.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (30 samples, 2.84%)</title><rect x="359.4" y="547.0" width="33.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="362.4" y="558.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.09%)</title><rect x="362.8" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="365.8" y="542.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="363.9" y="531.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="366.9" y="542.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="365.0" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="368.0" y="542.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="366.1" y="531.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="369.1" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="367.2" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="370.2" y="542.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.28%)</title><rect x="368.4" y="531.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="371.4" y="542.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.09%)</title><rect x="371.7" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="374.7" y="542.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (17 samples, 1.61%)</title><rect x="372.8" y="531.0" width="19.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="375.8" y="542.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="382.9" y="515.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="385.9" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.28%)</title><rect x="384.0" y="515.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="387.0" y="526.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.28%)</title><rect x="387.3" y="515.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="390.3" y="526.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.09%)</title><rect x="389.6" y="499.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="392.6" y="510.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="390.7" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="393.7" y="526.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.09%)</title><rect x="391.8" y="531.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="394.8" y="542.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.38%)</title><rect x="392.9" y="547.0" width="4.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="395.9" y="558.0"></text>
</g>
<g>
<title>__recv (17 samples, 1.61%)</title><rect x="397.4" y="547.0" width="19.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="400.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (33 samples, 3.12%)</title><rect x="416.4" y="579.0" width="36.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.4" y="590.0">one..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.09%)</title><rect x="417.5" y="563.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="420.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.09%)</title><rect x="417.5" y="547.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.09%)</title><rect x="417.5" y="531.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.09%)</title><rect x="417.5" y="515.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.5" y="526.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.09%)</title><rect x="417.5" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.5" y="510.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.19%)</title><rect x="418.6" y="563.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="421.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.19%)</title><rect x="418.6" y="547.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="421.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.19%)</title><rect x="418.6" y="531.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.19%)</title><rect x="418.6" y="515.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="421.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.09%)</title><rect x="420.8" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.8" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="420.8" y="547.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.8" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="420.8" y="531.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (21 samples, 1.99%)</title><rect x="421.9" y="563.0" width="23.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.9" y="574.0">o..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="433.1" y="547.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="436.1" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.95%)</title><rect x="434.2" y="547.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.2" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.85%)</title><rect x="435.3" y="531.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (7 samples, 0.66%)</title><rect x="445.4" y="563.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="448.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.47%)</title><rect x="447.6" y="547.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="450.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.47%)</title><rect x="447.6" y="531.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.6" y="542.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="451.0" y="515.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="454.0" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="452.1" y="515.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="455.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (5 samples, 0.47%)</title><rect x="453.2" y="579.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.2" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="455.4" y="563.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="458.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.19%)</title><rect x="456.5" y="563.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="459.5" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.19%)</title><rect x="456.5" y="547.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.19%)</title><rect x="456.5" y="531.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="459.5" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (13 samples, 1.23%)</title><rect x="458.8" y="579.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.8" y="590.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (1 samples, 0.09%)</title><rect x="459.9" y="563.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="462.9" y="574.0"></text>
</g>
<g>
<title>__setsockopt (11 samples, 1.04%)</title><rect x="461.0" y="563.0" width="12.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="464.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (35 samples, 3.31%)</title><rect x="473.3" y="579.0" width="39.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.3" y="590.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (20 samples, 1.89%)</title><rect x="474.4" y="563.0" width="22.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="477.4" y="574.0">J..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="477.8" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="480.8" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.19%)</title><rect x="478.9" y="547.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="481.9" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.19%)</title><rect x="481.1" y="547.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="484.1" y="558.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.19%)</title><rect x="483.3" y="547.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="486.3" y="558.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.09%)</title><rect x="485.6" y="547.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.6" y="558.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="486.7" y="547.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="489.7" y="558.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.38%)</title><rect x="487.8" y="547.0" width="4.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="490.8" y="558.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.19%)</title><rect x="490.0" y="531.0" width="2.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="493.0" y="542.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.09%)</title><rect x="491.2" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="494.2" y="526.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.19%)</title><rect x="492.3" y="547.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="495.3" y="558.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.19%)</title><rect x="494.5" y="547.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="497.5" y="558.0"></text>
</g>
<g>
<title>__libc_send (13 samples, 1.23%)</title><rect x="496.7" y="563.0" width="14.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="499.7" y="574.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.09%)</title><rect x="511.2" y="563.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="514.2" y="574.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.09%)</title><rect x="512.4" y="579.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="515.4" y="590.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (3 samples, 0.28%)</title><rect x="513.5" y="579.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="516.5" y="590.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.09%)</title><rect x="514.6" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.6" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.09%)</title><rect x="515.7" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="518.7" y="574.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.09%)</title><rect x="515.7" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="518.7" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.09%)</title><rect x="515.7" y="531.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="518.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$75/1951744626.run (288 samples, 27.25%)</title><rect x="516.8" y="675.0" width="321.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.8" y="686.0">ru/mail/polis/service/mariarheon/AsyncServi..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$handleEntityRequest$0 (288 samples, 27.25%)</title><rect x="516.8" y="659.0" width="321.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.8" y="670.0">ru/mail/polis/service/mariarheon/AsyncServi..</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.put (288 samples, 27.25%)</title><rect x="516.8" y="643.0" width="321.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.8" y="654.0">ru/mail/polis/service/mariarheon/AsyncServi..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="520.2" y="627.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="523.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.upsert (232 samples, 21.95%)</title><rect x="521.3" y="627.0" width="259.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.3" y="638.0">ru/mail/polis/dao/mariarheon/DAOIm..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (229 samples, 21.67%)</title><rect x="521.3" y="611.0" width="255.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.3" y="622.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="521.3" y="595.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="524.3" y="606.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (227 samples, 21.48%)</title><rect x="523.5" y="595.0" width="253.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="526.5" y="606.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (209 samples, 19.77%)</title><rect x="526.9" y="579.0" width="233.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="529.9" y="590.0">Java_org_rocksdb_RocksDB_put__J..</text>
</g>
<g>
<title>malloc (3 samples, 0.28%)</title><rect x="526.9" y="563.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="529.9" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.09%)</title><rect x="530.2" y="563.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="533.2" y="574.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.09%)</title><rect x="531.3" y="563.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="534.3" y="574.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (2 samples, 0.19%)</title><rect x="532.5" y="563.0" width="2.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="535.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.09%)</title><rect x="534.7" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="537.7" y="574.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (201 samples, 19.02%)</title><rect x="535.8" y="563.0" width="224.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.8" y="574.0">rocksdb_put_helper(JNIEnv_*, r..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="535.8" y="547.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.8" y="558.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.09%)</title><rect x="536.9" y="547.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="539.9" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="538.0" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="541.0" y="558.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="539.2" y="547.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="542.2" y="558.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.09%)</title><rect x="540.3" y="547.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="543.3" y="558.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.57%)</title><rect x="541.4" y="547.0" width="6.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="544.4" y="558.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="545.9" y="531.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="548.9" y="542.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="548.1" y="547.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="551.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (188 samples, 17.79%)</title><rect x="549.2" y="547.0" width="209.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="552.2" y="558.0">rocksdb::DB::Put(rocksdb::W..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.09%)</title><rect x="549.2" y="531.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="552.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (187 samples, 17.69%)</title><rect x="550.3" y="531.0" width="208.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="553.3" y="542.0">rocksdb::DBImpl::Put(rocksd..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (185 samples, 17.50%)</title><rect x="550.3" y="515.0" width="206.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="553.3" y="526.0">rocksdb::DB::Put(rocksdb::W..</text>
</g>
<g>
<title>__libc_free (2 samples, 0.19%)</title><rect x="550.3" y="499.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="553.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (171 samples, 16.18%)</title><rect x="552.6" y="499.0" width="190.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="555.6" y="510.0">rocksdb::DBImpl::Write(ro..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.28%)</title><rect x="554.8" y="483.0" width="3.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="557.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.09%)</title><rect x="558.1" y="483.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="561.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.19%)</title><rect x="559.3" y="483.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="562.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (2 samples, 0.19%)</title><rect x="561.5" y="483.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="564.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (152 samples, 14.38%)</title><rect x="563.7" y="483.0" width="169.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="566.7" y="494.0">rocksdb::DBImpl::Write..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.19%)</title><rect x="573.8" y="467.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="576.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.09%)</title><rect x="576.0" y="467.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="579.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.09%)</title><rect x="577.1" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="580.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (2 samples, 0.19%)</title><rect x="578.2" y="467.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="581.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (2 samples, 0.19%)</title><rect x="578.2" y="451.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="581.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) [clone .plt] (1 samples, 0.09%)</title><rect x="580.5" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="583.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (34 samples, 3.22%)</title><rect x="581.6" y="467.0" width="37.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="584.6" y="478.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (30 samples, 2.84%)</title><rect x="583.8" y="451.0" width="33.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="586.8" y="462.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (28 samples, 2.65%)</title><rect x="586.0" y="435.0" width="31.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="589.0" y="446.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (4 samples, 0.38%)</title><rect x="587.2" y="419.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="590.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (16 samples, 1.51%)</title><rect x="591.6" y="419.0" width="17.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="594.6" y="430.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.28%)</title><rect x="591.6" y="403.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="594.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.09%)</title><rect x="595.0" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.19%)</title><rect x="596.1" y="403.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="599.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (10 samples, 0.95%)</title><rect x="598.3" y="403.0" width="11.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="601.3" y="414.0"></text>
</g>
<g>
<title>__libc_write (6 samples, 0.57%)</title><rect x="601.7" y="387.0" width="6.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="604.7" y="398.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="608.4" y="387.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="611.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.09%)</title><rect x="609.5" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="612.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.19%)</title><rect x="610.6" y="419.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (4 samples, 0.38%)</title><rect x="612.8" y="419.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="615.8" y="430.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="612.8" y="403.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="615.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.28%)</title><rect x="614.0" y="403.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="617.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) [clone .plt] (2 samples, 0.19%)</title><rect x="617.3" y="451.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="620.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() [clone .plt] (1 samples, 0.09%)</title><rect x="619.5" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="622.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.19%)</title><rect x="620.7" y="467.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="623.7" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.09%)</title><rect x="620.7" y="451.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="623.7" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.09%)</title><rect x="621.8" y="451.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="624.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (1 samples, 0.09%)</title><rect x="622.9" y="467.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="625.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() [clone .plt] (1 samples, 0.09%)</title><rect x="624.0" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="627.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.19%)</title><rect x="625.1" y="467.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="628.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (49 samples, 4.64%)</title><rect x="627.4" y="467.0" width="54.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="630.4" y="478.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (47 samples, 4.45%)</title><rect x="627.4" y="451.0" width="52.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="630.4" y="462.0">rocks..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.09%)</title><rect x="627.4" y="435.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="630.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (46 samples, 4.35%)</title><rect x="628.5" y="435.0" width="51.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="631.5" y="446.0">rocks..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (45 samples, 4.26%)</title><rect x="629.6" y="419.0" width="50.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="632.6" y="430.0">rocks..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.09%)</title><rect x="629.6" y="403.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="632.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.09%)</title><rect x="630.7" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (43 samples, 4.07%)</title><rect x="631.8" y="403.0" width="48.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="634.8" y="414.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (2 samples, 0.19%)</title><rect x="631.8" y="387.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="634.8" y="398.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.09%)</title><rect x="634.0" y="387.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="637.0" y="398.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.09%)</title><rect x="635.2" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="638.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.09%)</title><rect x="636.3" y="387.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="639.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (36 samples, 3.41%)</title><rect x="637.4" y="387.0" width="40.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="640.4" y="398.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (2 samples, 0.19%)</title><rect x="639.6" y="371.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="642.6" y="382.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (32 samples, 3.03%)</title><rect x="641.9" y="371.0" width="35.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="644.9" y="382.0">boo..</text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (27 samples, 2.55%)</title><rect x="646.3" y="355.0" width="30.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="649.3" y="366.0">/t..</text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (9 samples, 0.85%)</title><rect x="664.2" y="339.0" width="10.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="667.2" y="350.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (1 samples, 0.09%)</title><rect x="665.3" y="323.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="668.3" y="334.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="666.4" y="323.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="669.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.57%)</title><rect x="667.5" y="323.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="670.5" y="334.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (1 samples, 0.09%)</title><rect x="670.9" y="307.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="673.9" y="318.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (1 samples, 0.09%)</title><rect x="672.0" y="307.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="675.0" y="318.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="673.1" y="307.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="676.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.19%)</title><rect x="674.2" y="339.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="677.2" y="350.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (1 samples, 0.09%)</title><rect x="675.4" y="323.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="678.4" y="334.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="676.5" y="355.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="679.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() [clone .plt] (1 samples, 0.09%)</title><rect x="677.6" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="680.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.09%)</title><rect x="678.7" y="387.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="681.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.19%)</title><rect x="679.8" y="451.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (7 samples, 0.66%)</title><rect x="682.1" y="467.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="685.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (6 samples, 0.57%)</title><rect x="683.2" y="451.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="686.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.09%)</title><rect x="683.2" y="435.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="686.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 0.47%)</title><rect x="684.3" y="435.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="687.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.38%)</title><rect x="684.3" y="419.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="687.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (4 samples, 0.38%)</title><rect x="684.3" y="403.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="687.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.38%)</title><rect x="684.3" y="387.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="687.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (3 samples, 0.28%)</title><rect x="685.4" y="371.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="688.4" y="382.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.28%)</title><rect x="685.4" y="355.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="688.4" y="366.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (3 samples, 0.28%)</title><rect x="685.4" y="339.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="688.4" y="350.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni11348028969834550145.so (2 samples, 0.19%)</title><rect x="686.5" y="323.0" width="2.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="689.5" y="334.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.09%)</title><rect x="686.5" y="307.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="689.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.09%)</title><rect x="687.6" y="307.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.09%)</title><rect x="688.8" y="419.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="691.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (33 samples, 3.12%)</title><rect x="689.9" y="467.0" width="36.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.9" y="478.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (2 samples, 0.19%)</title><rect x="726.7" y="467.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="729.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2 samples, 0.19%)</title><rect x="726.7" y="451.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="729.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) [clone .plt] (1 samples, 0.09%)</title><rect x="728.9" y="467.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="731.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) [clone .plt] (1 samples, 0.09%)</title><rect x="730.1" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="733.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.09%)</title><rect x="731.2" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (1 samples, 0.09%)</title><rect x="732.3" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="735.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.09%)</title><rect x="733.4" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="736.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (2 samples, 0.19%)</title><rect x="734.5" y="483.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="737.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.19%)</title><rect x="736.8" y="483.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="739.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.19%)</title><rect x="739.0" y="483.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.09%)</title><rect x="741.2" y="483.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="744.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.09%)</title><rect x="742.3" y="483.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="745.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 0.85%)</title><rect x="743.5" y="499.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.09%)</title><rect x="743.5" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.19%)</title><rect x="744.6" y="483.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.09%)</title><rect x="746.8" y="483.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="749.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (1 samples, 0.09%)</title><rect x="747.9" y="483.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="750.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.09%)</title><rect x="749.0" y="483.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="752.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.09%)</title><rect x="750.2" y="483.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="753.2" y="494.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) [clone .plt] (2 samples, 0.19%)</title><rect x="751.3" y="483.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="754.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.09%)</title><rect x="753.5" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="756.5" y="510.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.09%)</title><rect x="754.6" y="499.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="757.6" y="510.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.09%)</title><rect x="755.7" y="499.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="758.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.09%)</title><rect x="756.8" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) [clone .plt] (1 samples, 0.09%)</title><rect x="758.0" y="515.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="761.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.09%)</title><rect x="759.1" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="762.1" y="558.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.66%)</title><rect x="760.2" y="579.0" width="7.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="763.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="760.2" y="563.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="763.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="760.2" y="547.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="763.2" y="558.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.09%)</title><rect x="760.2" y="531.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.2" y="542.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.09%)</title><rect x="760.2" y="515.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="763.2" y="526.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.09%)</title><rect x="761.3" y="563.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="764.3" y="574.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (2 samples, 0.19%)</title><rect x="762.4" y="563.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="765.4" y="574.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (3 samples, 0.28%)</title><rect x="764.7" y="563.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.7" y="574.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.57%)</title><rect x="768.0" y="579.0" width="6.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="771.0" y="590.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.09%)</title><rect x="774.7" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="777.7" y="590.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.09%)</title><rect x="775.8" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="778.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArrayUnsigned (3 samples, 0.28%)</title><rect x="776.9" y="611.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.trySendResponse (49 samples, 4.64%)</title><rect x="780.3" y="627.0" width="54.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.3" y="638.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (49 samples, 4.64%)</title><rect x="780.3" y="611.0" width="54.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.3" y="622.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.09%)</title><rect x="781.4" y="595.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.09%)</title><rect x="781.4" y="579.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="781.4" y="563.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.4" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="781.4" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="784.4" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="781.4" y="531.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="784.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (43 samples, 4.07%)</title><rect x="782.5" y="595.0" width="48.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.5" y="606.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 1.14%)</title><rect x="783.6" y="579.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.47%)</title><rect x="791.5" y="563.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.5" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.47%)</title><rect x="791.5" y="547.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="794.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.47%)</title><rect x="791.5" y="531.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="794.5" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="795.9" y="515.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="798.9" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 2.84%)</title><rect x="797.0" y="579.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.0" y="590.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 2.84%)</title><rect x="797.0" y="563.0" width="33.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.0" y="574.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (29 samples, 2.74%)</title><rect x="798.2" y="547.0" width="32.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="801.2" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (28 samples, 2.65%)</title><rect x="799.3" y="531.0" width="31.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.3" y="542.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (10 samples, 0.95%)</title><rect x="802.6" y="515.0" width="11.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="805.6" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="804.9" y="499.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="807.9" y="510.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.09%)</title><rect x="806.0" y="499.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="809.0" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.57%)</title><rect x="807.1" y="499.0" width="6.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="810.1" y="510.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="810.4" y="483.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.4" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="811.6" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="814.6" y="494.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="812.7" y="483.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="815.7" y="494.0"></text>
</g>
<g>
<title>__libc_send (15 samples, 1.42%)</title><rect x="813.8" y="515.0" width="16.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="816.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.38%)</title><rect x="830.5" y="595.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="833.5" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.09%)</title><rect x="833.9" y="579.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.9" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="833.9" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="836.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ZeroResponse.&lt;init&gt; (3 samples, 0.28%)</title><rect x="835.0" y="627.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="838.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.28%)</title><rect x="835.0" y="611.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.0" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (285 samples, 26.96%)</title><rect x="838.3" y="723.0" width="318.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="841.3" y="734.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="851.7" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.7" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="851.7" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.7" y="702.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.09%)</title><rect x="851.7" y="675.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="854.7" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="851.7" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="854.7" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.09%)</title><rect x="851.7" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="854.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.19%)</title><rect x="852.9" y="707.0" width="2.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="855.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.19%)</title><rect x="852.9" y="691.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="855.9" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.19%)</title><rect x="852.9" y="675.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="855.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (2 samples, 0.19%)</title><rect x="855.1" y="707.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.1" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (75 samples, 7.10%)</title><rect x="857.3" y="707.0" width="83.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="860.3" y="718.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (61 samples, 5.77%)</title><rect x="873.0" y="691.0" width="68.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.0" y="702.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.38%)</title><rect x="878.5" y="675.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="881.5" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.76%)</title><rect x="883.0" y="675.0" width="8.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="886.0" y="686.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.09%)</title><rect x="890.8" y="659.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="893.8" y="670.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (8 samples, 0.76%)</title><rect x="891.9" y="675.0" width="9.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="894.9" y="686.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.09%)</title><rect x="900.9" y="675.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="903.9" y="686.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.19%)</title><rect x="902.0" y="675.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="905.0" y="686.0"></text>
</g>
<g>
<title>epoll_wait (32 samples, 3.03%)</title><rect x="904.2" y="675.0" width="35.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="907.2" y="686.0">epo..</text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.09%)</title><rect x="939.9" y="675.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="942.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (192 samples, 18.16%)</title><rect x="941.1" y="707.0" width="214.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="944.1" y="718.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="955.6" y="691.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="958.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="955.6" y="675.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="958.6" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="955.6" y="659.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.19%)</title><rect x="956.7" y="691.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.7" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (175 samples, 16.56%)</title><rect x="958.9" y="691.0" width="195.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="961.9" y="702.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (112 samples, 10.60%)</title><rect x="958.9" y="675.0" width="125.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="961.9" y="686.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_handleEntityRequest.handleRequest (1 samples, 0.09%)</title><rect x="962.3" y="659.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="965.3" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="963.4" y="659.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="966.4" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.19%)</title><rect x="964.5" y="659.0" width="2.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="967.5" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (71 samples, 6.72%)</title><rect x="966.7" y="659.0" width="79.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="969.7" y="670.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (71 samples, 6.72%)</title><rect x="966.7" y="643.0" width="79.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="969.7" y="654.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_handleEntityRequest.handleRequest (61 samples, 5.77%)</title><rect x="967.8" y="627.0" width="68.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="970.8" y="638.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 0.57%)</title><rect x="967.8" y="611.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="970.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.47%)</title><rect x="969.0" y="595.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="972.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.09%)</title><rect x="972.3" y="579.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="975.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="972.3" y="563.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="975.3" y="574.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.09%)</title><rect x="972.3" y="547.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="975.3" y="558.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.09%)</title><rect x="973.4" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="976.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.handleEntityRequest (55 samples, 5.20%)</title><rect x="974.5" y="611.0" width="61.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.5" y="622.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 1.80%)</title><rect x="979.0" y="595.0" width="21.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="982.0" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (19 samples, 1.80%)</title><rect x="979.0" y="579.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="982.0" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.09%)</title><rect x="980.1" y="563.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="983.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="980.1" y="547.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="980.1" y="531.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="983.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="980.1" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.61%)</title><rect x="981.2" y="563.0" width="19.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="984.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.61%)</title><rect x="981.2" y="547.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="984.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.61%)</title><rect x="981.2" y="531.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="984.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.61%)</title><rect x="981.2" y="515.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 1.42%)</title><rect x="983.5" y="499.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="986.5" y="510.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="983.5" y="483.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.5" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.19%)</title><rect x="984.6" y="483.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.6" y="494.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.38%)</title><rect x="986.8" y="483.0" width="4.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="989.8" y="494.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="986.8" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.8" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="987.9" y="467.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.9" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.19%)</title><rect x="989.1" y="467.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="992.1" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.57%)</title><rect x="991.3" y="483.0" width="6.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="994.3" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="998.0" y="483.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1001.0" y="494.0"></text>
</g>
<g>
<title>pthread_cond_signal@plt (1 samples, 0.09%)</title><rect x="999.1" y="483.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1002.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.passOn (25 samples, 2.37%)</title><rect x="1000.2" y="595.0" width="27.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1003.2" y="606.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (24 samples, 2.27%)</title><rect x="1001.3" y="579.0" width="26.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1004.3" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (23 samples, 2.18%)</title><rect x="1002.5" y="563.0" width="25.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1005.5" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.09%)</title><rect x="1005.8" y="547.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1008.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="1005.8" y="531.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1008.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="1005.8" y="515.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1008.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="1005.8" y="499.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1008.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.28%)</title><rect x="1006.9" y="547.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1009.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.28%)</title><rect x="1006.9" y="531.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1009.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.19%)</title><rect x="1006.9" y="515.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1009.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.19%)</title><rect x="1006.9" y="499.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1009.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.19%)</title><rect x="1006.9" y="483.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1009.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.19%)</title><rect x="1006.9" y="467.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1009.9" y="478.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.09%)</title><rect x="1006.9" y="451.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1009.9" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="1008.0" y="451.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1011.0" y="462.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.09%)</title><rect x="1008.0" y="435.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1011.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="1009.1" y="515.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1012.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.51%)</title><rect x="1010.3" y="547.0" width="17.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1013.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.51%)</title><rect x="1010.3" y="531.0" width="17.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1013.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.51%)</title><rect x="1010.3" y="515.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1013.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.51%)</title><rect x="1010.3" y="499.0" width="17.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1013.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.09%)</title><rect x="1012.5" y="483.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1015.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 1.23%)</title><rect x="1013.6" y="483.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1016.6" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="1014.7" y="467.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.7" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="1015.8" y="467.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1018.8" y="478.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.47%)</title><rect x="1017.0" y="467.0" width="5.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1020.0" y="478.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="1017.0" y="451.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.0" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="1019.2" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.2" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.19%)</title><rect x="1020.3" y="451.0" width="2.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1023.3" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.47%)</title><rect x="1022.5" y="467.0" width="5.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1025.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/RendezvousSharding.getResponsibleNode (7 samples, 0.66%)</title><rect x="1028.1" y="595.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1031.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="1030.4" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.19%)</title><rect x="1031.5" y="579.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1034.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.19%)</title><rect x="1031.5" y="563.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.19%)</title><rect x="1031.5" y="547.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.19%)</title><rect x="1031.5" y="531.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1034.5" y="542.0"></text>
</g>
<g>
<title>java/util/Objects.hash (2 samples, 0.19%)</title><rect x="1033.7" y="579.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1036.7" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (2 samples, 0.19%)</title><rect x="1033.7" y="563.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1036.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.19%)</title><rect x="1033.7" y="547.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.19%)</title><rect x="1033.7" y="531.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1036.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.38%)</title><rect x="1035.9" y="627.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.28%)</title><rect x="1040.4" y="627.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1043.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.28%)</title><rect x="1040.4" y="611.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1043.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.19%)</title><rect x="1040.4" y="595.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="1042.6" y="595.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1045.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="1042.6" y="579.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1045.6" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.09%)</title><rect x="1042.6" y="563.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.19%)</title><rect x="1043.8" y="627.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.19%)</title><rect x="1043.8" y="611.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.19%)</title><rect x="1043.8" y="595.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1046.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 1.04%)</title><rect x="1046.0" y="659.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1049.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.28%)</title><rect x="1047.1" y="643.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1050.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.28%)</title><rect x="1047.1" y="627.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1050.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.28%)</title><rect x="1047.1" y="611.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1050.1" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.28%)</title><rect x="1047.1" y="595.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1050.1" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.38%)</title><rect x="1050.5" y="643.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.5" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.38%)</title><rect x="1050.5" y="627.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1053.5" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.28%)</title><rect x="1054.9" y="643.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1057.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.57%)</title><rect x="1058.3" y="659.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.28%)</title><rect x="1060.5" y="643.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.5" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.28%)</title><rect x="1060.5" y="627.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1063.5" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.19%)</title><rect x="1061.6" y="611.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1064.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.09%)</title><rect x="1063.9" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1066.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="1063.9" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1066.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="1063.9" y="611.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.9" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 1.61%)</title><rect x="1065.0" y="659.0" width="18.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1068.0" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="1082.8" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.8" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.09%)</title><rect x="1083.9" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1086.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (62 samples, 5.87%)</title><rect x="1085.1" y="675.0" width="69.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1088.1" y="686.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (56 samples, 5.30%)</title><rect x="1091.8" y="659.0" width="62.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1094.8" y="670.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (29 samples, 2.74%)</title><rect x="1095.1" y="643.0" width="32.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1098.1" y="654.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.09%)</title><rect x="1100.7" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.7" y="638.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="1101.8" y="627.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.8" y="638.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="1104.0" y="627.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.0" y="638.0"></text>
</g>
<g>
<title>WeakPreserveExceptionMark::WeakPreserveExceptionMark(Thread*) (1 samples, 0.09%)</title><rect x="1105.2" y="627.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.2" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (5 samples, 0.47%)</title><rect x="1106.3" y="627.0" width="5.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1109.3" y="638.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.09%)</title><rect x="1111.9" y="627.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.9" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1113.0" y="627.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1116.0" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.95%)</title><rect x="1114.1" y="627.0" width="11.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1117.1" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.47%)</title><rect x="1119.7" y="611.0" width="5.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1122.7" y="622.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.19%)</title><rect x="1123.0" y="595.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.0" y="606.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.09%)</title><rect x="1125.3" y="627.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1128.3" y="638.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.09%)</title><rect x="1126.4" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.4" y="638.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1127.5" y="643.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1130.5" y="654.0"></text>
</g>
<g>
<title>__recv (21 samples, 1.99%)</title><rect x="1128.6" y="643.0" width="23.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1131.6" y="654.0">_..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.19%)</title><rect x="1152.0" y="643.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1155.0" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="1154.3" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.3" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="1155.4" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.4" y="718.0"></text>
</g>
<g>
<title>start_thread (30 samples, 2.84%)</title><rect x="1156.5" y="723.0" width="33.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1159.5" y="734.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (30 samples, 2.84%)</title><rect x="1156.5" y="707.0" width="33.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1159.5" y="718.0">th..</text>
</g>
<g>
<title>Thread::call_run() (30 samples, 2.84%)</title><rect x="1156.5" y="691.0" width="33.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.5" y="702.0">Th..</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 0.95%)</title><rect x="1156.5" y="675.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 0.85%)</title><rect x="1156.5" y="659.0" width="10.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.85%)</title><rect x="1156.5" y="643.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="654.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.85%)</title><rect x="1156.5" y="627.0" width="10.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1166.6" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.6" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.09%)</title><rect x="1166.6" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="654.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.09%)</title><rect x="1166.6" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="638.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.09%)</title><rect x="1166.6" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="622.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.09%)</title><rect x="1166.6" y="595.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (20 samples, 1.89%)</title><rect x="1167.7" y="675.0" width="22.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.7" y="686.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (20 samples, 1.89%)</title><rect x="1167.7" y="659.0" width="22.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="670.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (20 samples, 1.89%)</title><rect x="1167.7" y="643.0" width="22.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="654.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (20 samples, 1.89%)</title><rect x="1167.7" y="627.0" width="22.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="638.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (20 samples, 1.89%)</title><rect x="1167.7" y="611.0" width="22.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="622.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 1.32%)</title><rect x="1167.7" y="595.0" width="15.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="606.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1167.7" y="579.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="590.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1167.7" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.7" y="574.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="1167.7" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.7" y="558.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.09%)</title><rect x="1167.7" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="542.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.09%)</title><rect x="1168.8" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.8" y="590.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.09%)</title><rect x="1168.8" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1169.9" y="579.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1169.9" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1169.9" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.09%)</title><rect x="1169.9" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1169.9" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1169.9" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 1.04%)</title><rect x="1171.0" y="579.0" width="12.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1171.0" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.09%)</title><rect x="1172.1" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.38%)</title><rect x="1173.3" y="563.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.09%)</title><rect x="1173.3" y="547.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1174.4" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.19%)</title><rect x="1175.5" y="547.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1176.6" y="531.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1177.7" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1178.8" y="563.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1181.1" y="563.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1182.2" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.09%)</title><rect x="1182.2" y="547.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>Compile::Optimize() (4 samples, 0.38%)</title><rect x="1183.3" y="595.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="606.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.09%)</title><rect x="1183.3" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.09%)</title><rect x="1183.3" y="563.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1183.3" y="547.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="558.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1184.4" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.09%)</title><rect x="1185.5" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.09%)</title><rect x="1185.5" y="563.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1185.5" y="547.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1185.5" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.5" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1186.7" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1186.7" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1186.7" y="531.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1187.8" y="595.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1187.8" y="579.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1187.8" y="563.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1187.8" y="547.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1187.8" y="531.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1187.8" y="515.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1187.8" y="499.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1187.8" y="483.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1187.8" y="467.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1187.8" y="451.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1187.8" y="435.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1187.8" y="419.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1187.8" y="403.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1187.8" y="387.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1187.8" y="371.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1187.8" y="355.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1187.8" y="339.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1187.8" y="323.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1187.8" y="307.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1187.8" y="291.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1187.8" y="275.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1187.8" y="259.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1187.8" y="243.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1187.8" y="227.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1187.8" y="211.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1187.8" y="195.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1187.8" y="179.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1187.8" y="163.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1187.8" y="147.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1187.8" y="131.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="142.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1187.8" y="115.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1188.9" y="115.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="126.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="99.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="110.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="83.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="94.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.09%)</title><rect x="1188.9" y="67.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="78.0"></text>
</g>
<g>
<title>ciMethod::interpreter_call_site_count(int) (1 samples, 0.09%)</title><rect x="1188.9" y="51.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="62.0"></text>
</g>
<g>
<title>VirtualCallData::cell_count() const (1 samples, 0.09%)</title><rect x="1188.9" y="35.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="46.0"></text>
</g>
</g>
</svg>
