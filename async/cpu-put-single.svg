<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (1,311 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,022 samples, 77.96%)</title><rect x="10.9" y="467.0" width="919.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,022 samples, 77.96%)</title><rect x="10.9" y="451.0" width="919.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="462.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,022 samples, 77.96%)</title><rect x="10.9" y="435.0" width="919.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.9" y="446.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.38%)</title><rect x="10.9" y="419.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.38%)</title><rect x="10.9" y="403.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.38%)</title><rect x="10.9" y="387.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.08%)</title><rect x="10.9" y="371.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.31%)</title><rect x="11.8" y="371.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$68/2099195806.run (1 samples, 0.08%)</title><rect x="14.5" y="355.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (242 samples, 18.46%)</title><rect x="15.4" y="419.0" width="217.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="430.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (242 samples, 18.46%)</title><rect x="15.4" y="403.0" width="217.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.4" y="414.0">java/util/concurrent/ArrayBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (185 samples, 14.11%)</title><rect x="25.3" y="387.0" width="166.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.3" y="398.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (13 samples, 0.99%)</title><rect x="28.0" y="371.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (10 samples, 0.76%)</title><rect x="30.7" y="355.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.7" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (5 samples, 0.38%)</title><rect x="30.7" y="339.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.7" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (1 samples, 0.08%)</title><rect x="34.3" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.3" y="334.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.08%)</title><rect x="34.3" y="307.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.38%)</title><rect x="35.2" y="339.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="38.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="38.8" y="323.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="39.7" y="371.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.08%)</title><rect x="39.7" y="355.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.08%)</title><rect x="39.7" y="339.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="39.7" y="323.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.7" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.08%)</title><rect x="39.7" y="307.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="42.7" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="39.7" y="291.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="42.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (21 samples, 1.60%)</title><rect x="40.6" y="371.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.45%)</title><rect x="42.4" y="355.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.37%)</title><rect x="42.4" y="339.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.14%)</title><rect x="45.1" y="323.0" width="13.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 1.14%)</title><rect x="45.1" y="307.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.1" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.08%)</title><rect x="45.1" y="291.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="48.1" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 0.61%)</title><rect x="46.0" y="291.0" width="7.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="49.0" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="46.0" y="275.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="49.0" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.15%)</title><rect x="46.9" y="275.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="49.9" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.08%)</title><rect x="48.7" y="275.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="51.7" y="286.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="49.6" y="275.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="52.6" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.23%)</title><rect x="50.5" y="275.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="53.5" y="286.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.46%)</title><rect x="53.2" y="291.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="56.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="58.6" y="339.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.15%)</title><rect x="59.5" y="371.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.08%)</title><rect x="60.4" y="355.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (145 samples, 11.06%)</title><rect x="61.3" y="371.0" width="130.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.3" y="382.0">java/util/concur..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (145 samples, 11.06%)</title><rect x="61.3" y="355.0" width="130.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.3" y="366.0">jdk/internal/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="64.9" y="339.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="67.9" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park (88 samples, 6.71%)</title><rect x="66.7" y="339.0" width="79.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="69.7" y="350.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="75.7" y="323.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="78.7" y="334.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.08%)</title><rect x="76.6" y="323.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="79.6" y="334.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.08%)</title><rect x="77.5" y="323.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="80.5" y="334.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="78.4" y="323.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="81.4" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.14%)</title><rect x="79.3" y="323.0" width="25.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="82.3" y="334.0">P..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.08%)</title><rect x="88.3" y="307.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="91.3" y="318.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.46%)</title><rect x="89.2" y="307.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="92.2" y="318.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.15%)</title><rect x="94.6" y="307.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="97.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.46%)</title><rect x="96.4" y="307.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="99.4" y="318.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.15%)</title><rect x="101.8" y="307.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="104.8" y="318.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="103.6" y="307.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="106.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.23%)</title><rect x="104.5" y="323.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="107.5" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.15%)</title><rect x="107.2" y="323.0" width="1.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="110.2" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="109.0" y="323.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="112.0" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.31%)</title><rect x="109.9" y="323.0" width="3.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="112.9" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (29 samples, 2.21%)</title><rect x="113.5" y="323.0" width="26.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="116.5" y="334.0">_..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.23%)</title><rect x="139.6" y="323.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="142.6" y="334.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.23%)</title><rect x="142.3" y="323.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="145.3" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.08%)</title><rect x="145.0" y="323.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="148.0" y="334.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 3.59%)</title><rect x="145.9" y="339.0" width="42.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="148.9" y="350.0">[unk..</text>
</g>
<g>
<title>__condvar_confirm_wakeup (1 samples, 0.08%)</title><rect x="145.9" y="323.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="148.9" y="334.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.08%)</title><rect x="146.8" y="323.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="149.8" y="334.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.38%)</title><rect x="147.7" y="323.0" width="4.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="150.7" y="334.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.31%)</title><rect x="152.2" y="323.0" width="3.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="155.2" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="155.8" y="323.0" width="1.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="158.8" y="334.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (34 samples, 2.59%)</title><rect x="157.6" y="323.0" width="30.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="160.6" y="334.0">pt..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.31%)</title><rect x="188.2" y="339.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="191.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.69%)</title><rect x="191.8" y="387.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.69%)</title><rect x="191.8" y="371.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.69%)</title><rect x="191.8" y="355.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.08%)</title><rect x="193.6" y="339.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.38%)</title><rect x="194.5" y="339.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.38%)</title><rect x="194.5" y="323.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.38%)</title><rect x="194.5" y="307.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.5" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.31%)</title><rect x="194.5" y="291.0" width="3.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="197.5" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="194.5" y="275.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="197.5" y="286.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="194.5" y="259.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="197.5" y="270.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="195.4" y="275.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="198.4" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="196.3" y="275.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="199.3" y="286.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="197.2" y="275.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="200.2" y="286.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="198.1" y="291.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="201.1" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.08%)</title><rect x="198.1" y="275.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="201.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="199.0" y="339.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (37 samples, 2.82%)</title><rect x="199.9" y="387.0" width="33.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.9" y="398.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 2.82%)</title><rect x="199.9" y="371.0" width="33.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.9" y="382.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (37 samples, 2.82%)</title><rect x="199.9" y="355.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.9" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (37 samples, 2.82%)</title><rect x="199.9" y="339.0" width="33.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.9" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="203.5" y="323.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (32 samples, 2.44%)</title><rect x="204.4" y="323.0" width="28.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.4" y="334.0">jd..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="204.4" y="307.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="207.4" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.08%)</title><rect x="205.3" y="307.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="208.3" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark (14 samples, 1.07%)</title><rect x="206.2" y="307.0" width="12.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="209.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.15%)</title><rect x="206.2" y="291.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="209.2" y="302.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.15%)</title><rect x="208.0" y="291.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="211.0" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="209.8" y="291.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="212.8" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.31%)</title><rect x="210.7" y="291.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="213.7" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.08%)</title><rect x="214.3" y="291.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="217.3" y="302.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="215.2" y="291.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="218.2" y="302.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="216.1" y="291.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="219.1" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.15%)</title><rect x="217.0" y="291.0" width="1.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="220.0" y="302.0"></text>
</g>
<g>
<title>__pthread_cond_signal (14 samples, 1.07%)</title><rect x="218.8" y="307.0" width="12.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="221.8" y="318.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="231.4" y="307.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="234.4" y="318.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="232.3" y="307.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="235.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$68/2099195806.run (775 samples, 59.12%)</title><rect x="233.2" y="419.0" width="697.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.2" y="430.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$68/2099195806.run</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$put$1 (775 samples, 59.12%)</title><rect x="233.2" y="403.0" width="697.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.2" y="414.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl.lambda$put$1</text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.putInternal (775 samples, 59.12%)</title><rect x="233.2" y="387.0" width="697.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.2" y="398.0">ru/mail/polis/service/mariarheon/AsyncServiceImpl.putInternal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (88 samples, 6.71%)</title><rect x="233.2" y="371.0" width="79.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.2" y="382.0">one/nio/h..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.61%)</title><rect x="238.6" y="355.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.61%)</title><rect x="238.6" y="339.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.61%)</title><rect x="238.6" y="323.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.6" y="334.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.23%)</title><rect x="238.6" y="307.0" width="2.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="241.6" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.23%)</title><rect x="238.6" y="291.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="241.6" y="302.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.15%)</title><rect x="241.3" y="307.0" width="1.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="244.3" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.23%)</title><rect x="243.1" y="307.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="246.1" y="318.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="244.0" y="291.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="247.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (70 samples, 5.34%)</title><rect x="245.8" y="355.0" width="63.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.8" y="366.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 1.53%)</title><rect x="245.8" y="339.0" width="18.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.76%)</title><rect x="254.8" y="323.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.76%)</title><rect x="254.8" y="307.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.charAt (10 samples, 0.76%)</title><rect x="254.8" y="291.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.8" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.31%)</title><rect x="260.2" y="275.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="263.2" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (50 samples, 3.81%)</title><rect x="263.8" y="339.0" width="45.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.8" y="350.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (50 samples, 3.81%)</title><rect x="263.8" y="323.0" width="45.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.8" y="334.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.15%)</title><rect x="264.7" y="307.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (47 samples, 3.59%)</title><rect x="266.5" y="307.0" width="42.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.5" y="318.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (47 samples, 3.59%)</title><rect x="266.5" y="291.0" width="42.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.5" y="302.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (16 samples, 1.22%)</title><rect x="271.9" y="275.0" width="14.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="274.9" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="273.7" y="259.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="276.7" y="270.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.08%)</title><rect x="274.6" y="259.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="277.6" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.69%)</title><rect x="275.5" y="259.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="278.5" y="270.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="279.1" y="243.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="282.1" y="254.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.31%)</title><rect x="280.0" y="243.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="283.0" y="254.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (3 samples, 0.23%)</title><rect x="283.6" y="259.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="286.6" y="270.0"></text>
</g>
<g>
<title>__libc_send (21 samples, 1.60%)</title><rect x="286.3" y="275.0" width="18.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="289.3" y="286.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.23%)</title><rect x="305.2" y="275.0" width="2.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="308.2" y="286.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="307.9" y="275.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="310.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.31%)</title><rect x="308.8" y="355.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.08%)</title><rect x="311.5" y="339.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.08%)</title><rect x="311.5" y="323.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toByteBuffer (12 samples, 0.92%)</title><rect x="312.4" y="371.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.92%)</title><rect x="312.4" y="355.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.92%)</title><rect x="312.4" y="339.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.92%)</title><rect x="312.4" y="323.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.92%)</title><rect x="312.4" y="307.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.92%)</title><rect x="312.4" y="291.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.92%)</title><rect x="312.4" y="275.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.92%)</title><rect x="312.4" y="259.0" width="10.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.08%)</title><rect x="322.3" y="243.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/DAOImpl.upsert (673 samples, 51.33%)</title><rect x="323.2" y="371.0" width="605.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.2" y="382.0">ru/mail/polis/dao/mariarheon/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (668 samples, 50.95%)</title><rect x="323.2" y="355.0" width="601.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.2" y="366.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="323.2" y="339.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="326.2" y="350.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (667 samples, 50.88%)</title><rect x="324.1" y="339.0" width="600.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.1" y="350.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (632 samples, 48.21%)</title><rect x="327.7" y="323.0" width="568.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="330.7" y="334.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__libc_free (1 samples, 0.08%)</title><rect x="331.3" y="307.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="334.3" y="318.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.08%)</title><rect x="332.2" y="307.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="335.2" y="318.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.08%)</title><rect x="333.1" y="307.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="336.1" y="318.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.08%)</title><rect x="334.0" y="307.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="337.0" y="318.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.08%)</title><rect x="334.9" y="307.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="337.9" y="318.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.15%)</title><rect x="335.8" y="307.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="338.8" y="318.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (2 samples, 0.15%)</title><rect x="337.6" y="307.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="340.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.23%)</title><rect x="339.4" y="307.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="342.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.08%)</title><rect x="342.1" y="307.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="345.1" y="318.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (615 samples, 46.91%)</title><rect x="343.0" y="307.0" width="553.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="346.0" y="318.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rock..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.15%)</title><rect x="345.7" y="291.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="348.7" y="302.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.23%)</title><rect x="347.5" y="291.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="350.5" y="302.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.08%)</title><rect x="350.2" y="291.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="353.2" y="302.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.23%)</title><rect x="351.1" y="291.0" width="2.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="354.1" y="302.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.53%)</title><rect x="353.8" y="291.0" width="6.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="356.8" y="302.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="359.2" y="275.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="362.2" y="286.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.08%)</title><rect x="359.2" y="259.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="362.2" y="270.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (3 samples, 0.23%)</title><rect x="360.1" y="291.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="363.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (587 samples, 44.77%)</title><rect x="362.8" y="291.0" width="528.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="365.8" y="302.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, roc..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.15%)</title><rect x="365.5" y="275.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="368.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (582 samples, 44.39%)</title><rect x="367.3" y="275.0" width="523.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="370.3" y="286.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamily..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (579 samples, 44.16%)</title><rect x="367.3" y="259.0" width="521.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="370.3" y="270.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHand..</text>
</g>
<g>
<title>__libc_free (3 samples, 0.23%)</title><rect x="369.1" y="243.0" width="2.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="372.1" y="254.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.23%)</title><rect x="371.8" y="243.0" width="2.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="374.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.15%)</title><rect x="374.5" y="243.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="377.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (532 samples, 40.58%)</title><rect x="376.3" y="243.0" width="478.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="379.3" y="254.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::Writ..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.15%)</title><rect x="376.3" y="227.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="379.3" y="238.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (3 samples, 0.23%)</title><rect x="378.1" y="227.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="381.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::ColumnFamilyHandleImpl(rocksdb::ColumnFamilyData*, rocksdb::DBImpl*, rocksdb::InstrumentedMutex*) (1 samples, 0.08%)</title><rect x="380.8" y="227.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="383.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.08%)</title><rect x="381.7" y="227.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.23%)</title><rect x="382.6" y="227.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="385.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (1 samples, 0.08%)</title><rect x="385.3" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="388.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (505 samples, 38.52%)</title><rect x="386.2" y="227.0" width="454.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="389.2" y="238.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocks..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.23%)</title><rect x="413.2" y="211.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="416.2" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="415.9" y="211.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="418.9" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.38%)</title><rect x="416.8" y="211.0" width="4.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="419.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.08%)</title><rect x="421.3" y="211.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="424.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.31%)</title><rect x="422.2" y="211.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="425.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (4 samples, 0.31%)</title><rect x="425.8" y="211.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="428.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (2 samples, 0.15%)</title><rect x="427.6" y="195.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="430.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1 samples, 0.08%)</title><rect x="429.4" y="211.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="432.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) [clone .plt] (1 samples, 0.08%)</title><rect x="430.3" y="211.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="433.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (78 samples, 5.95%)</title><rect x="431.2" y="211.0" width="70.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="434.2" y="222.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (4 samples, 0.31%)</title><rect x="433.0" y="195.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="436.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (65 samples, 4.96%)</title><rect x="436.6" y="195.0" width="58.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="439.6" y="206.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.08%)</title><rect x="442.0" y="179.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="445.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (57 samples, 4.35%)</title><rect x="442.9" y="179.0" width="51.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="445.9" y="190.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (13 samples, 0.99%)</title><rect x="447.4" y="163.0" width="11.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="450.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.08%)</title><rect x="459.1" y="163.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="462.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (24 samples, 1.83%)</title><rect x="460.0" y="163.0" width="21.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="463.0" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.08%)</title><rect x="461.8" y="147.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="464.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.08%)</title><rect x="462.7" y="147.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="465.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.15%)</title><rect x="463.6" y="147.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="466.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (18 samples, 1.37%)</title><rect x="465.4" y="147.0" width="16.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="468.4" y="158.0"></text>
</g>
<g>
<title>__libc_write (11 samples, 0.84%)</title><rect x="467.2" y="131.0" width="9.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="470.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (4 samples, 0.31%)</title><rect x="477.1" y="131.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.08%)</title><rect x="480.7" y="131.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="483.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.08%)</title><rect x="481.6" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="484.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (13 samples, 0.99%)</title><rect x="482.5" y="163.0" width="11.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.5" y="174.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.08%)</title><rect x="483.4" y="147.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="486.4" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="484.3" y="147.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="487.3" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.15%)</title><rect x="485.2" y="147.0" width="1.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="488.2" y="158.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.08%)</title><rect x="487.0" y="147.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="490.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.08%)</title><rect x="487.9" y="147.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (2 samples, 0.15%)</title><rect x="488.8" y="147.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="491.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.23%)</title><rect x="490.6" y="147.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="493.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::UpdateFileChecksum(rocksdb::Slice const&amp;) (1 samples, 0.08%)</title><rect x="493.3" y="147.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="496.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.08%)</title><rect x="494.2" y="179.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="497.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) [clone .plt] (1 samples, 0.08%)</title><rect x="495.1" y="195.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="498.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) [clone .plt] (3 samples, 0.23%)</title><rect x="496.0" y="195.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="499.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.15%)</title><rect x="498.7" y="195.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="501.7" y="206.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.08%)</title><rect x="500.5" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="503.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.15%)</title><rect x="501.4" y="211.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="504.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (7 samples, 0.53%)</title><rect x="503.2" y="211.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="506.2" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="504.1" y="195.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="507.1" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.08%)</title><rect x="505.0" y="195.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="508.0" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.31%)</title><rect x="505.9" y="195.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="508.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (1 samples, 0.08%)</title><rect x="509.5" y="211.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="512.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() [clone .plt] (3 samples, 0.23%)</title><rect x="510.4" y="211.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="513.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (2 samples, 0.15%)</title><rect x="513.1" y="211.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="516.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() [clone .plt] (1 samples, 0.08%)</title><rect x="514.9" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="517.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (4 samples, 0.31%)</title><rect x="515.8" y="211.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="518.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const [clone .plt] (1 samples, 0.08%)</title><rect x="519.4" y="211.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="522.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (92 samples, 7.02%)</title><rect x="520.3" y="211.0" width="82.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="523.3" y="222.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (90 samples, 6.86%)</title><rect x="522.1" y="195.0" width="81.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="525.1" y="206.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.15%)</title><rect x="522.1" y="179.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="525.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.08%)</title><rect x="523.9" y="179.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="526.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (87 samples, 6.64%)</title><rect x="524.8" y="179.0" width="78.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="527.8" y="190.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (77 samples, 5.87%)</title><rect x="531.1" y="163.0" width="69.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="534.1" y="174.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.15%)</title><rect x="531.1" y="147.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="534.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (75 samples, 5.72%)</title><rect x="532.9" y="147.0" width="67.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="535.9" y="158.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.08%)</title><rect x="535.6" y="131.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="538.6" y="142.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.08%)</title><rect x="536.5" y="131.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="539.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (3 samples, 0.23%)</title><rect x="537.4" y="131.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="540.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const [clone .plt] (1 samples, 0.08%)</title><rect x="540.1" y="131.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="543.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.15%)</title><rect x="541.0" y="131.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="544.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (60 samples, 4.58%)</title><rect x="542.8" y="131.0" width="54.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="545.8" y="142.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (6 samples, 0.46%)</title><rect x="544.6" y="115.0" width="5.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="547.6" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.23%)</title><rect x="545.5" y="99.0" width="2.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="548.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.08%)</title><rect x="548.2" y="99.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="551.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.08%)</title><rect x="549.1" y="99.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="552.1" y="110.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (50 samples, 3.81%)</title><rect x="550.0" y="115.0" width="45.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="553.0" y="126.0">bool..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (44 samples, 3.36%)</title><rect x="551.8" y="99.0" width="39.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="554.8" y="110.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (18 samples, 1.37%)</title><rect x="571.6" y="83.0" width="16.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="574.6" y="94.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.08%)</title><rect x="571.6" y="67.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="574.6" y="78.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="572.5" y="67.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="575.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (16 samples, 1.22%)</title><rect x="573.4" y="67.0" width="14.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="576.4" y="78.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (2 samples, 0.15%)</title><rect x="578.8" y="51.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="581.8" y="62.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (6 samples, 0.46%)</title><rect x="580.6" y="51.0" width="5.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="583.6" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="586.0" y="51.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="589.0" y="62.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.08%)</title><rect x="586.9" y="51.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="589.9" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.31%)</title><rect x="587.8" y="83.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="590.8" y="94.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.08%)</title><rect x="587.8" y="67.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="590.8" y="78.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (3 samples, 0.23%)</title><rect x="588.7" y="67.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="591.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.31%)</title><rect x="591.4" y="99.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="594.4" y="110.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (3 samples, 0.23%)</title><rect x="592.3" y="83.0" width="2.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="595.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.15%)</title><rect x="595.0" y="115.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="598.0" y="126.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (1 samples, 0.08%)</title><rect x="595.0" y="99.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="598.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (1 samples, 0.08%)</title><rect x="595.9" y="99.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="598.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.08%)</title><rect x="596.8" y="131.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="599.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (2 samples, 0.15%)</title><rect x="597.7" y="131.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="600.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) [clone .plt] (1 samples, 0.08%)</title><rect x="599.5" y="131.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="602.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.08%)</title><rect x="600.5" y="163.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.15%)</title><rect x="601.4" y="163.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="604.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (56 samples, 4.27%)</title><rect x="603.2" y="211.0" width="50.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="606.2" y="222.0">rocks..</text>
</g>
<g>
<title>__libc_free (2 samples, 0.15%)</title><rect x="605.0" y="195.0" width="1.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="608.0" y="206.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.15%)</title><rect x="606.8" y="195.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="609.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (46 samples, 3.51%)</title><rect x="608.6" y="195.0" width="41.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="611.6" y="206.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.08%)</title><rect x="608.6" y="179.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="611.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.08%)</title><rect x="609.5" y="179.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="612.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (44 samples, 3.36%)</title><rect x="610.4" y="179.0" width="39.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="613.4" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (40 samples, 3.05%)</title><rect x="611.3" y="163.0" width="36.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="614.3" y="174.0">roc..</text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.08%)</title><rect x="611.3" y="147.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="614.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.08%)</title><rect x="612.2" y="147.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="615.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.08%)</title><rect x="613.1" y="147.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="616.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (35 samples, 2.67%)</title><rect x="614.0" y="147.0" width="31.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="617.0" y="158.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (2 samples, 0.15%)</title><rect x="614.9" y="131.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="617.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.08%)</title><rect x="616.7" y="131.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="619.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (30 samples, 2.29%)</title><rect x="617.6" y="131.0" width="27.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="620.6" y="142.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (2 samples, 0.15%)</title><rect x="618.5" y="115.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="621.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (2 samples, 0.15%)</title><rect x="618.5" y="99.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="621.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (27 samples, 2.06%)</title><rect x="620.3" y="115.0" width="24.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="623.3" y="126.0">r..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (26 samples, 1.98%)</title><rect x="620.3" y="99.0" width="23.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="623.3" y="110.0">b..</text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (23 samples, 1.75%)</title><rect x="621.2" y="83.0" width="20.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="624.2" y="94.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3935557096920137386.so (12 samples, 0.92%)</title><rect x="631.1" y="67.0" width="10.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="634.1" y="78.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="631.1" y="51.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="634.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.84%)</title><rect x="632.0" y="51.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="635.0" y="62.0"></text>
</g>
<g>
<title>__memcmp_avx2_movbe (8 samples, 0.61%)</title><rect x="634.7" y="35.0" width="7.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="637.7" y="46.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.08%)</title><rect x="641.9" y="83.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="644.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.08%)</title><rect x="642.8" y="83.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="645.8" y="94.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.08%)</title><rect x="642.8" y="67.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="645.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.08%)</title><rect x="643.7" y="99.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="646.7" y="110.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_get_insert_unique_pos(rocksdb::MemTable* const&amp;) (1 samples, 0.08%)</title><rect x="644.6" y="131.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="647.6" y="142.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_get_insert_unique_pos(rocksdb::MemTable* const&amp;) (1 samples, 0.08%)</title><rect x="645.5" y="147.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="648.5" y="158.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (1 samples, 0.08%)</title><rect x="646.4" y="147.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="649.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) [clone .plt] (1 samples, 0.08%)</title><rect x="647.3" y="163.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="650.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.08%)</title><rect x="648.2" y="163.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="651.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.08%)</title><rect x="649.1" y="163.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="652.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.15%)</title><rect x="650.0" y="195.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) [clone .plt] (1 samples, 0.08%)</title><rect x="651.8" y="195.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="654.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.08%)</title><rect x="652.7" y="195.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (2 samples, 0.15%)</title><rect x="653.6" y="211.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="656.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const [clone .plt] (2 samples, 0.15%)</title><rect x="655.4" y="211.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="658.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (140 samples, 10.68%)</title><rect x="657.2" y="211.0" width="126.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="660.2" y="222.0">rocksdb::WriteTh..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.08%)</title><rect x="777.8" y="195.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="780.8" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (5 samples, 0.38%)</title><rect x="778.7" y="195.0" width="4.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="781.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (45 samples, 3.43%)</title><rect x="783.2" y="211.0" width="40.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="786.2" y="222.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (45 samples, 3.43%)</title><rect x="783.2" y="195.0" width="40.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="786.2" y="206.0">roc..</text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="822.8" y="179.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="825.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (4 samples, 0.31%)</title><rect x="823.7" y="211.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="826.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.08%)</title><rect x="827.3" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="830.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.08%)</title><rect x="828.2" y="211.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.08%)</title><rect x="829.1" y="211.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.08%)</title><rect x="829.1" y="195.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="832.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.15%)</title><rect x="830.0" y="211.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.15%)</title><rect x="831.8" y="211.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="834.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) [clone .plt] (1 samples, 0.08%)</title><rect x="833.6" y="211.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (3 samples, 0.23%)</title><rect x="834.5" y="211.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.15%)</title><rect x="837.2" y="211.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="840.2" y="222.0"></text>
</g>
<g>
<title>std::_Rb_tree_increment(std::_Rb_tree_node_base*) (1 samples, 0.08%)</title><rect x="839.0" y="211.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="842.0" y="222.0"></text>
</g>
<g>
<title>std::_Rb_tree_increment(std::_Rb_tree_node_base*) [clone .plt] (1 samples, 0.08%)</title><rect x="839.9" y="211.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="842.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.08%)</title><rect x="840.8" y="227.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="843.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (2 samples, 0.15%)</title><rect x="841.7" y="227.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.23%)</title><rect x="843.5" y="227.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.23%)</title><rect x="846.2" y="227.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="849.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.08%)</title><rect x="848.9" y="227.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="851.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.15%)</title><rect x="849.8" y="227.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="852.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="851.6" y="227.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.08%)</title><rect x="852.5" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="855.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) [clone .plt] (1 samples, 0.08%)</title><rect x="853.4" y="227.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="856.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) [clone .plt] (1 samples, 0.08%)</title><rect x="854.3" y="227.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="857.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.08%)</title><rect x="855.2" y="243.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="858.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.15%)</title><rect x="856.1" y="243.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="859.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (19 samples, 1.45%)</title><rect x="857.9" y="243.0" width="17.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.08%)</title><rect x="857.9" y="227.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="860.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (4 samples, 0.31%)</title><rect x="858.8" y="227.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="861.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (1 samples, 0.08%)</title><rect x="862.4" y="227.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="865.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.15%)</title><rect x="863.3" y="227.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.08%)</title><rect x="865.1" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.38%)</title><rect x="866.0" y="227.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.08%)</title><rect x="869.6" y="211.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.08%)</title><rect x="870.5" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) [clone .plt] (2 samples, 0.15%)</title><rect x="871.4" y="227.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.4" y="238.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (2 samples, 0.15%)</title><rect x="873.2" y="227.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="875.0" y="243.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="878.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.15%)</title><rect x="875.9" y="243.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="878.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.08%)</title><rect x="877.7" y="243.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="880.7" y="254.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.08%)</title><rect x="878.6" y="243.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="881.6" y="254.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (6 samples, 0.46%)</title><rect x="879.5" y="243.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.5" y="254.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (3 samples, 0.23%)</title><rect x="884.9" y="243.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="887.9" y="254.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) [clone .plt] (1 samples, 0.08%)</title><rect x="887.6" y="243.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.08%)</title><rect x="888.5" y="259.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="889.4" y="259.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="892.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) [clone .plt] (1 samples, 0.08%)</title><rect x="890.3" y="259.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.23%)</title><rect x="891.2" y="291.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.15%)</title><rect x="893.9" y="291.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="896.9" y="302.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.08%)</title><rect x="895.7" y="291.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="898.7" y="302.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 1.45%)</title><rect x="896.6" y="323.0" width="17.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="899.6" y="334.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.31%)</title><rect x="896.6" y="307.0" width="3.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="899.6" y="318.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="900.2" y="307.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="903.2" y="318.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.08%)</title><rect x="901.1" y="307.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="904.1" y="318.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (7 samples, 0.53%)</title><rect x="902.0" y="307.0" width="6.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="905.0" y="318.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.08%)</title><rect x="908.3" y="307.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="911.3" y="318.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (3 samples, 0.23%)</title><rect x="909.2" y="307.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="912.2" y="318.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.08%)</title><rect x="911.9" y="307.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="914.9" y="318.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.08%)</title><rect x="912.8" y="307.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.8" y="318.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.08%)</title><rect x="912.8" y="291.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.8" y="302.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.08%)</title><rect x="913.7" y="323.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="916.7" y="334.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.38%)</title><rect x="914.6" y="323.0" width="4.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="917.6" y="334.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.31%)</title><rect x="919.1" y="323.0" width="3.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="922.1" y="334.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.08%)</title><rect x="922.7" y="323.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.7" y="334.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) [clone .plt] (1 samples, 0.08%)</title><rect x="923.6" y="323.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="926.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (1 samples, 0.08%)</title><rect x="924.5" y="355.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.5" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.08%)</title><rect x="924.5" y="339.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="927.5" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="924.5" y="323.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="927.5" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="924.5" y="307.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="927.5" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="924.5" y="291.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="927.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="924.5" y="275.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="927.5" y="286.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.08%)</title><rect x="924.5" y="259.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="927.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArrayUnsigned (4 samples, 0.31%)</title><rect x="925.4" y="355.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.4" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="927.2" y="339.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="930.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/mariarheon/ByteBufferUtils.toArray (1 samples, 0.08%)</title><rect x="928.1" y="339.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.08%)</title><rect x="928.1" y="323.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="931.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="928.1" y="307.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="931.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="928.1" y="291.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="931.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="928.1" y="275.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="931.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.08%)</title><rect x="928.1" y="259.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="931.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.08%)</title><rect x="928.1" y="243.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/ZeroResponse.&lt;init&gt; (2 samples, 0.15%)</title><rect x="929.0" y="371.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="932.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.15%)</title><rect x="929.0" y="355.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.0" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (288 samples, 21.97%)</title><rect x="930.8" y="467.0" width="259.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.8" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="932.6" y="451.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="935.6" y="462.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="932.6" y="435.0" width="1.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="935.6" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.15%)</title><rect x="932.6" y="419.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.08%)</title><rect x="934.4" y="451.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (16 samples, 1.22%)</title><rect x="935.3" y="451.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="938.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (16 samples, 1.22%)</title><rect x="935.3" y="435.0" width="14.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.3" y="446.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (6 samples, 0.46%)</title><rect x="941.6" y="419.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.6" y="430.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.08%)</title><rect x="946.1" y="403.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (3 samples, 0.23%)</title><rect x="947.0" y="419.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="950.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (78 samples, 5.95%)</title><rect x="949.7" y="451.0" width="70.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="952.7" y="462.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.15%)</title><rect x="952.4" y="435.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.4" y="446.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.15%)</title><rect x="952.4" y="419.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="955.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (73 samples, 5.57%)</title><rect x="954.2" y="435.0" width="65.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="957.2" y="446.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.23%)</title><rect x="961.4" y="419.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="964.4" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (15 samples, 1.14%)</title><rect x="964.1" y="419.0" width="13.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="967.1" y="430.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="975.8" y="403.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="978.8" y="414.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.08%)</title><rect x="976.7" y="403.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="979.7" y="414.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.23%)</title><rect x="977.6" y="419.0" width="2.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="980.6" y="430.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.46%)</title><rect x="980.3" y="419.0" width="5.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="983.3" y="430.0"></text>
</g>
<g>
<title>epoll_wait (37 samples, 2.82%)</title><rect x="985.7" y="419.0" width="33.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="988.7" y="430.0">ep..</text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.08%)</title><rect x="1019.0" y="419.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1022.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (187 samples, 14.26%)</title><rect x="1019.9" y="451.0" width="168.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1022.9" y="462.0">one/nio/net/Session.pr..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="1022.6" y="435.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1025.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (181 samples, 13.81%)</title><rect x="1023.5" y="435.0" width="162.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1026.5" y="446.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (106 samples, 8.09%)</title><rect x="1024.4" y="419.0" width="95.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1027.4" y="430.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (3 samples, 0.23%)</title><rect x="1030.7" y="403.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1033.7" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="1033.4" y="403.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1036.4" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="1034.3" y="403.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1037.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (50 samples, 3.81%)</title><rect x="1035.2" y="403.0" width="45.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1038.2" y="414.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (50 samples, 3.81%)</title><rect x="1035.2" y="387.0" width="45.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1038.2" y="398.0">one/..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (44 samples, 3.36%)</title><rect x="1035.2" y="371.0" width="39.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1038.2" y="382.0">Req..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (11 samples, 0.84%)</title><rect x="1035.2" y="355.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1038.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (11 samples, 0.84%)</title><rect x="1035.2" y="339.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1038.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="1038.8" y="323.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1041.8" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="1038.8" y="307.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1041.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.23%)</title><rect x="1039.7" y="323.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.23%)</title><rect x="1039.7" y="307.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1042.7" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="1041.5" y="291.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1044.5" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="1041.5" y="275.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.5" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1041.5" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.5" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1041.5" y="243.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1044.5" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1041.5" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.5" y="238.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="1041.5" y="211.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.5" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="1041.5" y="195.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.5" y="206.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.08%)</title><rect x="1041.5" y="179.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1044.5" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="1042.4" y="323.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1045.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.15%)</title><rect x="1043.3" y="323.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1046.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.15%)</title><rect x="1043.3" y="307.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.15%)</title><rect x="1043.3" y="291.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1046.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.15%)</title><rect x="1043.3" y="275.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1046.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl.put (33 samples, 2.52%)</title><rect x="1045.1" y="355.0" width="29.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1048.1" y="366.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.08%)</title><rect x="1045.1" y="339.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1048.1" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.08%)</title><rect x="1045.1" y="323.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1048.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/mariarheon/AsyncServiceImpl$$Lambda$68/2099195806.get$Lambda (1 samples, 0.08%)</title><rect x="1045.1" y="307.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1048.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (32 samples, 2.44%)</title><rect x="1046.0" y="339.0" width="28.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1049.0" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (26 samples, 1.98%)</title><rect x="1050.5" y="323.0" width="23.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1053.5" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.38%)</title><rect x="1050.5" y="307.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.38%)</title><rect x="1050.5" y="291.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.38%)</title><rect x="1050.5" y="275.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.38%)</title><rect x="1050.5" y="259.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1053.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.38%)</title><rect x="1055.0" y="307.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.38%)</title><rect x="1055.0" y="291.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1058.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.31%)</title><rect x="1055.0" y="275.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.31%)</title><rect x="1055.0" y="259.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1058.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.31%)</title><rect x="1055.0" y="243.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1058.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.31%)</title><rect x="1055.0" y="227.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1058.0" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.15%)</title><rect x="1055.0" y="211.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1058.0" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1055.0" y="195.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1058.0" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="1055.9" y="195.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1058.9" y="206.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.15%)</title><rect x="1056.8" y="211.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1059.8" y="222.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.15%)</title><rect x="1056.8" y="195.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1059.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="1058.6" y="275.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1061.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.22%)</title><rect x="1059.5" y="307.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1062.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.22%)</title><rect x="1059.5" y="291.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1062.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.22%)</title><rect x="1059.5" y="275.0" width="14.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1062.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.22%)</title><rect x="1059.5" y="259.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1062.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (16 samples, 1.22%)</title><rect x="1059.5" y="243.0" width="14.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1062.5" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.08%)</title><rect x="1060.4" y="227.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1063.4" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.31%)</title><rect x="1061.3" y="227.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1064.3" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.23%)</title><rect x="1061.3" y="211.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.3" y="222.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="1064.0" y="211.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.0" y="222.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.76%)</title><rect x="1064.9" y="227.0" width="9.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1067.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.08%)</title><rect x="1073.9" y="323.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.46%)</title><rect x="1074.8" y="371.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1077.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.46%)</title><rect x="1074.8" y="355.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1077.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.31%)</title><rect x="1074.8" y="339.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1077.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.15%)</title><rect x="1078.4" y="339.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1081.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.15%)</title><rect x="1078.4" y="323.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1081.4" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.15%)</title><rect x="1078.4" y="307.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1081.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 1.07%)</title><rect x="1080.2" y="403.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1083.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.53%)</title><rect x="1080.2" y="387.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1083.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.53%)</title><rect x="1080.2" y="371.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1083.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.53%)</title><rect x="1080.2" y="355.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1083.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.53%)</title><rect x="1080.2" y="339.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1083.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.53%)</title><rect x="1086.5" y="387.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1089.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (26 samples, 1.98%)</title><rect x="1092.8" y="403.0" width="23.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1095.8" y="414.0">o..</text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.23%)</title><rect x="1113.5" y="387.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.15%)</title><rect x="1114.4" y="371.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.4" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.31%)</title><rect x="1116.2" y="403.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1119.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.31%)</title><rect x="1116.2" y="387.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1119.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.08%)</title><rect x="1119.8" y="419.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1122.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (73 samples, 5.57%)</title><rect x="1120.7" y="419.0" width="65.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1123.7" y="430.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (72 samples, 5.49%)</title><rect x="1121.6" y="403.0" width="64.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1124.6" y="414.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (40 samples, 3.05%)</title><rect x="1133.3" y="387.0" width="36.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1136.3" y="398.0">Jav..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="1138.7" y="371.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.7" y="382.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.38%)</title><rect x="1139.6" y="371.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.6" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="1144.1" y="371.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.1" y="382.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.46%)</title><rect x="1145.0" y="371.0" width="5.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1148.0" y="382.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.08%)</title><rect x="1150.4" y="371.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (17 samples, 1.30%)</title><rect x="1151.3" y="371.0" width="15.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1154.3" y="382.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.23%)</title><rect x="1156.7" y="355.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="366.0"></text>
</g>
<g>
<title>arrayOopDesc::base_offset_in_bytes(BasicType) (1 samples, 0.08%)</title><rect x="1159.4" y="355.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.4" y="366.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.38%)</title><rect x="1160.3" y="355.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1163.3" y="366.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (2 samples, 0.15%)</title><rect x="1163.0" y="339.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="350.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (2 samples, 0.15%)</title><rect x="1164.8" y="355.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.8" y="366.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (1 samples, 0.08%)</title><rect x="1166.6" y="371.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="382.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.15%)</title><rect x="1167.5" y="371.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="382.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.15%)</title><rect x="1169.3" y="387.0" width="1.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1172.3" y="398.0"></text>
</g>
<g>
<title>__recv (16 samples, 1.22%)</title><rect x="1171.1" y="387.0" width="14.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1174.1" y="398.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.08%)</title><rect x="1185.5" y="387.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1188.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.15%)</title><rect x="1186.4" y="435.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.4" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.15%)</title><rect x="1188.2" y="451.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1189.1" y="435.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.1" y="446.0"></text>
</g>
</g>
</svg>
